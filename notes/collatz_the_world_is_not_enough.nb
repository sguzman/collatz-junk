(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.1' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1043082,      23631]
NotebookOptionsPosition[   1038641,      23551]
NotebookOutlinePosition[   1039062,      23568]
CellTagsIndexPosition[   1039019,      23565]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"tick", "[", "n_", "]"}], ":=", 
  FractionBox[
   RowBox[{"1", "+", 
    RowBox[{"Cos", "[", 
     RowBox[{"\[Pi]", " ", "n"}], "]"}]}], "2"]}]], "Input",
 CellChangeTimes->{{3.8009313001772633`*^9, 3.800931301341833*^9}, {
  3.800931785570133*^9, 3.8009317990596733`*^9}, {3.800932007347131*^9, 
  3.8009320161212177`*^9}},
 CellLabel->"In[1]:=",ExpressionUUID->"89049281-e7b7-4958-bb4a-3c88567d2358"],

Cell[BoxData[
 RowBox[{
  RowBox[{"tock", "[", "n_", "]"}], ":=", 
  RowBox[{"1", "-", 
   RowBox[{"tick", "[", "n", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.80093201841626*^9, 3.800932031066073*^9}},
 CellLabel->"In[2]:=",ExpressionUUID->"c3245b5c-7c29-4a8d-bf85-6b14f500b48e"],

Cell[BoxData[
 RowBox[{
  RowBox[{"even", "[", "n_", "]"}], ":=", 
  FractionBox["n", "2"]}]], "Input",
 CellChangeTimes->{{3.800932035376191*^9, 3.800932046416087*^9}},
 CellLabel->"In[3]:=",ExpressionUUID->"6b9c6dfc-c2e7-4318-8311-81b0f3f5f743"],

Cell[BoxData[
 RowBox[{
  RowBox[{"odd", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{"3", "n"}], "+", "1"}]}]], "Input",
 CellChangeTimes->{{3.800932047460881*^9, 3.800932051986957*^9}},
 CellLabel->"In[4]:=",ExpressionUUID->"04dc78bb-13ca-479c-a28c-f56c6c6c05c9"],

Cell[BoxData[
 RowBox[{
  RowBox[{"realcol", "[", "n_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"tick", "[", "n", "]"}], 
    RowBox[{"even", "[", "n", "]"}]}], "+", 
   RowBox[{
    RowBox[{"tock", "[", "n", "]"}], 
    RowBox[{"odd", "[", "n", "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.800932054306037*^9, 3.800932076601988*^9}},
 CellLabel->"In[5]:=",ExpressionUUID->"920cca6a-c7da-4a06-bd6f-89025ec9dc04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"realcol", "[", "n", "]"}]], "Input",
 CellChangeTimes->{{3.800932078206925*^9, 3.800932079547906*^9}},
 CellLabel->"In[6]:=",ExpressionUUID->"ee215fc1-7626-44a8-bb98-85cb65c19119"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"3", " ", "n"}]}], ")"}], " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{
      FractionBox["1", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"-", "1"}], "-", 
        RowBox[{"Cos", "[", 
         RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ")"}]}], "+", 
  RowBox[{
   FractionBox["1", "4"], " ", "n", " ", 
   RowBox[{"(", 
    RowBox[{"1", "+", 
     RowBox[{"Cos", "[", 
      RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}]], "Output",
 CellChangeTimes->{3.800932079776932*^9},
 CellLabel->"Out[6]=",ExpressionUUID->"cbc0982f-41cf-4b41-b0f2-52c45e54f084"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DiscretePlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"3", " ", "n"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "-", 
          RowBox[{"Cos", "[", 
           RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ")"}]}], "+", 
    RowBox[{
     FractionBox["1", "4"], " ", "n", " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Cos", "[", 
        RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "20"}], "}"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[7]:=",ExpressionUUID->"109e2007-611b-4e81-8c37-ade390dd26e8"],

Cell[BoxData[
 GraphicsBox[{{
    {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`],
      AbsoluteThickness[1.6], 
     TagBox[{
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.011000000000000001`], AbsoluteThickness[1.6], Opacity[0.2], 
        LineBox[{},
         VertexColors->None]}, 
       {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
        0.011000000000000001`], AbsoluteThickness[1.6], Opacity[0.2], 
        LineBox[{{{1., 4.}, {1., 0}}, {{2., 1.}, {2., 0}}, {{3., 10.}, {
           3., 0}}, {{4., 2.}, {4., 0}}, {{5., 16.}, {5., 0}}, {{6., 3.}, {
           6., 0}}, {{7., 22.}, {7., 0}}, {{8., 4.}, {8., 0}}, {{9., 28.}, {
           9., 0}}, {{10., 5.}, {10., 0}}, {{11., 34.}, {11., 0}}, {{12., 
           6.}, {12., 0}}, {{13., 40.}, {13., 0}}, {{14., 7.}, {14., 0}}, {{
           15., 46.}, {15., 0}}, {{16., 8.}, {16., 0}}, {{17., 52.}, {
           17., 0}}, {{18., 9.}, {18., 0}}, {{19., 58.}, {19., 0}}, {{20., 
           10.}, {20., 0}}},
         VertexColors->None]}},
      Annotation[#, "Charting`Private`Tag$11220#1"]& ]}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], PointSize[
      0.011000000000000001`], AbsoluteThickness[1.6], {}, 
      PointBox[CompressedData["
1:eJxTTMoPSmViYGAQAWIQDQEf7CG0gANUwAFVnAPKV3HArk4EShtAaQkHVH0y
UNoMSiugmaMEpW3Q7IGZqwalHaG0Bpo9WlDaBUrroNmrB6Xd0dwJc4chlPaC
0kZo7jKG0r5Q2gTuTgBBCxMx
       "]], {}},
     Annotation[#, "Charting`Private`Tag$11220#1"]& ]}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->True,
  AxesOrigin->{1, 0},
  DisplayFunction->Identity,
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "MessagesHead" -> DiscretePlot, "AxisPadding" -> Scaled[0.02], 
    "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "DefaultPlotStyle" -> {
      Directive[
       RGBColor[0.368417, 0.506779, 0.709798], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.880722, 0.611041, 0.142051], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.560181, 0.691569, 0.194885], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.922526, 0.385626, 0.209179], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.528488, 0.470624, 0.701351], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.772079, 0.431554, 0.102387], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.363898, 0.618501, 0.782349], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[1, 0.75, 0], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.647624, 0.37816, 0.614037], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.571589, 0.586483, 0.], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.915, 0.3325, 0.2125], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.40082222609352647`, 0.5220066643438841, 0.85], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.9728288904374106, 0.621644452187053, 0.07336199581899142], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.736782672705901, 0.358, 0.5030266573755369], 
       AbsoluteThickness[1.6]], 
      Directive[
       RGBColor[0.28026441037696703`, 0.715, 0.4292089322474965], 
       AbsoluteThickness[1.6]]}, "DomainPadding" -> Scaled[0.02], 
    "PointSizeFunction" -> "SmallPointSize", "RangePadding" -> Scaled[0.05]},
  PlotRange->{{1, 20}, {0, 58.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.800932081921194*^9},
 CellLabel->"Out[7]=",ExpressionUUID->"82710f4b-cd15-4fdd-b85c-65cc866765c1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"col", "[", "n_", "]"}], ":=", 
  TagBox[GridBox[{
     {"\[Piecewise]", GridBox[{
        {
         FractionBox["n", "2"], 
         RowBox[{"EvenQ", "[", "n", "]"}]},
        {
         RowBox[{
          RowBox[{"3", "n"}], "+", "1"}], 
         RowBox[{"OddQ", "[", "n", "]"}]}
       },
       AllowedDimensions->{2, Automatic},
       Editable->True,
       GridBoxAlignment->{
        "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}},
          "RowsIndexed" -> {}},
       GridBoxItemSize->{
        "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
         "RowsIndexed" -> {}},
       GridBoxSpacings->{"Columns" -> {
           Offset[0.27999999999999997`], {
            Offset[0.84]}, 
           Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
           Offset[0.2], {
            Offset[0.4]}, 
           Offset[0.2]}, "RowsIndexed" -> {}},
       Selectable->True]}
    },
    GridBoxAlignment->{
     "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxItemSize->{
     "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.35]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}],
   "Piecewise",
   DeleteWithContents->True,
   Editable->False,
   SelectWithContents->True,
   Selectable->False,
   StripWrapperBoxes->True]}]], "Input",
 CellChangeTimes->{{3.800932134299778*^9, 3.800932219881444*^9}},
 CellLabel->"In[8]:=",ExpressionUUID->"ea4b8358-5690-47c6-b5ac-a01f91dfe3be"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"realcol", "[", "n", "]"}], "\[Equal]", 
   RowBox[{"col", "[", "n", "]"}]}], "\[And]", 
  RowBox[{"n", "\[Element]", 
   TemplateBox[{},
    "PositiveIntegers"]}]}]], "Input",
 CellChangeTimes->{{3.800932221494577*^9, 3.800932240680431*^9}},
 CellLabel->"In[9]:=",ExpressionUUID->"e9ea4976-d081-4e13-a1c4-5e42e6e4875f"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"3", " ", "n"}]}], ")"}], " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{
        FractionBox["1", "2"], " ", 
        RowBox[{"(", 
         RowBox[{
          RowBox[{"-", "1"}], "-", 
          RowBox[{"Cos", "[", 
           RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ")"}]}], "+", 
    RowBox[{
     FractionBox["1", "4"], " ", "n", " ", 
     RowBox[{"(", 
      RowBox[{"1", "+", 
       RowBox[{"Cos", "[", 
        RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], "\[Equal]", "0"}], "&&", 
  RowBox[{"n", "\[Element]", 
   TemplateBox[{},
    "Integers"]}], "&&", 
  RowBox[{"n", ">", "0"}]}]], "Output",
 CellChangeTimes->{3.800932240978283*^9},
 CellLabel->"Out[9]=",ExpressionUUID->"71df16b3-a580-4efd-b66e-928d83e5b48a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", " ", "n"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "-", 
           RowBox[{"Cos", "[", 
            RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{
      FractionBox["1", "4"], " ", "n", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"Cos", "[", 
         RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], "\[Equal]", "0"}], "&&", 
   RowBox[{"n", "\[Element]", 
    TemplateBox[{},
     "Integers"]}], "&&", 
   RowBox[{"n", ">", "0"}]}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->"In[10]:=",ExpressionUUID->"08f83902-094a-4498-968f-8c1b69ece72a"],

Cell[BoxData[
 TemplateBox[{
  "Reduce", "nsmet", 
   "\"This system cannot be solved with the methods available to Reduce.\"", 
   2, 10, 4, 18568514274091882170, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.8009322442260847`*^9},
 CellLabel->
  "During evaluation of \
In[10]:=",ExpressionUUID->"ce9ba668-0b0e-482d-b79d-d0fc01a21bff"],

Cell[BoxData[
 RowBox[{"Reduce", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"3", " ", "n"}]}], ")"}], " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{
         FractionBox["1", "2"], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"-", "1"}], "-", 
           RowBox[{"Cos", "[", 
            RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ")"}]}], "+", 
     RowBox[{
      FractionBox["1", "4"], " ", "n", " ", 
      RowBox[{"(", 
       RowBox[{"1", "+", 
        RowBox[{"Cos", "[", 
         RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], "\[Equal]", "0"}], "&&", 
   RowBox[{"n", "\[Element]", 
    TemplateBox[{},
     "Integers"]}], "&&", 
   RowBox[{"n", ">", "0"}]}], "]"}]], "Output",
 CellChangeTimes->{3.800932244300479*^9},
 CellLabel->"Out[10]=",ExpressionUUID->"e5cc9772-216c-4c75-a194-329b4b927415"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8009321888458014`*^9, 
  3.800932193571467*^9}},ExpressionUUID->"d1cbc053-1a42-4612-a850-\
1a0d1792f346"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LanguageIdentify", "[", "\"\<Que?\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8009323712387943`*^9, 3.800932379200993*^9}},
 CellLabel->"In[11]:=",ExpressionUUID->"3b316afe-2fea-40f3-9ffe-58e8dc8ac3ca"],

Cell[BoxData[
 TemplateBox[{"\"Spanish\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Language\"", ",", "\"Spanish\""}], "]"}], 
   "\"Entity[\\\"Language\\\", \\\"Spanish\\\"]\"", "\"language\""},
  "Entity"]], "Output",
 CellChangeTimes->{3.80093240797504*^9},
 CellLabel->"Out[11]=",ExpressionUUID->"806e3c88-5618-459a-909a-33687b6b37f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"realcol", "[", "n", "]"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"3", " ", "n"}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{
          FractionBox["1", "2"], " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "-", 
            RowBox[{"Cos", "[", 
             RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}], ")"}]}], "+", 
      RowBox[{
       FractionBox["1", "4"], " ", "n", " ", 
       RowBox[{"(", 
        RowBox[{"1", "+", 
         RowBox[{"Cos", "[", 
          RowBox[{"n", " ", "\[Pi]"}], "]"}]}], ")"}]}]}]}], 
    "\[IndentingNewLine]", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "20"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.800932423694398*^9, 3.800932433165517*^9}},
 CellLabel->"In[12]:=",ExpressionUUID->"87137817-41b9-4e77-ad2a-fc20d174d666"],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    TagBox[
     {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
AQxcvuHtUBKtCP9Fb+NrAxno0DzKSuHqvJs7M+ye72dgkLNJ5PAxJTC/mD9+
cYgBfvNn1QcuK0Oxfl/+qzgGsh3v29zvV4GnIBFQn8DAeFdSkVK8Ks5DQvP1
cQaGrfifOajRQS67ffXNKQa+9QqHfzRkQCin+3xDBgOLcjoe3o9Tw+hh98iP
RQzEHH3yNHCLOpTosofkyxjY2pWSf/+lOuyqm4LXlTNg4tZ+RNpQA6f51vh/
rmZg6qJXBI8wG3rHVmz48paBs4vsxWKrOPA/bWve+5MBh8D3pC+ui9B9TXNs
XFkNxXNPv6dvM4Sow8/fpnQ17nydrla6YgjD3hsDB5lqeK8z7BbWaogYDqt7
SlMNKj8bFj9YbQTVPJWmWVM1iMp+aDtsYYyNJTIFAi5qKGMbxvnPmuCIZ9Od
pW5qMCdJFfIam+L25KncBE81ZOwTXKG02xRTiyUySd5qyH/vKl7+gavXqoST
xf3VwFjZn6V6zQzvX876U+LVEFGwQYuHbgHDX0xrx2Nq2NQh1RTsZIHTMisk
wk6owTrmMFP1gAWcvVML2k+r4ZzezWmJOgvUjeqOX7uihgm9rkXffBaDQ3V/
3pytBumATs+biYuRYBNxQShHDcSis2kJeYthn/jCwv+OGnLbfjCOjCxGlcqW
w4Zlaljj5LlPcp8lVOyPrvYpV0N6gchPm2RLRPndpadWqqHUtNVxz21LLC6a
fDr1TA3fHwsElndaIq1V5Zz2SzX0K9W9ap60xMScva9XvRqyWeIW36WsULz8
tFB1oxpyPq9Jfm9tBdnA0k8jH7j70+Rb8tdaIfhcxy3WJzUoLA35e2CHFRof
8kV4tKlhyjKrUyPMCvqdmiuPfVHDXru3WRXHrZDCv4b2qEsNdUq+2y0uWWFI
88Cvge9qiAw1C7h42worV2dU0X6qYVDvoVJrmRXuhDw9tXqAW/+Ewa+pWiuI
pP/cGvNLDeLaQxFTjVbwq5IwejCsBl6BnWEf263w4rsxf8+YGspJB0tTeq2g
IbKxWW5SDar3DjJZv60QrxdzY9k/Ndib+r8489cK3W65B8PnuPGe0159nrGC
XfibZXd5mEjOtA/8x2ON7MxR6hd+JvRPpMuPCVhj4Rl1QFKYiU7fKeKZsDU2
99s+higTZY1BR/1FrFEhueNksAQTwoIbsvq4WNkkyTuHzMTN8l0+NlwcseG+
XossExyjh7V+3Pdboz8tCCswsWZt2wd/bnzznLnGxUpM8Ld8rrLn5r/winUt
QIUb/7J909g/K/z9vSLkCoOJ2SlOaOS4Fdwp+xwaWFxfqKqk1z5khQeLL8jx
cpiIvaxzXbbHCtJbKn4YcX3k+e6B8xptVtgX313mq8tEfMeabukGK7y7TTp+
wYAJ94uPjn2usYJug97GOmMmyic/Zx4uscLJcfdF/8yY2BOTs3kh1wqDipGz
iyyZ6NFcrLz1ohWciKtvvW2YUHd8s/RqghVIJ34FPbVnokIgxvL1NivsKpC1
G3Nk4uCevYfKnLn9aV4so+HExE8iXzjJwgpx9ITiRBcmovMy7IZFrYD1a3Lj
3JhgzVVqGI1bYvY0NS3akwlPDlPnWIclDvLdjQz1YmLqVHFa8B1L+PU2LNnq
x0SvTtWyJCtLaKimm2wKYKJ91Innmooluj23sz0DmaB3JnV/mV+MTXXjIqtC
maCpPMppqFqM1XcVm8xjmLh3tLK1z2QxxHq6a4zimAi1zRc/SF6MOlpesW4C
E0nmXeuJQQvYpdimsU4ycU1OXfJcpgVM9vtskUrj+nR+97jLs+ZQNL/360cB
E+OBD5duTDdDS9DBr98ecPltWemyyt8MZ28RTR0lTAjphNFLLM0grvS++P1j
JtffRZfOcP3W/OxEZNVLJvwpvZrNMlw/UAPRC1+ZIKsoC53db4yC1c3spVIs
rPYOvCQjYADPX8nrYmRY+HydHSh4Wh+zScsSH8uxUMez3k+Qqg+nV+X9hjQW
jpatSb+oqYce+6t5qlosjJzY5bvbWQdKiwONppaw8KC91eJDoSaqP3F8jB1Z
+O2X9TITmth18Nu5wBUs7PmZNufaxEFxkfvfnjUsNO9Rr77xl401elYPm7xY
2LDn+t4lKzUQzyLZ3j3Izb9nzmG/CRPaNU8Df4SzIOPXdtm2VQ1NWyOz1A6z
QPQf/Xf7MPd3mfmbJy2OhfrNAmlx3HvgEfXjs/jTLEwEU1bkC9CxtSxl/Mk5
FsZfxU+4+3F1rudyjZkLLJwK+eT/vkEF7uceJ+y/woKr97VtaXdo+C1xbcXm
Oyx0cfTstM8o4Xzepoj0eyzU6jf7+MgpwWql3N3mQhaK+LOzJ64oIjExUXxl
2f//p7TXdUcFFfqcJTYJ5SzEeQfd8nKlouX5zN6nlSyks//71DukABZ/UIN5
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
5InIsrBZaH/E/G8qWN1OkzCUZ6F/1tR6zzYyjt/3ni5QYOFGyAqLK7fIqApP
HTBQYiHN1y+K20+G+4qFnwxUWDgesNzk+HFVZHRYvC4gE/bB655xP6ui/0HY
EwM1FmgRT4J0tQm+CnpTDDRZsCOl7JRpUkP5StWzBVosKOxh2HTrq0Pqp+sR
AwoLRrmKD4eS1HEt6q23AZ2Fs3cvO5/x0UBp/h26AZeFBcXnNeaRtSBx/Lty
gQ4LkhXj7/Iva2Hd2pXSBnoE3o8CV7hJa6OjN2ZM34AF0tO/i9wkKRBT2fFC
35SFOF8RKQVCh9vGaazVt2PBcFX/ghB/Fs67eFg8FbAwsb352OBzFprUE3X1
HVh4acmeGyPJhn/JXDn9tSzEbCje/vcRG2dHO9pXbWShazhFUl2Si9otNw6s
2saCywZr2ppeXbjokC7rhbGId3BheaicERJ1au7Uh7NwpXmqtinGCJ90jhQG
R7JwTG3JkO+4ERx021rzo1iQ2fk1vrrOGJZ619RXxRBxJc6Pzj9nCqY+6eGq
i0S+rI0HFSPN4K9f8+pLIguyu+SDFzwyQ5b+kfqDl1lou3O7Pv+XGdQM2v4+
SWHBcybchOVsDjnDa9BPZ2GjcPlDWXULiBmRPujfZ0Hav6paJ88SlkY13xpy
WbiagYUnvlsiyujIUEgeC87VdkVYbIVpo7ZlBY9ZOFGdeeUnoe+Gja+5GRA4
7RSnxe+T54Fl4ri7sYgFungQ/4oVD7tN5hw+9IKFTU2lTlJ7CH1l4pleUMpC
3rhQ9NMXPLSYkn4ZVLKg8TFlJGejNeRQM9n4log3SJF9PcwaLjiyMLSKBQpz
+8rnadb4iDbms2oWoiBx3bXdGovN4s1ca1lIlF209ouwDezNsG7yIws9N7s/
7CbboMLsWrBhPQs2K6MdmjxsIGbuGPP1C+Gf3bQiO8wGFuZzkkMbWfjw5bNJ
7CUbFJt7Fj1rZoG/5afRtiobTJsvrnZtJfAUpV9x6bSBgUVJ2+Q3go8/JQMc
/9ngkQVJdPUPFlYZbj1lTOFjkdjxI586WAjbPlv1wYQP34qf035dLBwsfp23
1YmPF7F2h0S7iX52WWc+7s2HrP390dRfLBz6Pj81NpiPvVJL9+n2sjDjYvxX
LpqPt7XBA+/7WOAF7sm+lchH+AaTnzO/WZDPymi5k8fHZ9n0bZeGWLgbOPeI
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
ivsV
       "]]},
     Annotation[#, "Charting`Private`Tag$18343#1"]& ], 
    TagBox[
     {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
      1.], LineBox[CompressedData["
1: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
AQxcvuHtUBKtCP9Fb+NrAxno0DzKSuHqvJs7M+ye72dgkLNJ5PAxJTC/mD9+
cYgBfvNn1QcuK0Oxfl/+qzgGsh3v29zvV4GnIBFQn8DAeFdSkVK8Ks5DQvP1
cQaGrfifOajRQS67ffXNKQa+9QqHfzRkQCin+3xDBgOLcjoe3o9Tw+hh98iP
RQzEHH3yNHCLOpTosofkyxjY2pWSf/+lOuyqm4LXlTNg4tZ+RNpQA6f51vh/
rmZg6qJXBI8wG3rHVmz48paBs4vsxWKrOPA/bWve+5MBh8D3pC+ui9B9TXNs
XFkNxXNPv6dvM4Sow8/fpnQ17nydrla6YgjD3hsDB5lqeK8z7BbWaogYDqt7
SlMNKj8bFj9YbQTVPJWmWVM1iMp+aDtsYYyNJTIFAi5qKGMbxvnPmuCIZ9Od
pW5qMCdJFfIam+L25KncBE81ZOwTXKG02xRTiyUySd5qyH/vKl7+gavXqoST
xf3VwFjZn6V6zQzvX876U+LVEFGwQYuHbgHDX0xrx2Nq2NQh1RTsZIHTMisk
wk6owTrmMFP1gAWcvVML2k+r4ZzezWmJOgvUjeqOX7uihgm9rkXffBaDQ3V/
3pytBumATs+biYuRYBNxQShHDcSis2kJeYthn/jCwv+OGnLbfjCOjCxGlcqW
w4Zlaljj5LlPcp8lVOyPrvYpV0N6gchPm2RLRPndpadWqqHUtNVxz21LLC6a
fDr1TA3fHwsElndaIq1V5Zz2SzX0K9W9ap60xMScva9XvRqyWeIW36WsULz8
tFB1oxpyPq9Jfm9tBdnA0k8jH7j70+Rb8tdaIfhcxy3WJzUoLA35e2CHFRof
8kV4tKlhyjKrUyPMCvqdmiuPfVHDXru3WRXHrZDCv4b2qEsNdUq+2y0uWWFI
88Cvge9qiAw1C7h42worV2dU0X6qYVDvoVJrmRXuhDw9tXqAW/+Ewa+pWiuI
pP/cGvNLDeLaQxFTjVbwq5IwejCsBl6BnWEf263w4rsxf8+YGspJB0tTeq2g
IbKxWW5SDar3DjJZv60QrxdzY9k/Ndib+r8489cK3W65B8PnuPGe0159nrGC
XfibZXd5mEjOtA/8x2ON7MxR6hd+JvRPpMuPCVhj4Rl1QFKYiU7fKeKZsDU2
99s+higTZY1BR/1FrFEhueNksAQTwoIbsvq4WNkkyTuHzMTN8l0+NlwcseG+
XossExyjh7V+3Pdboz8tCCswsWZt2wd/bnzznLnGxUpM8Ld8rrLn5r/winUt
QIUb/7J909g/K/z9vSLkCoOJ2SlOaOS4Fdwp+xwaWFxfqKqk1z5khQeLL8jx
cpiIvaxzXbbHCtJbKn4YcX3k+e6B8xptVtgX313mq8tEfMeabukGK7y7TTp+
wYAJ94uPjn2usYJug97GOmMmyic/Zx4uscLJcfdF/8yY2BOTs3kh1wqDipGz
iyyZ6NFcrLz1ohWciKtvvW2YUHd8s/RqghVIJ34FPbVnokIgxvL1NivsKpC1
G3Nk4uCevYfKnLn9aV4so+HExE8iXzjJwgpx9ITiRBcmovMy7IZFrYD1a3Lj
3JhgzVVqGI1bYvY0NS3akwlPDlPnWIclDvLdjQz1YmLqVHFa8B1L+PU2LNnq
x0SvTtWyJCtLaKimm2wKYKJ91Innmooluj23sz0DmaB3JnV/mV+MTXXjIqtC
maCpPMppqFqM1XcVm8xjmLh3tLK1z2QxxHq6a4zimAi1zRc/SF6MOlpesW4C
E0nmXeuJQQvYpdimsU4ycU1OXfJcpgVM9vtskUrj+nR+97jLs+ZQNL/360cB
E+OBD5duTDdDS9DBr98ecPltWemyyt8MZ28RTR0lTAjphNFLLM0grvS++P1j
JtffRZfOcP3W/OxEZNVLJvwpvZrNMlw/UAPRC1+ZIKsoC53db4yC1c3spVIs
rPYOvCQjYADPX8nrYmRY+HydHSh4Wh+zScsSH8uxUMez3k+Qqg+nV+X9hjQW
jpatSb+oqYce+6t5qlosjJzY5bvbWQdKiwONppaw8KC91eJDoSaqP3F8jB1Z
+O2X9TITmth18Nu5wBUs7PmZNufaxEFxkfvfnjUsNO9Rr77xl401elYPm7xY
2LDn+t4lKzUQzyLZ3j3Izb9nzmG/CRPaNU8Df4SzIOPXdtm2VQ1NWyOz1A6z
QPQf/Xf7MPd3mfmbJy2OhfrNAmlx3HvgEfXjs/jTLEwEU1bkC9CxtSxl/Mk5
FsZfxU+4+3F1rudyjZkLLJwK+eT/vkEF7uceJ+y/woKr97VtaXdo+C1xbcXm
Oyx0cfTstM8o4Xzepoj0eyzU6jf7+MgpwWql3N3mQhaK+LOzJ64oIjExUXxl
2f//p7TXdUcFFfqcJTYJ5SzEeQfd8nKlouX5zN6nlSyks//71DukABZ/UIN5
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
5InIsrBZaH/E/G8qWN1OkzCUZ6F/1tR6zzYyjt/3ni5QYOFGyAqLK7fIqApP
HTBQYiHN1y+K20+G+4qFnwxUWDgesNzk+HFVZHRYvC4gE/bB655xP6ui/0HY
EwM1FmgRT4J0tQm+CnpTDDRZsCOl7JRpUkP5StWzBVosKOxh2HTrq0Pqp+sR
AwoLRrmKD4eS1HEt6q23AZ2Fs3cvO5/x0UBp/h26AZeFBcXnNeaRtSBx/Lty
gQ4LkhXj7/Iva2Hd2pXSBnoE3o8CV7hJa6OjN2ZM34AF0tO/i9wkKRBT2fFC
35SFOF8RKQVCh9vGaazVt2PBcFX/ghB/Fs67eFg8FbAwsb352OBzFprUE3X1
HVh4acmeGyPJhn/JXDn9tSzEbCje/vcRG2dHO9pXbWShazhFUl2Si9otNw6s
2saCywZr2ppeXbjokC7rhbGId3BheaicERJ1au7Uh7NwpXmqtinGCJ90jhQG
R7JwTG3JkO+4ERx021rzo1iQ2fk1vrrOGJZ619RXxRBxJc6Pzj9nCqY+6eGq
i0S+rI0HFSPN4K9f8+pLIguyu+SDFzwyQ5b+kfqDl1lou3O7Pv+XGdQM2v4+
SWHBcybchOVsDjnDa9BPZ2GjcPlDWXULiBmRPujfZ0Hav6paJ88SlkY13xpy
WbiagYUnvlsiyujIUEgeC87VdkVYbIVpo7ZlBY9ZOFGdeeUnoe+Gja+5GRA4
7RSnxe+T54Fl4ri7sYgFungQ/4oVD7tN5hw+9IKFTU2lTlJ7CH1l4pleUMpC
3rhQ9NMXPLSYkn4ZVLKg8TFlJGejNeRQM9n4log3SJF9PcwaLjiyMLSKBQpz
+8rnadb4iDbms2oWoiBx3bXdGovN4s1ca1lIlF209ouwDezNsG7yIws9N7s/
7CbboMLsWrBhPQs2K6MdmjxsIGbuGPP1C+Gf3bQiO8wGFuZzkkMbWfjw5bNJ
7CUbFJt7Fj1rZoG/5afRtiobTJsvrnZtJfAUpV9x6bSBgUVJ2+Q3go8/JQMc
/9ngkQVJdPUPFlYZbj1lTOFjkdjxI586WAjbPlv1wYQP34qf035dLBwsfp23
1YmPF7F2h0S7iX52WWc+7s2HrP390dRfLBz6Pj81NpiPvVJL9+n2sjDjYvxX
LpqPt7XBA+/7WOAF7sm+lchH+AaTnzO/WZDPymi5k8fHZ9n0bZeGWLgbOPeI
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
ivsV
       "]]},
     Annotation[#, "Charting`Private`Tag$18343#2"]& ]}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1., 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{919.9999999999995, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{1, 20}, {0., 58.01821785053389}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 GeneratedCell->False,
 CellAutoOverwrite->False,
 CellChangeTimes->{3.800932434505087*^9, 
  3.800933511118846*^9},ExpressionUUID->"854e4a0a-30d4-4c17-9309-\
05f6ea1c1045"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AxiomaticTheory", "[", "\"\<BooleanAxioms\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.80093357596089*^9, 3.8009335781859903`*^9}},
 CellLabel->"In[13]:=",ExpressionUUID->"397644ee-d170-44a9-aac6-1c251fdd1ad7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
    RowBox[{
     RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], "\[Equal]", 
     RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalA]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
    RowBox[{
     RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], "\[Equal]", 
     RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
    RowBox[{
     RowBox[{"\[FormalA]", "\[CircleTimes]", 
      RowBox[{"(", 
       RowBox[{"\[FormalB]", "\[CirclePlus]", 
        OverscriptBox["\[FormalB]", "_"]}], ")"}]}], "\[Equal]", 
     "\[FormalA]"}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
    RowBox[{
     RowBox[{"\[FormalA]", "\[CirclePlus]", 
      RowBox[{"\[FormalB]", "\[CircleTimes]", 
       OverscriptBox["\[FormalB]", "_"]}]}], "\[Equal]", "\[FormalA]"}]}], 
   ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], "}"}]], 
    RowBox[{
     RowBox[{"\[FormalA]", "\[CircleTimes]", 
      RowBox[{"(", 
       RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalC]"}], ")"}]}], 
     "\[Equal]", 
     RowBox[{
      RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], "\[CirclePlus]", 
      RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalC]"}]}]}]}], ",", 
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], "}"}]], 
    RowBox[{
     RowBox[{"\[FormalA]", "\[CirclePlus]", 
      RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalC]"}]}], "\[Equal]", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], ")"}], 
      "\[CircleTimes]", 
      RowBox[{"(", 
       RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalC]"}], ")"}]}]}]}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.80093357847165*^9},
 CellLabel->"Out[13]=",ExpressionUUID->"d37c4958-da7e-469d-8041-81c7f7f88802"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FindEquationalProof", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    SubscriptBox["\[ForAll]", 
     RowBox[{"{", 
      RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
    RowBox[{
     OverscriptBox[
      RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], "_"], "\[Equal]", 
     RowBox[{
      OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
      OverscriptBox["\[FormalA]", "_"]}]}]}], ",", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       SubscriptBox["\[ForAll]", 
        RowBox[{"{", 
         RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
       RowBox[{
        RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], "\[Equal]", 
        RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalA]"}]}]}], ",", 
      RowBox[{
       SubscriptBox["\[ForAll]", 
        RowBox[{"{", 
         RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
       RowBox[{
        RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], "\[Equal]", 
        RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}]}]}], ",", 
      RowBox[{
       SubscriptBox["\[ForAll]", 
        RowBox[{"{", 
         RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
       RowBox[{
        RowBox[{"\[FormalA]", "\[CircleTimes]", 
         RowBox[{"(", 
          RowBox[{"\[FormalB]", "\[CirclePlus]", 
           OverscriptBox["\[FormalB]", "_"]}], ")"}]}], "\[Equal]", 
        "\[FormalA]"}]}], ",", 
      RowBox[{
       SubscriptBox["\[ForAll]", 
        RowBox[{"{", 
         RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
       RowBox[{
        RowBox[{"\[FormalA]", "\[CirclePlus]", 
         RowBox[{"\[FormalB]", "\[CircleTimes]", 
          OverscriptBox["\[FormalB]", "_"]}]}], "\[Equal]", "\[FormalA]"}]}], 
      ",", 
      RowBox[{
       SubscriptBox["\[ForAll]", 
        RowBox[{"{", 
         RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], "}"}]], 
       RowBox[{
        RowBox[{"\[FormalA]", "\[CircleTimes]", 
         RowBox[{"(", 
          RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalC]"}], ")"}]}], 
        "\[Equal]", 
        RowBox[{
         RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
         "\[CirclePlus]", 
         RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalC]"}]}]}]}], ",", 
      RowBox[{
       SubscriptBox["\[ForAll]", 
        RowBox[{"{", 
         RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], "}"}]], 
       RowBox[{
        RowBox[{"\[FormalA]", "\[CirclePlus]", 
         RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalC]"}]}], "\[Equal]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], ")"}], 
         "\[CircleTimes]", 
         RowBox[{"(", 
          RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalC]"}], 
          ")"}]}]}]}]}], "}"}], "\[IndentingNewLine]", "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.800933583028407*^9, 3.800933593463004*^9}, {
   3.8009336732510023`*^9, 3.800933698922868*^9}, {3.8009337763276997`*^9, 
   3.8009337802205477`*^9}, 3.8009338281888647`*^9, 3.800933870933063*^9, {
   3.800933912222178*^9, 3.8009339590850677`*^9}},
 CellLabel->"In[14]:=",ExpressionUUID->"569be1f0-69ad-4ad7-b265-be5982283438"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["ProofObject",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
              1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{
                GrayLevel[0.55], 
                LineBox[{1, 6}], 
                LineBox[{2, 5}], 
                LineBox[{3, 5}], 
                LineBox[{4, 10}], 
                LineBox[{5, 6}], 
                LineBox[{6, 7}], 
                LineBox[{6, 8}], 
                LineBox[{7, 9}], 
                LineBox[{8, 9}], 
                LineBox[{9, 10}], 
                LineBox[{3, 7}]}, {
                PointBox[1], 
                PointBox[2], 
                PointBox[3], 
                PointBox[4], 
                PointBox[5], 
                PointBox[6], 
                PointBox[7], 
                PointBox[8], 
                PointBox[9], 
                PointBox[10]}}], FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
             PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["72", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    OverscriptBox[
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                    "_"], "\[Equal]", 
                    RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}]}]}], Short[#, 1]& ], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}]], 
            GraphicsBox[
             
             GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
              1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 0.}}, {{
                GrayLevel[0.55], 
                LineBox[{1, 6}], 
                LineBox[{2, 5}], 
                LineBox[{3, 5}], 
                LineBox[{4, 10}], 
                LineBox[{5, 6}], 
                LineBox[{6, 7}], 
                LineBox[{6, 8}], 
                LineBox[{7, 9}], 
                LineBox[{8, 9}], 
                LineBox[{9, 10}], 
                LineBox[{3, 7}]}, {
                PointBox[1], 
                PointBox[2], 
                PointBox[3], 
                PointBox[4], 
                PointBox[5], 
                PointBox[6], 
                PointBox[7], 
                PointBox[8], 
                PointBox[9], 
                PointBox[10]}}], FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
             PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
             Axes -> False, AspectRatio -> 1, ImageSize -> 
             Dynamic[{
               Automatic, 3.5 CurrentValue["FontCapHeight"]/
                AbsoluteCurrentValue[Magnification]}], Frame -> True, 
             FrameTicks -> None, FrameStyle -> Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
               RowBox[{
                 TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["72", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    OverscriptBox[
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                    "_"], "\[Equal]", 
                    RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}]}]}], Short[#, 1]& ], 
                  "SummaryItem"]}], "\[SpanFromLeft]"}, {
               RowBox[{
                 TagBox["\"Axioms: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   RowBox[{
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
                    "\[Equal]", 
                    
                    RowBox[{
                    "\[FormalB]", "\[CircleTimes]", "\[FormalA]"}]}]}], "&&", 
                    
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                    "\[Equal]", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}]}]}],
                     "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", 
                    OverscriptBox["\[FormalB]", "_"]}], ")"}]}], "\[Equal]", 
                    "\[FormalA]"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", 
                    RowBox[{"\[FormalB]", "\[CircleTimes]", 
                    OverscriptBox["\[FormalB]", "_"]}]}], "\[Equal]", 
                    "\[FormalA]"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], 
                    "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalC]"}], 
                    ")"}]}], "\[Equal]", 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
                    "\[CirclePlus]", 
                    
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    "\[FormalC]"}]}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    
                    RowBox[{
                    "\[FormalA]", ",", "\[FormalB]", ",", "\[FormalC]"}], 
                    "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", 
                    RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalC]"}]}], 
                    "\[Equal]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                    ")"}], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalC]"}], 
                    ")"}]}]}]}]}], Short[#, 1]& ], "SummaryItem"]}], 
               "\[SpanFromLeft]"}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  ProofObject["EquationalLogic", 
   ForAll[{\[FormalA], \[FormalB]}, OverBar[
      CirclePlus[\[FormalB], \[FormalA]]] == CircleTimes[
      OverBar[\[FormalB]], 
      OverBar[\[FormalA]]]], 
   And[
    ForAll[{\[FormalA], \[FormalB]}, CircleTimes[\[FormalA], \[FormalB]] == 
     CircleTimes[\[FormalB], \[FormalA]]], 
    ForAll[{\[FormalA], \[FormalB]}, CirclePlus[\[FormalA], \[FormalB]] == 
     CirclePlus[\[FormalB], \[FormalA]]], 
    ForAll[{\[FormalA], \[FormalB]}, CircleTimes[\[FormalA], 
       CirclePlus[\[FormalB], 
        OverBar[\[FormalB]]]] == \[FormalA]], 
    ForAll[{\[FormalA], \[FormalB]}, CirclePlus[\[FormalA], 
       CircleTimes[\[FormalB], 
        OverBar[\[FormalB]]]] == \[FormalA]], 
    ForAll[{\[FormalA], \[FormalB], \[FormalC]}, CircleTimes[\[FormalA], 
       CirclePlus[\[FormalB], \[FormalC]]] == CirclePlus[
       CircleTimes[\[FormalA], \[FormalB]], 
       CircleTimes[\[FormalA], \[FormalC]]]], 
    ForAll[{\[FormalA], \[FormalB], \[FormalC]}, CirclePlus[\[FormalA], 
       CircleTimes[\[FormalB], \[FormalC]]] == CircleTimes[
       CirclePlus[\[FormalA], \[FormalB]], 
       CirclePlus[\[FormalA], \[FormalC]]]]], {{"Axiom", 1} -> 
    Association["Statement" -> $CellContext`x1 == CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, 
          OverBar[$CellContext`x2]]], "Proof" -> Association[]], {"Axiom", 2} -> 
    Association[
     "Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]]], "Proof" -> Association[]], {"Axiom", 3} -> 
    Association[
     "Statement" -> 
      CircleTimes[$CellContext`x1, $CellContext`x2] == 
       CircleTimes[$CellContext`x2, $CellContext`x1], "Proof" -> 
      Association[]], {"Axiom", 4} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
      Association[]], {"Axiom", 5} -> Association["Statement" -> CircleTimes[
         CirclePlus[$CellContext`x1, $CellContext`x2], 
         CirclePlus[$CellContext`x1, $CellContext`x3]] == 
       CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[]], {"Axiom", 6} -> 
    Association[
     "Statement" -> 
      CirclePlus[$CellContext`x1, $CellContext`x2] == 
       CirclePlus[$CellContext`x2, $CellContext`x1], "Proof" -> 
      Association[]], {"Hypothesis", 1} -> 
    Association["Statement" -> CircleTimes[
         OverBar[\[FormalB]], 
         OverBar[\[FormalA]]] == OverBar[
         CirclePlus[\[FormalB], \[FormalA]]], "Proof" -> Association[]], {
     "CriticalPairLemma", 1} -> Association["Statement" -> CircleTimes[
         CirclePlus[$CellContext`x1, 
          OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
      "Proof" -> Association[
       "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, "Rule" -> 
        TwoWayRule[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "Side" -> 1, "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 1}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 2} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, 
          OverBar[$CellContext`x1]]] == 
       CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
      Association[
       "Construct" -> {"Axiom", 4}, "Orientation" -> -1, "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CirclePlus[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 3} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
         CircleTimes[$CellContext`x2, $CellContext`x1], 
         CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
      Association[
       "Construct" -> {"Axiom", 4}, "Orientation" -> -1, "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 4} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x1]]] == 
       CirclePlus[$CellContext`x1, $CellContext`x2], "Proof" -> 
      Association[
       "Construct" -> {"Axiom", 5}, "Orientation" -> 1, "Rule" -> (CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]]], "MatchingConstruct" -> {"Axiom", 1}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 5} -> Association["Statement" -> CirclePlus[
         CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
      "Proof" -> Association[
       "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, "Rule" -> 
        TwoWayRule[
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "Side" -> 1, "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 2}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 6} -> 
    Association[
     "Statement" -> 
      CirclePlus[$CellContext`x1, $CellContext`x2] == 
       CirclePlus[$CellContext`x1, 
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 1}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`x2), "Side" -> 1, "Subpattern" -> 
        CircleTimes[
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 5}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]), "MatchingSide" -> 
        1]], {"CriticalPairLemma", 7} -> 
    Association[
     "Statement" -> 
      CircleTimes[$CellContext`x1, $CellContext`x2] == 
       CircleTimes[$CellContext`x1, 
         CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 5}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`x2), "Side" -> 1, "Subpattern" -> 
        CirclePlus[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 4}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "MatchingSide" -> 
        1]], {"CriticalPairLemma", 8} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         OverBar[
          OverBar[$CellContext`x1]]] == $CellContext`x1, "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 9} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         OverBar[
          OverBar[
           OverBar[$CellContext`x1]]]] == CircleTimes[$CellContext`x1, 
         OverBar[$CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 8}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 10} -> Association["Statement" -> CirclePlus[
         OverBar[
          OverBar[$CellContext`x1]], $CellContext`x1] == CirclePlus[
         OverBar[
          OverBar[$CellContext`x1]], 
         CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 9}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            OverBar[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]]] -> CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 1} -> Association["Statement" -> CirclePlus[
         OverBar[
          OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
         OverBar[$CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 10}, "Position" -> 2, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
        CirclePlus[
           OverBar[
            OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
           OverBar[$CellContext`x1]]]], {"SubstitutionLemma", 2} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         OverBar[
          OverBar[$CellContext`x1]]] == OverBar[
         OverBar[$CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 1}, "Position" -> 1, 
        "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
        "OutputExpression" -> CirclePlus[$CellContext`x1, 
           OverBar[
            OverBar[$CellContext`x1]]] == OverBar[
           OverBar[$CellContext`x1]]]], {"SubstitutionLemma", 3} -> 
    Association["Statement" -> $CellContext`x1 == OverBar[
         OverBar[$CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 2}, "Position" -> 1, 
        "Construct" -> {"CriticalPairLemma", 8}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`x1 == OverBar[
           OverBar[$CellContext`x1]]]], {"CriticalPairLemma", 11} -> 
    Association["Statement" -> CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x2] == CircleTimes[
         OverBar[$CellContext`x1], 
         CirclePlus[$CellContext`x1, $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 12} -> Association["Statement" -> CirclePlus[
         OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
         OverBar[$CellContext`x1], 
         CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 13} -> Association["Statement" -> CirclePlus[
         OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
         OverBar[$CellContext`x1], 
         CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 14} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CirclePlus[$CellContext`x1, $CellContext`x2]] == 
       CirclePlus[$CellContext`x1, 
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CircleTimes[
          OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 11}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]), "MatchingSide" -> 
        1]], {"SubstitutionLemma", 4} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CirclePlus[$CellContext`x1, $CellContext`x2]] == 
       CirclePlus[$CellContext`x1, $CellContext`x2], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 14}, "Position" -> 2, 
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "OutputExpression" -> CirclePlus[$CellContext`x1, 
           CirclePlus[$CellContext`x1, $CellContext`x2]] == 
         CirclePlus[$CellContext`x1, $CellContext`x2]]], {
     "CriticalPairLemma", 15} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          CirclePlus[$CellContext`x1, $CellContext`x3]]] == CircleTimes[
         CirclePlus[$CellContext`x1, $CellContext`x2], 
         CirclePlus[$CellContext`x1, $CellContext`x3]], "Proof" -> 
      Association[
       "Construct" -> {"Axiom", 5}, "Orientation" -> 1, "Rule" -> (CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x3, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 4}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "MatchingSide" -> 1]], {"SubstitutionLemma", 5} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
       CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 15}, "Position" -> 2, 
        "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]), 
        "OutputExpression" -> CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, 
            CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
         CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]]], {
     "CriticalPairLemma", 16} -> Association["Statement" -> CircleTimes[
         OverBar[
          OverBar[$CellContext`x1]], 
         CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
         OverBar[
          OverBar[$CellContext`x1]], 
         CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
        "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 12}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]), "MatchingSide" -> 
        1]], {"SubstitutionLemma", 6} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
         OverBar[
          OverBar[$CellContext`x1]], 
         CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 16}, "Position" -> {1, 1}, 
        "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
        "Rule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, 
           CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
           OverBar[
            OverBar[$CellContext`x1]], 
           CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]]]], {
     "SubstitutionLemma", 7} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
         OverBar[
          OverBar[$CellContext`x1]], $CellContext`x2], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 6}, "Position" -> 2, 
        "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, 
           CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
           OverBar[
            OverBar[$CellContext`x1]], $CellContext`x2]]], {
     "SubstitutionLemma", 8} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x1, $CellContext`x2]] == 
       CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 7}, "Position" -> {2, 1}, 
        "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
        "Rule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, 
           CircleTimes[$CellContext`x1, $CellContext`x2]] == 
         CircleTimes[$CellContext`x1, $CellContext`x2]]], {
     "CriticalPairLemma", 17} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
       CirclePlus[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
      Association[
       "Construct" -> {"Axiom", 4}, "Orientation" -> -1, "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "MatchingSide" -> 1]], {"SubstitutionLemma", 9} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
       CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 17}, "Position" -> 2, 
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, 
           CirclePlus[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
         CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]]], {
     "CriticalPairLemma", 18} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, 
          CircleTimes[$CellContext`x1, $CellContext`x3]]] == CirclePlus[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
      Association[
       "Construct" -> {"Axiom", 4}, "Orientation" -> -1, "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x3, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "MatchingSide" -> 1]], {"SubstitutionLemma", 10} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, 
          CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
       CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 18}, "Position" -> 2, 
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, 
            CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
         CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]]], {
     "CriticalPairLemma", 19} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]]] == CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 5}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]]] -> CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 2}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "MatchingSide" -> 1]], {"SubstitutionLemma", 11} -> 
    Association[
     "Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 19}, "Position" -> 1, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), 
        "OutputExpression" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
     "CriticalPairLemma", 20} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         OverBar[$CellContext`x1]] == CircleTimes[$CellContext`x2, 
         CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
        CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 5}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> $CellContext`x2), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 21} -> 
    Association[
     "Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
        CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 22} -> 
    Association["Statement" -> CircleTimes[
         OverBar[$CellContext`x1], 
         CircleTimes[$CellContext`x2, $CellContext`x1]] == CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x1], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
        "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 23} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]] == 
       CircleTimes[$CellContext`x1, 
         OverBar[$CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 21}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 12} -> Association["Statement" -> CircleTimes[
         OverBar[$CellContext`x1], 
         CircleTimes[$CellContext`x2, $CellContext`x1]] == 
       CircleTimes[$CellContext`x1, 
         OverBar[$CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 22}, "Position" -> 2, 
        "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> CircleTimes[$CellContext`x2, $CellContext`x1]), 
        "OutputExpression" -> CircleTimes[
           OverBar[$CellContext`x1], 
           CircleTimes[$CellContext`x2, $CellContext`x1]] == 
         CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]]], {"CriticalPairLemma", 24} -> 
    Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]]] == CircleTimes[
         OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]], 
         CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 12}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]), "Side" -> 1, "Subpattern" -> 
        CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 13} -> Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
       CircleTimes[$CellContext`x2, 
         OverBar[$CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 24}, "Position" -> 2, 
        "Construct" -> {"CriticalPairLemma", 20}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]), "OutputExpression" -> CircleTimes[
           CircleTimes[$CellContext`x1, $CellContext`x2], 
           OverBar[
            CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
         CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]]], {"CriticalPairLemma", 25} -> 
    Association["Statement" -> CirclePlus[
         OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]], 
         OverBar[$CellContext`x2]] == CirclePlus[
         OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]], 
         CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 13}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 14} -> Association["Statement" -> CirclePlus[
         OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]], 
         OverBar[$CellContext`x2]] == OverBar[
         CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 25}, "Position" -> 2, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
        CirclePlus[
           OverBar[
            CircleTimes[$CellContext`x1, $CellContext`x2]], 
           OverBar[$CellContext`x2]] == OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]]]], {
     "CriticalPairLemma", 26} -> Association["Statement" -> CirclePlus[
         OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
       CirclePlus[
         OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], 
         CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 13}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 23}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 15} -> Association["Statement" -> CirclePlus[
         OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
       OverBar[
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 26}, "Position" -> 2, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
        CirclePlus[
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
         OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]]], {
     "SubstitutionLemma", 16} -> Association["Statement" -> CirclePlus[
         OverBar[$CellContext`x1], 
         OverBar[
          CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
         CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 14}, "Position" -> 1, 
        "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
        "OutputExpression" -> CirclePlus[
           OverBar[$CellContext`x1], 
           OverBar[
            CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
           CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
     "CriticalPairLemma", 27} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, 
          CircleTimes[$CellContext`x2, $CellContext`x3]]] == 
       CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          CirclePlus[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 9}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CirclePlus[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          Pattern[$CellContext`x3, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 3}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]), "MatchingSide" -> 
        1]], {"SubstitutionLemma", 17} -> 
    Association[
     "Statement" -> 
      CircleTimes[$CellContext`x1, $CellContext`x2] == 
       CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          CirclePlus[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 27}, "Position" -> {1, 2}, 
        "Construct" -> {"CriticalPairLemma", 21}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, $CellContext`x2] == 
         CircleTimes[$CellContext`x1, 
           CircleTimes[$CellContext`x2, 
            CirclePlus[$CellContext`x1, $CellContext`x3]]]]], {
     "CriticalPairLemma", 28} -> 
    Association[
     "Statement" -> 
      CircleTimes[$CellContext`x1, $CellContext`x2] == 
       CircleTimes[$CellContext`x1, 
         CircleTimes[
          CirclePlus[$CellContext`x1, $CellContext`x3], $CellContext`x2]], 
      "Proof" -> Association[
       "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x2, 
           Blank[]], 
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 29} -> 
    Association[
     "Statement" -> 
      CircleTimes[$CellContext`x1, $CellContext`x2] == 
       CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          CirclePlus[$CellContext`x3, $CellContext`x1]]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x3, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 30} -> 
    Association[
     "Statement" -> 
      CircleTimes[$CellContext`x1, $CellContext`x2] == 
       CircleTimes[$CellContext`x1, 
         CircleTimes[
          CirclePlus[$CellContext`x3, $CellContext`x1], $CellContext`x2]], 
      "Proof" -> Association[
       "Construct" -> {"CriticalPairLemma", 28}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x3]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 31} -> 
    Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
       CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         CircleTimes[$CellContext`x3, $CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 29}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x3, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x3, 
           Blank[]], 
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 21}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "CriticalPairLemma", 32} -> Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
       CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], 
         CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 30}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x3]), 
        "Side" -> 1, "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x2, 
           Blank[]], 
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 18} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 15}, "Position" -> 1, 
        "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
        "OutputExpression" -> CirclePlus[$CellContext`x1, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]]], {
     "CriticalPairLemma", 33} -> Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
       CircleTimes[
         CircleTimes[$CellContext`x3, $CellContext`x1], 
         CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 31}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x3, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]] -> CircleTimes[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]), 
        "Side" -> 1, "Subpattern" -> CircleTimes[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x3, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 19} -> 
    Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
       CircleTimes[
         CircleTimes[$CellContext`x3, $CellContext`x1], $CellContext`x2], 
      "Proof" -> Association[
       "Input" -> {"CriticalPairLemma", 33}, "Position" -> 2, 
        "Construct" -> {"CriticalPairLemma", 32}, "Orientation" -> -1, 
        "Rule" -> (CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]] -> CircleTimes[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]), 
        "OutputExpression" -> CircleTimes[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
         CircleTimes[
           
           CircleTimes[$CellContext`x3, $CellContext`x1], $CellContext`x2]]], \
{"CriticalPairLemma", 34} -> Association["Statement" -> CircleTimes[
         CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
       CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 19}, "Orientation" -> {-1, 1}, 
        "Rule" -> TwoWayRule[
          CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]], 
          CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x3, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]]], "Side" -> 1, "Subpattern" -> CircleTimes[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          Pattern[$CellContext`x3, 
           Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
        "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], 
          CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 20} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
       CircleTimes[$CellContext`x2, 
         OverBar[$CellContext`x2]], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 13}, "Position" -> 1, 
        "Construct" -> {"CriticalPairLemma", 34}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]] -> CircleTimes[$CellContext`x1, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]), 
        "OutputExpression" -> CircleTimes[$CellContext`x1, 
           CircleTimes[$CellContext`x2, 
            OverBar[
             CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
         CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]]], {"CriticalPairLemma", 35} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]]] == 
       CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
        "Side" -> 1, "Subpattern" -> CircleTimes[
          OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 20}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             CircleTimes[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]]]]] -> CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 21} -> 
    Association["Statement" -> CirclePlus[$CellContext`x1, 
         CircleTimes[$CellContext`x2, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]]] == $CellContext`x1, 
      "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 35}, "Position" -> 2, 
        "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
        CirclePlus[$CellContext`x1, 
           CircleTimes[$CellContext`x2, 
            OverBar[
             CircleTimes[
              
              OverBar[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1]], {"CriticalPairLemma", 36} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         CirclePlus[$CellContext`x2, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]]]] == 
       CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 10}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]]] -> CircleTimes[$CellContext`x1, 
           CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
        "Subpattern" -> CirclePlus[
          Pattern[$CellContext`x2, 
           Blank[]], 
          CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]]], "MatchingConstruct" -> {"SubstitutionLemma", 21}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            OverBar[
             CircleTimes[
              OverBar[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              Pattern[$CellContext`x2, 
               Blank[]]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 22} -> 
    Association["Statement" -> CircleTimes[$CellContext`x1, 
         OverBar[
          CircleTimes[
           OverBar[$CellContext`x2], $CellContext`x1]]] == 
       CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 36}, "Position" -> {1, 2}, 
        "Construct" -> {"SubstitutionLemma", 18}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]]] -> OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]), "OutputExpression" -> 
        CircleTimes[$CellContext`x1, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x2], $CellContext`x1]]] == 
         CircleTimes[$CellContext`x1, $CellContext`x2]]], {
     "CriticalPairLemma", 37} -> Association["Statement" -> CirclePlus[
         OverBar[$CellContext`x1], 
         OverBar[
          CircleTimes[
           OverBar[$CellContext`x2], $CellContext`x1]]] == CirclePlus[
         OverBar[$CellContext`x1], 
         CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
        "Subpattern" -> CircleTimes[
          Pattern[$CellContext`x1, 
           Blank[]], 
          Pattern[$CellContext`x2, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 22}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           OverBar[
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
        "MatchingSide" -> 1]], {"SubstitutionLemma", 23} -> 
    Association["Statement" -> OverBar[
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
         OverBar[$CellContext`x2], 
         CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
      Association[
       "Input" -> {"CriticalPairLemma", 37}, "Position" -> 1, 
        "Construct" -> {"SubstitutionLemma", 16}, "Orientation" -> 1, 
        "Rule" -> (CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           OverBar[
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]]] -> OverBar[
           CircleTimes[$CellContext`x2, $CellContext`x1]]), 
        "OutputExpression" -> OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
           OverBar[$CellContext`x2], 
           CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
     "SubstitutionLemma", 24} -> Association["Statement" -> OverBar[
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
         OverBar[$CellContext`x2], $CellContext`x1], "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 23}, "Position" -> 2, 
        "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> -1, 
        "Rule" -> (CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]), "OutputExpression" -> 
        OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
           OverBar[$CellContext`x2], $CellContext`x1]]], {
     "CriticalPairLemma", 38} -> Association["Statement" -> CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x2] == OverBar[
         CirclePlus[
          OverBar[$CellContext`x2], $CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
        "Rule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
        OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 24}, 
        "MatchingOrientation" -> 1, "MatchingRule" -> (OverBar[
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CirclePlus[
           OverBar[$CellContext`x2], $CellContext`x1]), "MatchingSide" -> 
        1]], {"CriticalPairLemma", 39} -> 
    Association["Statement" -> CircleTimes[
         OverBar[$CellContext`x1], 
         OverBar[$CellContext`x2]] == OverBar[
         CirclePlus[$CellContext`x2, $CellContext`x1]], "Proof" -> 
      Association[
       "Construct" -> {"CriticalPairLemma", 38}, "Orientation" -> -1, 
        "Rule" -> (OverBar[
           CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]] -> CircleTimes[
           OverBar[$CellContext`x2], $CellContext`x1]), "Side" -> 1, 
        "Subpattern" -> OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
        "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
     "SubstitutionLemma", 25} -> Association["Statement" -> CircleTimes[
         OverBar[\[FormalB]], 
         OverBar[\[FormalA]]] == OverBar[
         CirclePlus[\[FormalA], \[FormalB]]], "Proof" -> 
      Association[
       "Input" -> {"Hypothesis", 1}, "Position" -> {2, 1}, 
        "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
        "Rule" -> (CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
        "OutputExpression" -> CircleTimes[
           OverBar[\[FormalB]], 
           OverBar[\[FormalA]]] == OverBar[
           CirclePlus[\[FormalA], \[FormalB]]]]], {"Conclusion", 1} -> 
    Association[
     "Statement" -> True, "Proof" -> 
      Association[
       "Input" -> {"SubstitutionLemma", 25}, "Position" -> 1, 
        "Construct" -> {"CriticalPairLemma", 39}, "Orientation" -> 1, 
        "Rule" -> (CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           OverBar[
            Pattern[$CellContext`x2, 
             Blank[]]]] -> OverBar[
           CirclePlus[$CellContext`x2, $CellContext`x1]]), "OutputExpression" -> 
        True]]}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.800933966798647*^9},
 CellLabel->"Out[14]=",ExpressionUUID->"a56f1f45-65d1-4d50-85ad-1f2ce9f4c2e1"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8009338185095263`*^9, 
  3.800933822277443*^9}},ExpressionUUID->"beef4ea5-02ac-48c0-8d70-\
6b8cc5b39b5f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   RowBox[{
    TagBox["ProofObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[
              
              GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
               1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 
               0.}}, {{
                 GrayLevel[0.55], 
                 LineBox[{1, 6}], 
                 LineBox[{2, 5}], 
                 LineBox[{3, 5}], 
                 LineBox[{4, 10}], 
                 LineBox[{5, 6}], 
                 LineBox[{6, 7}], 
                 LineBox[{6, 8}], 
                 LineBox[{7, 9}], 
                 LineBox[{8, 9}], 
                 LineBox[{9, 10}], 
                 LineBox[{3, 7}]}, {
                 PointBox[1], 
                 PointBox[2], 
                 PointBox[3], 
                 PointBox[4], 
                 PointBox[5], 
                 PointBox[6], 
                 PointBox[7], 
                 PointBox[8], 
                 PointBox[9], 
                 PointBox[10]}}], FrameTicks -> None, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
              PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
              Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["72", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    OverscriptBox[
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                    "_"], "\[Equal]", 
                    RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}]}]}], Short[#, 1]& ], 
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[
              
              GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
               1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 
               0.}}, {{
                 GrayLevel[0.55], 
                 LineBox[{1, 6}], 
                 LineBox[{2, 5}], 
                 LineBox[{3, 5}], 
                 LineBox[{4, 10}], 
                 LineBox[{5, 6}], 
                 LineBox[{6, 7}], 
                 LineBox[{6, 8}], 
                 LineBox[{7, 9}], 
                 LineBox[{8, 9}], 
                 LineBox[{9, 10}], 
                 LineBox[{3, 7}]}, {
                 PointBox[1], 
                 PointBox[2], 
                 PointBox[3], 
                 PointBox[4], 
                 PointBox[5], 
                 PointBox[6], 
                 PointBox[7], 
                 PointBox[8], 
                 PointBox[9], 
                 PointBox[10]}}], FrameTicks -> None, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
              PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
              Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["72", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    OverscriptBox[
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                    "_"], "\[Equal]", 
                    RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}]}]}], Short[#, 1]& ], 
                   "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Axioms: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
                    "\[Equal]", 
                    
                    RowBox[{
                    "\[FormalB]", "\[CircleTimes]", "\[FormalA]"}]}]}], "&&", 
                    
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                    "\[Equal]", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}]}]}],
                     "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", 
                    OverscriptBox["\[FormalB]", "_"]}], ")"}]}], "\[Equal]", 
                    "\[FormalA]"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", 
                    RowBox[{"\[FormalB]", "\[CircleTimes]", 
                    OverscriptBox["\[FormalB]", "_"]}]}], "\[Equal]", 
                    "\[FormalA]"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", 
                    "\[FormalC]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalC]"}], 
                    ")"}]}], "\[Equal]", 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
                    "\[CirclePlus]", 
                    
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    "\[FormalC]"}]}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", 
                    "\[FormalC]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", 
                    RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalC]"}]}], 
                    "\[Equal]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                    ")"}], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalC]"}], 
                    ")"}]}]}]}]}], Short[#, 1]& ], "SummaryItem"]}], 
                "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ProofObject["EquationalLogic", 
    ForAll[{\[FormalA], \[FormalB]}, OverBar[
       CirclePlus[\[FormalB], \[FormalA]]] == CircleTimes[
       OverBar[\[FormalB]], 
       OverBar[\[FormalA]]]], 
    And[
     ForAll[{\[FormalA], \[FormalB]}, CircleTimes[\[FormalA], \[FormalB]] == 
      CircleTimes[\[FormalB], \[FormalA]]], 
     ForAll[{\[FormalA], \[FormalB]}, CirclePlus[\[FormalA], \[FormalB]] == 
      CirclePlus[\[FormalB], \[FormalA]]], 
     ForAll[{\[FormalA], \[FormalB]}, CircleTimes[\[FormalA], 
        CirclePlus[\[FormalB], 
         OverBar[\[FormalB]]]] == \[FormalA]], 
     ForAll[{\[FormalA], \[FormalB]}, CirclePlus[\[FormalA], 
        CircleTimes[\[FormalB], 
         OverBar[\[FormalB]]]] == \[FormalA]], 
     ForAll[{\[FormalA], \[FormalB], \[FormalC]}, CircleTimes[\[FormalA], 
        CirclePlus[\[FormalB], \[FormalC]]] == CirclePlus[
        CircleTimes[\[FormalA], \[FormalB]], 
        CircleTimes[\[FormalA], \[FormalC]]]], 
     ForAll[{\[FormalA], \[FormalB], \[FormalC]}, CirclePlus[\[FormalA], 
        CircleTimes[\[FormalB], \[FormalC]]] == CircleTimes[
        CirclePlus[\[FormalA], \[FormalB]], 
        CirclePlus[\[FormalA], \[FormalC]]]]], {{"Axiom", 1} -> 
     Association[
      "Statement" -> $CellContext`x1 == CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> Association[]], {
      "Axiom", 2} -> 
     Association["Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> Association[]], {
      "Axiom", 3} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x2, $CellContext`x1], "Proof" -> 
       Association[]], {"Axiom", 4} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[]], {"Axiom", 5} -> 
     Association["Statement" -> CircleTimes[
          CirclePlus[$CellContext`x1, $CellContext`x2], 
          CirclePlus[$CellContext`x1, $CellContext`x3]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[]], {"Axiom", 6} -> 
     Association[
      "Statement" -> 
       CirclePlus[$CellContext`x1, $CellContext`x2] == 
        CirclePlus[$CellContext`x2, $CellContext`x1], "Proof" -> 
       Association[]], {"Hypothesis", 1} -> 
     Association["Statement" -> CircleTimes[
          OverBar[\[FormalB]], 
          OverBar[\[FormalA]]] == OverBar[
          CirclePlus[\[FormalB], \[FormalA]]], "Proof" -> Association[]], {
      "CriticalPairLemma", 1} -> Association["Statement" -> CircleTimes[
          CirclePlus[$CellContext`x1, 
           OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
       "Proof" -> Association[
        "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, "Rule" -> 
         TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "Side" -> 1, "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 1}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 2} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           OverBar[$CellContext`x1]]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 3} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
          CircleTimes[$CellContext`x2, $CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 4} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x1]]] == 
        CirclePlus[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 1}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 5} -> Association["Statement" -> CirclePlus[
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
       "Proof" -> Association[
        "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, "Rule" -> 
         TwoWayRule[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 2}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 6} -> 
     Association[
      "Statement" -> 
       CirclePlus[$CellContext`x1, $CellContext`x2] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 1}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> $CellContext`x2), "Side" -> 1, "Subpattern" -> 
         CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 5}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "MatchingSide" -> 
         1]], {"CriticalPairLemma", 7} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 5}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> $CellContext`x2), "Side" -> 1, "Subpattern" -> 
         CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 4}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "MatchingSide" -> 
         1]], {"CriticalPairLemma", 8} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          OverBar[
           OverBar[$CellContext`x1]]] == $CellContext`x1, "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 9} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          OverBar[
           OverBar[
            OverBar[$CellContext`x1]]]] == CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 8}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 10} -> Association["Statement" -> CirclePlus[
          OverBar[
           OverBar[$CellContext`x1]], $CellContext`x1] == CirclePlus[
          OverBar[
           OverBar[$CellContext`x1]], 
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 9}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             OverBar[
              OverBar[
               Pattern[$CellContext`x1, 
                Blank[]]]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 1} -> Association["Statement" -> CirclePlus[
          OverBar[
           OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 10}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[
            OverBar[
             OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
            OverBar[$CellContext`x1]]]], {"SubstitutionLemma", 2} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          OverBar[
           OverBar[$CellContext`x1]]] == OverBar[
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 1}, "Position" -> 1, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            OverBar[
             OverBar[$CellContext`x1]]] == OverBar[
            OverBar[$CellContext`x1]]]], {"SubstitutionLemma", 3} -> 
     Association["Statement" -> $CellContext`x1 == OverBar[
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 2}, "Position" -> 1, 
         "Construct" -> {"CriticalPairLemma", 8}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> $CellContext`x1), 
         "OutputExpression" -> $CellContext`x1 == OverBar[
            OverBar[$CellContext`x1]]]], {"CriticalPairLemma", 11} -> 
     Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2] == CircleTimes[
          OverBar[$CellContext`x1], 
          CirclePlus[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 12} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 13} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 14} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CirclePlus[$CellContext`x1, $CellContext`x2]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 11}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "MatchingSide" -> 
         1]], {"SubstitutionLemma", 4} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CirclePlus[$CellContext`x1, $CellContext`x2]] == 
        CirclePlus[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 14}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            CirclePlus[$CellContext`x1, $CellContext`x2]] == 
          CirclePlus[$CellContext`x1, $CellContext`x2]]], {
      "CriticalPairLemma", 15} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]] == CircleTimes[
          CirclePlus[$CellContext`x1, $CellContext`x2], 
          CirclePlus[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 4}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 5} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 15}, "Position" -> 2, 
         "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
          CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]]], {
      "CriticalPairLemma", 16} -> Association["Statement" -> CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], 
          CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 12}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "MatchingSide" -> 
         1]], {"SubstitutionLemma", 6} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], 
          CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 16}, "Position" -> {1, 1}, 
         "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
            OverBar[
             OverBar[$CellContext`x1]], 
            CirclePlus[
             OverBar[$CellContext`x1], $CellContext`x2]]]], {
      "SubstitutionLemma", 7} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 6}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
            OverBar[
             OverBar[$CellContext`x1]], $CellContext`x2]]], {
      "SubstitutionLemma", 8} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 7}, "Position" -> {2, 1}, 
         "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x1, $CellContext`x2]] == 
          CircleTimes[$CellContext`x1, $CellContext`x2]]], {
      "CriticalPairLemma", 17} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
        CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 9} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
        CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 17}, "Position" -> 2, 
         "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CircleTimes[$CellContext`x1, 
            CirclePlus[
             CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
          CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]]], {
      "CriticalPairLemma", 18} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           CircleTimes[$CellContext`x1, $CellContext`x3]]] == CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 10} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
        CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 18}, "Position" -> 2, 
         "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, 
             CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
          CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]]], {
      "CriticalPairLemma", 19} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]] == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 5}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 2}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 11} -> 
     Association["Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 19}, "Position" -> 1, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), 
         "OutputExpression" -> $CellContext`x1 == 
          CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
      "CriticalPairLemma", 20} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]] == CircleTimes[$CellContext`x2, 
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
         CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 5}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> $CellContext`x2), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 21} -> 
     Association["Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
         CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 22} -> 
     Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x2, $CellContext`x1]] == CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x1], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 23} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]] == 
        CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 21}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 12} -> Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x2, $CellContext`x1]] == 
        CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 22}, "Position" -> 2, 
         "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CircleTimes[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CircleTimes[
            OverBar[$CellContext`x1], 
            CircleTimes[$CellContext`x2, $CellContext`x1]] == 
          CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]]], {"CriticalPairLemma", 24} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]]] == CircleTimes[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 12}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "Side" -> 1, "Subpattern" -> 
         CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 13} -> Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
        CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 24}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 20}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]), "OutputExpression" -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], 
            OverBar[
             CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
          CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]]], {"CriticalPairLemma", 25} -> 
     Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          OverBar[$CellContext`x2]] == CirclePlus[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 13}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 14} -> Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          OverBar[$CellContext`x2]] == OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 25}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[
            OverBar[
             CircleTimes[$CellContext`x1, $CellContext`x2]], 
            OverBar[$CellContext`x2]] == OverBar[
            CircleTimes[$CellContext`x1, $CellContext`x2]]]], {
      "CriticalPairLemma", 26} -> Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
        CirclePlus[
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]], 
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 13}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 23}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 15} -> Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
        OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 26}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[
            OverBar[
             CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
          OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]], {
      "SubstitutionLemma", 16} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], 
          OverBar[
           CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 14}, "Position" -> 1, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CirclePlus[
            OverBar[$CellContext`x1], 
            OverBar[
             CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
            CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
      "CriticalPairLemma", 27} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 9}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             CircleTimes[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x2, 
            CirclePlus[$CellContext`x1, $CellContext`x3]]), "MatchingSide" -> 
         1]], {"SubstitutionLemma", 17} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 27}, "Position" -> {1, 2}, 
         "Construct" -> {"CriticalPairLemma", 21}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, $CellContext`x2] == 
          CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             CirclePlus[$CellContext`x1, $CellContext`x3]]]]], {
      "CriticalPairLemma", 28} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[
           CirclePlus[$CellContext`x1, $CellContext`x3], $CellContext`x2]], 
       "Proof" -> Association[
        "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 29} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x3, $CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 30} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[
           CirclePlus[$CellContext`x3, $CellContext`x1], $CellContext`x2]], 
       "Proof" -> Association[
        "Construct" -> {"CriticalPairLemma", 28}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x3]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 31} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x3, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 29}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x3, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x3, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 21}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 32} -> Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 30}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             CirclePlus[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x3]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 18} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 15}, "Position" -> 1, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            OverBar[
             CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]], {
      "CriticalPairLemma", 33} -> Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x3, $CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 31}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x3, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x3, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 19} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x3, $CellContext`x1], $CellContext`x2], 
       "Proof" -> Association[
        "Input" -> {"CriticalPairLemma", 33}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 32}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]), 
         "OutputExpression" -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
          CircleTimes[
            
            CircleTimes[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]]], {"CriticalPairLemma", 34} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 19}, "Orientation" -> {-1, 1}, 
         "Rule" -> TwoWayRule[
           CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]], 
           CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x3, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]], "Side" -> 1, "Subpattern" -> CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 20} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[
            CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
        CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 13}, "Position" -> 1, 
         "Construct" -> {"CriticalPairLemma", 34}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]] -> CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             OverBar[
              CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
          CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]]], {"CriticalPairLemma", 35} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 20}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              CircleTimes[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]]]] -> CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 21} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]] == $CellContext`x1,
        "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 35}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             OverBar[
              CircleTimes[
               
               OverBar[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1]], {"CriticalPairLemma", 36} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x2], $CellContext`x1]]]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 10}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CircleTimes[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"SubstitutionLemma", 21}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              CircleTimes[
               OverBar[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                Blank[]]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 22} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 36}, "Position" -> {1, 2}, 
         "Construct" -> {"SubstitutionLemma", 18}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             CircleTimes[
              OverBar[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            OverBar[
             CircleTimes[
              OverBar[$CellContext`x2], $CellContext`x1]]] == 
          CircleTimes[$CellContext`x1, $CellContext`x2]]], {
      "CriticalPairLemma", 37} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]]] == CirclePlus[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 22}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             CircleTimes[
              OverBar[
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 23} -> 
     Association["Statement" -> OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
          OverBar[$CellContext`x2], 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 37}, "Position" -> 1, 
         "Construct" -> {"SubstitutionLemma", 16}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            OverBar[
             CircleTimes[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> OverBar[
            CircleTimes[$CellContext`x2, $CellContext`x1]]), 
         "OutputExpression" -> OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
            OverBar[$CellContext`x2], 
            CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
      "SubstitutionLemma", 24} -> Association["Statement" -> OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
          OverBar[$CellContext`x2], $CellContext`x1], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 23}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "OutputExpression" -> 
         OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
            OverBar[$CellContext`x2], $CellContext`x1]]], {
      "CriticalPairLemma", 38} -> Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2] == OverBar[
          CirclePlus[
           OverBar[$CellContext`x2], $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
         OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 24}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (OverBar[
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x2], $CellContext`x1]), "MatchingSide" -> 
         1]], {"CriticalPairLemma", 39} -> 
     Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], 
          OverBar[$CellContext`x2]] == OverBar[
          CirclePlus[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 38}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]), "Side" -> 1, 
         "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 25} -> Association["Statement" -> CircleTimes[
          OverBar[\[FormalB]], 
          OverBar[\[FormalA]]] == OverBar[
          CirclePlus[\[FormalA], \[FormalB]]], "Proof" -> 
       Association[
        "Input" -> {"Hypothesis", 1}, "Position" -> {2, 1}, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CircleTimes[
            OverBar[\[FormalB]], 
            OverBar[\[FormalA]]] == OverBar[
            CirclePlus[\[FormalA], \[FormalB]]]]], {"Conclusion", 1} -> 
     Association[
      "Statement" -> True, "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 25}, "Position" -> 1, 
         "Construct" -> {"CriticalPairLemma", 39}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]] -> OverBar[
            CirclePlus[$CellContext`x2, $CellContext`x1]]), 
         "OutputExpression" -> True]]}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "[", "\"\<ProofGraph\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.800933975664976*^9, 3.800933980351995*^9}},
 CellLabel->"In[15]:=",ExpressionUUID->"59fe1872-6eff-4d82-83f7-eba4600895c0"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{
      "Axiom 1", "Axiom 2", "Axiom 3", "Axiom 4", "Axiom 5", "Axiom 6", 
       "Hypothesis 1", "Critical Pair Lemma 1", "Critical Pair Lemma 2", 
       "Critical Pair Lemma 3", "Critical Pair Lemma 4", 
       "Critical Pair Lemma 5", "Critical Pair Lemma 6", 
       "Critical Pair Lemma 7", "Critical Pair Lemma 8", 
       "Critical Pair Lemma 9", "Critical Pair Lemma 10", 
       "Substitution Lemma 1", "Substitution Lemma 2", "Substitution Lemma 3",
        "Critical Pair Lemma 11", "Critical Pair Lemma 12", 
       "Critical Pair Lemma 13", "Critical Pair Lemma 14", 
       "Substitution Lemma 4", "Critical Pair Lemma 15", 
       "Substitution Lemma 5", "Critical Pair Lemma 16", 
       "Substitution Lemma 6", "Substitution Lemma 7", "Substitution Lemma 8",
        "Critical Pair Lemma 17", "Substitution Lemma 9", 
       "Critical Pair Lemma 18", "Substitution Lemma 10", 
       "Critical Pair Lemma 19", "Substitution Lemma 11", 
       "Critical Pair Lemma 20", "Critical Pair Lemma 21", 
       "Critical Pair Lemma 22", "Critical Pair Lemma 23", 
       "Substitution Lemma 12", "Critical Pair Lemma 24", 
       "Substitution Lemma 13", "Critical Pair Lemma 25", 
       "Substitution Lemma 14", "Critical Pair Lemma 26", 
       "Substitution Lemma 15", "Substitution Lemma 16", 
       "Critical Pair Lemma 27", "Substitution Lemma 17", 
       "Critical Pair Lemma 28", "Critical Pair Lemma 29", 
       "Critical Pair Lemma 30", "Critical Pair Lemma 31", 
       "Critical Pair Lemma 32", "Substitution Lemma 18", 
       "Critical Pair Lemma 33", "Substitution Lemma 19", 
       "Critical Pair Lemma 34", "Substitution Lemma 20", 
       "Critical Pair Lemma 35", "Substitution Lemma 21", 
       "Critical Pair Lemma 36", "Substitution Lemma 22", 
       "Critical Pair Lemma 37", "Substitution Lemma 23", 
       "Substitution Lemma 24", "Critical Pair Lemma 38", 
       "Critical Pair Lemma 39", "Substitution Lemma 25", "Conclusion 1"}, {{{
       3, 8}, {1, 8}, {4, 9}, {2, 9}, {4, 10}, {3, 10}, {5, 11}, {1, 11}, {6, 
       12}, {2, 12}, {8, 13}, {5, 13}, {12, 14}, {4, 14}, {13, 15}, {2, 15}, {
       14, 16}, {15, 16}, {11, 17}, {16, 17}, {17, 18}, {2, 18}, {18, 19}, {6,
        19}, {19, 20}, {15, 20}, {14, 21}, {20, 21}, {13, 22}, {20, 22}, {11, 
       23}, {20, 23}, {13, 24}, {21, 24}, {24, 25}, {13, 25}, {5, 26}, {25, 
       26}, {26, 27}, {5, 27}, {21, 28}, {22, 28}, {28, 29}, {20, 29}, {29, 
       30}, {21, 30}, {30, 31}, {20, 31}, {4, 32}, {31, 32}, {32, 33}, {4, 
       33}, {4, 34}, {31, 34}, {34, 35}, {4, 35}, {27, 36}, {9, 36}, {36, 
       37}, {2, 37}, {37, 38}, {12, 38}, {37, 39}, {3, 39}, {21, 40}, {37, 
       40}, {14, 41}, {39, 41}, {40, 42}, {3, 42}, {42, 43}, {42, 43}, {43, 
       44}, {38, 44}, {23, 45}, {42, 45}, {45, 46}, {2, 46}, {23, 47}, {41, 
       47}, {47, 48}, {2, 48}, {46, 49}, {6, 49}, {33, 50}, {10, 50}, {50, 
       51}, {39, 51}, {51, 52}, {3, 52}, {51, 53}, {6, 53}, {52, 54}, {6, 
       54}, {53, 55}, {39, 55}, {54, 56}, {37, 56}, {48, 57}, {6, 57}, {55, 
       58}, {3, 58}, {58, 59}, {56, 59}, {59, 60}, {3, 60}, {44, 61}, {60, 
       61}, {13, 62}, {61, 62}, {62, 63}, {2, 63}, {35, 64}, {63, 64}, {64, 
       65}, {57, 65}, {22, 66}, {65, 66}, {66, 67}, {49, 67}, {67, 68}, {22, 
       68}, {20, 69}, {68, 69}, {69, 70}, {20, 70}, {7, 71}, {6, 71}, {71, 
       72}, {70, 72}}, Null}, {
      AnnotationRules -> {
        "Substitution Lemma 4" -> {
          Tooltip -> Column[{
             "Substitution Lemma 4", CirclePlus[$CellContext`x1, 
                CirclePlus[$CellContext`x1, $CellContext`x2]] == 
              CirclePlus[$CellContext`x1, $CellContext`x2]}]}, 
         "Substitution Lemma 24" -> {
          Tooltip -> Column[{"Substitution Lemma 24", OverBar[
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
                OverBar[$CellContext`x2], $CellContext`x1]}]}, 
         "Axiom 3" -> {
          Tooltip -> Column[{
             "Axiom 3", CircleTimes[$CellContext`x1, $CellContext`x2] == 
              CircleTimes[$CellContext`x2, $CellContext`x1]}]}, 
         "Critical Pair Lemma 11" -> {
          Tooltip -> Column[{"Critical Pair Lemma 11", CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x2] == CircleTimes[
                OverBar[$CellContext`x1], 
                CirclePlus[$CellContext`x1, $CellContext`x2]]}]}, 
         "Substitution Lemma 18" -> {
          Tooltip -> Column[{
             "Substitution Lemma 18", CirclePlus[$CellContext`x1, 
                OverBar[
                 CircleTimes[
                  OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Critical Pair Lemma 29" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 29", 
              CircleTimes[$CellContext`x1, $CellContext`x2] == 
              CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 CirclePlus[$CellContext`x3, $CellContext`x1]]]}]}, 
         "Critical Pair Lemma 37" -> {
          Tooltip -> Column[{"Critical Pair Lemma 37", CirclePlus[
                OverBar[$CellContext`x1], 
                OverBar[
                 CircleTimes[
                  OverBar[$CellContext`x2], $CellContext`x1]]] == CirclePlus[
                OverBar[$CellContext`x1], 
                CircleTimes[$CellContext`x1, $CellContext`x2]]}]}, 
         "Substitution Lemma 17" -> {
          Tooltip -> Column[{
             "Substitution Lemma 17", 
              CircleTimes[$CellContext`x1, $CellContext`x2] == 
              CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 CirclePlus[$CellContext`x1, $CellContext`x3]]]}]}, 
         "Critical Pair Lemma 21" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 21", $CellContext`x1 == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x1, $CellContext`x2]]}]}, 
         "Substitution Lemma 6" -> {
          Tooltip -> Column[{
             "Substitution Lemma 6", CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x1, $CellContext`x2]] == 
              CircleTimes[
                OverBar[
                 OverBar[$CellContext`x1]], 
                CirclePlus[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Critical Pair Lemma 30" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 30", 
              CircleTimes[$CellContext`x1, $CellContext`x2] == 
              CircleTimes[$CellContext`x1, 
                CircleTimes[
                 
                 CirclePlus[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]]}]}, 
         "Axiom 1" -> {
          Tooltip -> Column[{
             "Axiom 1", $CellContext`x1 == CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, 
                 OverBar[$CellContext`x2]]]}]}, 
         "Substitution Lemma 3" -> {
          Tooltip -> Column[{
             "Substitution Lemma 3", $CellContext`x1 == OverBar[
                OverBar[$CellContext`x1]]}]}, 
         "Substitution Lemma 9" -> {
          Tooltip -> Column[{
             "Substitution Lemma 9", CircleTimes[$CellContext`x1, 
                CirclePlus[
                 
                 CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 15" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 15", CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 CirclePlus[$CellContext`x1, $CellContext`x3]]] == CircleTimes[
                CirclePlus[$CellContext`x1, $CellContext`x2], 
                CirclePlus[$CellContext`x1, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 7" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 7", 
              CircleTimes[$CellContext`x1, $CellContext`x2] == 
              CircleTimes[$CellContext`x1, 
                CirclePlus[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Substitution Lemma 19" -> {
          Tooltip -> Column[{"Substitution Lemma 19", CircleTimes[
                
                CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == CircleTimes[
                
                CircleTimes[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]}]}, 
         "Critical Pair Lemma 14" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 14", CirclePlus[$CellContext`x1, 
                CirclePlus[$CellContext`x1, $CellContext`x2]] == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Critical Pair Lemma 22" -> {
          Tooltip -> Column[{"Critical Pair Lemma 22", CircleTimes[
                OverBar[$CellContext`x1], 
                CircleTimes[$CellContext`x2, $CellContext`x1]] == 
              CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x1]}]}, 
         "Critical Pair Lemma 6" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 6", 
              CirclePlus[$CellContext`x1, $CellContext`x2] == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Critical Pair Lemma 3" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 3", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
                CircleTimes[$CellContext`x2, $CellContext`x1], 
                CircleTimes[$CellContext`x1, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 1" -> {
          Tooltip -> Column[{"Critical Pair Lemma 1", CircleTimes[
                CirclePlus[$CellContext`x1, 
                 
                 OverBar[$CellContext`x1]], $CellContext`x2] == \
$CellContext`x2}]}, 
         "Critical Pair Lemma 16" -> {
          Tooltip -> Column[{"Critical Pair Lemma 16", CircleTimes[
                OverBar[
                 OverBar[$CellContext`x1]], 
                CircleTimes[$CellContext`x1, $CellContext`x2]] == 
              CircleTimes[
                OverBar[
                 OverBar[$CellContext`x1]], 
                CirclePlus[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Critical Pair Lemma 27" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 27", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, 
                 CircleTimes[$CellContext`x2, $CellContext`x3]]] == 
              CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 CirclePlus[$CellContext`x1, $CellContext`x3]]]}]}, 
         "Critical Pair Lemma 26" -> {
          Tooltip -> Column[{"Critical Pair Lemma 26", CirclePlus[
                OverBar[
                 CircleTimes[
                  
                  OverBar[$CellContext`x1], $CellContext`x2]], \
$CellContext`x1] == CirclePlus[
                OverBar[
                 CircleTimes[
                  OverBar[$CellContext`x1], $CellContext`x2]], 
                CircleTimes[$CellContext`x1, 
                 OverBar[$CellContext`x1]]]}]}, 
         "Substitution Lemma 21" -> {
          Tooltip -> Column[{
             "Substitution Lemma 21", CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[
                  CircleTimes[
                   
                   OverBar[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1}]}, 
         "Substitution Lemma 7" -> {
          Tooltip -> Column[{
             "Substitution Lemma 7", CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x1, $CellContext`x2]] == 
              CircleTimes[
                OverBar[
                 OverBar[$CellContext`x1]], $CellContext`x2]}]}, 
         "Substitution Lemma 11" -> {
          Tooltip -> Column[{
             "Substitution Lemma 11", $CellContext`x1 == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, $CellContext`x1]]}]}, 
         "Critical Pair Lemma 5" -> {
          Tooltip -> Column[{"Critical Pair Lemma 5", CirclePlus[
                CircleTimes[$CellContext`x1, 
                 
                 OverBar[$CellContext`x1]], $CellContext`x2] == \
$CellContext`x2}]}, 
         "Critical Pair Lemma 23" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 23", CircleTimes[$CellContext`x1, 
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]] == 
              CircleTimes[$CellContext`x1, 
                OverBar[$CellContext`x1]]}]}, 
         "Substitution Lemma 2" -> {
          Tooltip -> Column[{
             "Substitution Lemma 2", CirclePlus[$CellContext`x1, 
                OverBar[
                 OverBar[$CellContext`x1]]] == OverBar[
                OverBar[$CellContext`x1]]}]}, 
         "Substitution Lemma 13" -> {
          Tooltip -> Column[{"Substitution Lemma 13", CircleTimes[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                OverBar[
                 CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
              CircleTimes[$CellContext`x2, 
                OverBar[$CellContext`x2]]}]}, 
         "Critical Pair Lemma 10" -> {
          Tooltip -> Column[{"Critical Pair Lemma 10", CirclePlus[
                OverBar[
                 OverBar[$CellContext`x1]], $CellContext`x1] == CirclePlus[
                OverBar[
                 OverBar[$CellContext`x1]], 
                CircleTimes[$CellContext`x1, 
                 OverBar[$CellContext`x1]]]}]}, 
         "Axiom 2" -> {
          Tooltip -> Column[{
             "Axiom 2", $CellContext`x1 == CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[$CellContext`x2]]]}]}, 
         "Substitution Lemma 1" -> {
          Tooltip -> Column[{"Substitution Lemma 1", CirclePlus[
                OverBar[
                 OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
                OverBar[$CellContext`x1]]}]}, 
         "Critical Pair Lemma 28" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 28", 
              CircleTimes[$CellContext`x1, $CellContext`x2] == 
              CircleTimes[$CellContext`x1, 
                CircleTimes[
                 
                 CirclePlus[$CellContext`x1, $CellContext`x3], \
$CellContext`x2]]}]}, 
         "Critical Pair Lemma 31" -> {
          Tooltip -> Column[{"Critical Pair Lemma 31", CircleTimes[
                
                CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == CircleTimes[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                CircleTimes[$CellContext`x3, $CellContext`x1]]}]}, 
         "Critical Pair Lemma 17" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 17", CircleTimes[$CellContext`x1, 
                CirclePlus[
                 
                 CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == CirclePlus[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                CircleTimes[$CellContext`x1, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 33" -> {
          Tooltip -> Column[{"Critical Pair Lemma 33", CircleTimes[
                
                CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == CircleTimes[
                CircleTimes[$CellContext`x3, $CellContext`x1], 
                CircleTimes[$CellContext`x1, $CellContext`x2]]}]}, 
         "Substitution Lemma 20" -> {
          Tooltip -> Column[{
             "Substitution Lemma 20", CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[
                  CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
              CircleTimes[$CellContext`x2, 
                OverBar[$CellContext`x2]]}]}, 
         "Critical Pair Lemma 18" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 18", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, 
                 CircleTimes[$CellContext`x1, $CellContext`x3]]] == CirclePlus[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                CircleTimes[$CellContext`x1, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 32" -> {
          Tooltip -> Column[{"Critical Pair Lemma 32", CircleTimes[
                
                CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == CircleTimes[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                CircleTimes[$CellContext`x2, $CellContext`x3]]}]}, 
         "Substitution Lemma 22" -> {
          Tooltip -> Column[{
             "Substitution Lemma 22", CircleTimes[$CellContext`x1, 
                OverBar[
                 CircleTimes[
                  OverBar[$CellContext`x2], $CellContext`x1]]] == 
              CircleTimes[$CellContext`x1, $CellContext`x2]}]}, 
         "Axiom 4" -> {
          Tooltip -> Column[{"Axiom 4", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                CircleTimes[$CellContext`x1, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 19" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 19", CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[$CellContext`x2]]] == CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, $CellContext`x1]]}]}, 
         "Substitution Lemma 5" -> {
          Tooltip -> Column[{
             "Substitution Lemma 5", CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 24" -> {
          Tooltip -> Column[{"Critical Pair Lemma 24", CircleTimes[
                CircleTimes[$CellContext`x1, $CellContext`x2], 
                OverBar[
                 CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
              CircleTimes[
                OverBar[
                 CircleTimes[$CellContext`x1, $CellContext`x2]], 
                CircleTimes[$CellContext`x2, 
                 OverBar[$CellContext`x2]]]}]}, 
         "Critical Pair Lemma 36" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 36", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, 
                 OverBar[
                  CircleTimes[
                   OverBar[$CellContext`x2], $CellContext`x1]]]] == 
              CircleTimes[$CellContext`x1, $CellContext`x2]}]}, 
         "Substitution Lemma 14" -> {
          Tooltip -> Column[{"Substitution Lemma 14", CirclePlus[
                OverBar[
                 CircleTimes[$CellContext`x1, $CellContext`x2]], 
                OverBar[$CellContext`x2]] == OverBar[
                CircleTimes[$CellContext`x1, $CellContext`x2]]}]}, 
         "Critical Pair Lemma 38" -> {
          Tooltip -> Column[{"Critical Pair Lemma 38", CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x2] == OverBar[
                CirclePlus[
                 OverBar[$CellContext`x2], $CellContext`x1]]}]}, 
         "Conclusion 1" -> {Tooltip -> Column[{"Conclusion 1", True}]}, 
         "Substitution Lemma 25" -> {
          Tooltip -> Column[{"Substitution Lemma 25", CircleTimes[
                OverBar[\[FormalB]], 
                OverBar[\[FormalA]]] == OverBar[
                CirclePlus[\[FormalA], \[FormalB]]]}]}, 
         "Critical Pair Lemma 8" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 8", CirclePlus[$CellContext`x1, 
                OverBar[
                 OverBar[$CellContext`x1]]] == $CellContext`x1}]}, 
         "Critical Pair Lemma 20" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 20", CircleTimes[$CellContext`x1, 
                OverBar[$CellContext`x1]] == CircleTimes[$CellContext`x2, 
                CircleTimes[$CellContext`x1, 
                 OverBar[$CellContext`x1]]]}]}, 
         "Axiom 5" -> {Tooltip -> Column[{"Axiom 5", CircleTimes[
                CirclePlus[$CellContext`x1, $CellContext`x2], 
                CirclePlus[$CellContext`x1, $CellContext`x3]] == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 13" -> {
          Tooltip -> Column[{"Critical Pair Lemma 13", CirclePlus[
                OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
                OverBar[$CellContext`x1], 
                CircleTimes[$CellContext`x2, $CellContext`x1]]}]}, 
         "Critical Pair Lemma 35" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 35", CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[
                  CircleTimes[
                   OverBar[$CellContext`x1], $CellContext`x2]]]] == 
              CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[$CellContext`x2]]]}]}, 
         "Critical Pair Lemma 2" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 2", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, 
                 OverBar[$CellContext`x1]]] == 
              CircleTimes[$CellContext`x1, $CellContext`x2]}]}, 
         "Axiom 6" -> {
          Tooltip -> Column[{
             "Axiom 6", CirclePlus[$CellContext`x1, $CellContext`x2] == 
              CirclePlus[$CellContext`x2, $CellContext`x1]}]}, 
         "Substitution Lemma 8" -> {
          Tooltip -> Column[{
             "Substitution Lemma 8", CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x1, $CellContext`x2]] == 
              CircleTimes[$CellContext`x1, $CellContext`x2]}]}, 
         "Critical Pair Lemma 39" -> {
          Tooltip -> Column[{"Critical Pair Lemma 39", CircleTimes[
                OverBar[$CellContext`x1], 
                OverBar[$CellContext`x2]] == OverBar[
                CirclePlus[$CellContext`x2, $CellContext`x1]]}]}, 
         "Critical Pair Lemma 4" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 4", CirclePlus[$CellContext`x1, 
                CircleTimes[$CellContext`x2, 
                 OverBar[$CellContext`x1]]] == 
              CirclePlus[$CellContext`x1, $CellContext`x2]}]}, 
         "Substitution Lemma 16" -> {
          Tooltip -> Column[{"Substitution Lemma 16", CirclePlus[
                OverBar[$CellContext`x1], 
                OverBar[
                 CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
                CircleTimes[$CellContext`x2, $CellContext`x1]]}]}, 
         "Critical Pair Lemma 34" -> {
          Tooltip -> Column[{"Critical Pair Lemma 34", CircleTimes[
                
                CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3] == CircleTimes[$CellContext`x1, 
                CircleTimes[$CellContext`x2, $CellContext`x3]]}]}, 
         "Critical Pair Lemma 9" -> {
          Tooltip -> Column[{
             "Critical Pair Lemma 9", CircleTimes[$CellContext`x1, 
                OverBar[
                 OverBar[
                  OverBar[$CellContext`x1]]]] == 
              CircleTimes[$CellContext`x1, 
                OverBar[$CellContext`x1]]}]}, 
         "Critical Pair Lemma 25" -> {
          Tooltip -> Column[{"Critical Pair Lemma 25", CirclePlus[
                OverBar[
                 CircleTimes[$CellContext`x1, $CellContext`x2]], 
                OverBar[$CellContext`x2]] == CirclePlus[
                OverBar[
                 CircleTimes[$CellContext`x1, $CellContext`x2]], 
                CircleTimes[$CellContext`x2, 
                 OverBar[$CellContext`x2]]]}]}, 
         "Substitution Lemma 12" -> {
          Tooltip -> Column[{"Substitution Lemma 12", CircleTimes[
                OverBar[$CellContext`x1], 
                CircleTimes[$CellContext`x2, $CellContext`x1]] == 
              CircleTimes[$CellContext`x1, 
                OverBar[$CellContext`x1]]}]}, 
         "Hypothesis 1" -> {Tooltip -> Column[{"Hypothesis 1", CircleTimes[
                OverBar[\[FormalB]], 
                OverBar[\[FormalA]]] == OverBar[
                CirclePlus[\[FormalB], \[FormalA]]]}]}, 
         "Substitution Lemma 10" -> {
          Tooltip -> Column[{
             "Substitution Lemma 10", CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, 
                 CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
              CircleTimes[$CellContext`x1, 
                CirclePlus[$CellContext`x2, $CellContext`x3]]}]}, 
         "Substitution Lemma 15" -> {
          Tooltip -> Column[{"Substitution Lemma 15", CirclePlus[
                OverBar[
                 CircleTimes[
                  
                  OverBar[$CellContext`x1], $CellContext`x2]], \
$CellContext`x1] == OverBar[
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]]}]}, 
         "Substitution Lemma 23" -> {
          Tooltip -> Column[{"Substitution Lemma 23", OverBar[
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
                OverBar[$CellContext`x2], 
                CircleTimes[$CellContext`x2, $CellContext`x1]]}]}, 
         "Critical Pair Lemma 12" -> {
          Tooltip -> Column[{"Critical Pair Lemma 12", CirclePlus[
                OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
                OverBar[$CellContext`x1], 
                CircleTimes[$CellContext`x1, $CellContext`x2]]}]}}, 
       EdgeStyle -> {
        DirectedEdge["Substitution Lemma 2", "Substitution Lemma 3"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 11", "Critical Pair Lemma 14"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 15", "Substitution Lemma 18"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 1", "Substitution Lemma 2"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 4", "Critical Pair Lemma 7"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Critical Pair Lemma 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 4", "Critical Pair Lemma 10"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 32", "Substitution Lemma 19"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 37", "Substitution Lemma 23"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 28", "Critical Pair Lemma 30"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 11", "Critical Pair Lemma 22"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 20"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 3", "Substitution Lemma 8"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 5", "Critical Pair Lemma 19"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 6", "Substitution Lemma 4"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 22"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Substitution Lemma 10"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Critical Pair Lemma 28"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 13", "Critical Pair Lemma 26"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 39"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 3", "Critical Pair Lemma 27"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Substitution Lemma 14"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 21", "Critical Pair Lemma 31"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 9"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 17", "Critical Pair Lemma 28"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 21", "Critical Pair Lemma 23"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 23"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 6", "Critical Pair Lemma 14"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 29", "Critical Pair Lemma 31"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 16", "Substitution Lemma 23"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 7", "Critical Pair Lemma 11"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Hypothesis 1", "Substitution Lemma 25"] -> RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 9", "Critical Pair Lemma 27"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 24", "Substitution Lemma 13"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 2", "Critical Pair Lemma 19"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 13", "Substitution Lemma 20"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 3", "Substitution Lemma 6"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 19", "Substitution Lemma 11"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 6", "Substitution Lemma 16"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 15", "Substitution Lemma 5"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 10", "Substitution Lemma 1"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 21"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Critical Pair Lemma 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Critical Pair Lemma 29"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 20", "Critical Pair Lemma 35"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 22", "Substitution Lemma 12"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 9", "Critical Pair Lemma 10"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 8", "Critical Pair Lemma 9"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Substitution Lemma 11"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 25", "Conclusion 1"] -> RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 26", "Substitution Lemma 15"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 12", "Critical Pair Lemma 16"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 22", "Critical Pair Lemma 37"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 4", "Critical Pair Lemma 13"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 8", "Critical Pair Lemma 18"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 12"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Critical Pair Lemma 34"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 13", "Critical Pair Lemma 25"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Critical Pair Lemma 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 6", "Critical Pair Lemma 35"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 17", "Critical Pair Lemma 29"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 33", "Substitution Lemma 19"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 36", "Substitution Lemma 22"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 3", "Substitution Lemma 12"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Critical Pair Lemma 4"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 16", "Substitution Lemma 6"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 5", "Critical Pair Lemma 7"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 12", "Critical Pair Lemma 37"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 30", "Critical Pair Lemma 32"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 11", "Critical Pair Lemma 32"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Substitution Lemma 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 27", "Substitution Lemma 17"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 4", "Critical Pair Lemma 15"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 5", "Critical Pair Lemma 20"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 38", "Critical Pair Lemma 39"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 12", "Critical Pair Lemma 24"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Critical Pair Lemma 18"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 12", "Substitution Lemma 24"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 18", "Substitution Lemma 10"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 38"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Critical Pair Lemma 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Critical Pair Lemma 17"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Critical Pair Lemma 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 14", "Substitution Lemma 16"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 6", "Critical Pair Lemma 12"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Critical Pair Lemma 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 8", "Substitution Lemma 3"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 11"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 6", "Critical Pair Lemma 8"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Substitution Lemma 25"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Substitution Lemma 21"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 1", "Critical Pair Lemma 6"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 3", "Critical Pair Lemma 13"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 25", "Substitution Lemma 14"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 3", "Critical Pair Lemma 3"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Substitution Lemma 5"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 17", "Substitution Lemma 9"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 6", "Substitution Lemma 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Critical Pair Lemma 6"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Substitution Lemma 9"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 2", "Substitution Lemma 15"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 4", "Critical Pair Lemma 2"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 6", "Substitution Lemma 7"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 21", "Substitution Lemma 17"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 7", "Substitution Lemma 8"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 39", "Conclusion 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 11", "Substitution Lemma 7"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 1", "Critical Pair Lemma 1"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 19", "Critical Pair Lemma 34"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 18", "Substitution Lemma 22"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 14", "Substitution Lemma 4"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 2", "Critical Pair Lemma 8"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Substitution Lemma 18"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 31", "Critical Pair Lemma 33"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 5", "Critical Pair Lemma 15"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 23", "Substitution Lemma 24"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Critical Pair Lemma 11", "Critical Pair Lemma 16"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 23", "Critical Pair Lemma 26"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 20", "Substitution Lemma 13"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 35", "Substitution Lemma 21"] -> 
         RGBColor[
           Rational[167, 255], 
           Rational[167, 255], 
           Rational[167, 255]], 
         DirectedEdge["Axiom 3", "Critical Pair Lemma 33"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 21", "Critical Pair Lemma 36"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 10", "Critical Pair Lemma 36"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 24", "Critical Pair Lemma 38"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 6", "Critical Pair Lemma 30"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 12", "Critical Pair Lemma 25"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Substitution Lemma 8", "Critical Pair Lemma 17"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Axiom 3", "Critical Pair Lemma 21"] -> Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]], 
         DirectedEdge["Critical Pair Lemma 34", "Substitution Lemma 20"] -> 
         Directive[
           Dashing[{Small, Small}], 
           RGBColor[
            Rational[167, 255], 
            Rational[167, 255], 
            Rational[167, 255]]]}, GraphLayout -> "LayeredDigraphEmbedding", 
       VertexLabels -> {None}, 
       VertexShapeFunction -> {
        "Axiom 6" -> "FiveDown", "Critical Pair Lemma 8" -> "Triangle", 
         "Critical Pair Lemma 18" -> "Triangle", "Critical Pair Lemma 3" -> 
         "Triangle", "Critical Pair Lemma 17" -> "Triangle", 
         "Substitution Lemma 3" -> "Circle", "Critical Pair Lemma 38" -> 
         "Triangle", "Critical Pair Lemma 20" -> "Triangle", 
         "Critical Pair Lemma 19" -> "Triangle", "Critical Pair Lemma 14" -> 
         "Triangle", "Critical Pair Lemma 5" -> "Triangle", 
         "Substitution Lemma 23" -> "Circle", "Critical Pair Lemma 7" -> 
         "Triangle", "Critical Pair Lemma 34" -> "Triangle", 
         "Critical Pair Lemma 16" -> "Triangle", "Substitution Lemma 1" -> 
         "Circle", "Substitution Lemma 10" -> "Circle", 
         "Critical Pair Lemma 22" -> "Triangle", "Substitution Lemma 9" -> 
         "Circle", "Axiom 4" -> "FiveDown", "Substitution Lemma 12" -> 
         "Circle", "Critical Pair Lemma 36" -> "Triangle", 
         "Critical Pair Lemma 21" -> "Triangle", "Substitution Lemma 6" -> 
         "Circle", "Critical Pair Lemma 25" -> "Triangle", 
         "Critical Pair Lemma 35" -> "Triangle", "Critical Pair Lemma 4" -> 
         "Triangle", "Axiom 5" -> "FiveDown", "Critical Pair Lemma 24" -> 
         "Triangle", "Substitution Lemma 19" -> "Circle", 
         "Critical Pair Lemma 31" -> "Triangle", "Critical Pair Lemma 1" -> 
         "Triangle", "Critical Pair Lemma 6" -> "Triangle", "Axiom 2" -> 
         "FiveDown", "Critical Pair Lemma 23" -> "Triangle", 
         "Substitution Lemma 11" -> "Circle", "Substitution Lemma 21" -> 
         "Circle", "Substitution Lemma 22" -> "Circle", "Conclusion 1" -> 
         "Square", "Substitution Lemma 13" -> "Circle", "Axiom 1" -> 
         "FiveDown", "Substitution Lemma 20" -> "Circle", 
         "Critical Pair Lemma 39" -> "Triangle", "Critical Pair Lemma 32" -> 
         "Triangle", "Critical Pair Lemma 27" -> "Triangle", 
         "Critical Pair Lemma 30" -> "Triangle", "Critical Pair Lemma 37" -> 
         "Triangle", "Critical Pair Lemma 29" -> "Triangle", 
         "Substitution Lemma 7" -> "Circle", "Substitution Lemma 16" -> 
         "Circle", "Hypothesis 1" -> "Diamond", "Substitution Lemma 25" -> 
         "Circle", "Critical Pair Lemma 9" -> "Triangle", 
         "Critical Pair Lemma 33" -> "Triangle", "Critical Pair Lemma 26" -> 
         "Triangle", "Critical Pair Lemma 28" -> "Triangle", 
         "Critical Pair Lemma 13" -> "Triangle", "Substitution Lemma 18" -> 
         "Circle", "Substitution Lemma 4" -> "Circle", 
         "Substitution Lemma 17" -> "Circle", "Substitution Lemma 24" -> 
         "Circle", "Substitution Lemma 14" -> "Circle", "Axiom 3" -> 
         "FiveDown", "Critical Pair Lemma 11" -> "Triangle", 
         "Critical Pair Lemma 10" -> "Triangle", "Substitution Lemma 5" -> 
         "Circle", "Critical Pair Lemma 2" -> "Triangle", 
         "Critical Pair Lemma 12" -> "Triangle", "Substitution Lemma 15" -> 
         "Circle", "Substitution Lemma 8" -> "Circle", "Substitution Lemma 2" -> 
         "Circle", "Critical Pair Lemma 15" -> "Triangle"}, 
       VertexSize -> {{"Scaled", 0.01378511301977579}}, 
       VertexStyle -> {"Critical Pair Lemma 8" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 20" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 15" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 1" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 22" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 7" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 39" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 11" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 23" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 3" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 9" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 36" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 38" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 20" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 5" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 19" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 7" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 18" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 10" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 30" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 10" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 1" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 35" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 33" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 32" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Hypothesis 1" -> Directive[
           RGBColor[
            Rational[146, 255], 
            Rational[10, 17], 0], 
           EdgeForm[]], "Axiom 6" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Critical Pair Lemma 16" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 31" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 17" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 14" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 13" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 26" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 13" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 37" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 18" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 14" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 12" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 3" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 9" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 2" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 16" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 24" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 25" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 11" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 24" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 12" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 6" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 1" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 23" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 15" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 5" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 21" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 2" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Substitution Lemma 4" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Substitution Lemma 21" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 25" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 8" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 27" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 6" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 28" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 2" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Conclusion 1" -> Directive[
           RGBColor[
            Rational[13, 15], 
            Rational[1, 15], 0], 
           EdgeForm[]], "Critical Pair Lemma 34" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 22" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Critical Pair Lemma 5" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 4" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Critical Pair Lemma 19" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Axiom 3" -> Directive[
           RGBColor[
            Rational[71, 255], 
            Rational[182, 255], 
            Rational[109, 255]], 
           EdgeForm[]], "Critical Pair Lemma 4" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]], "Substitution Lemma 17" -> Directive[
           RGBColor[
            Rational[15, 17], 
            Rational[52, 85], 
            Rational[12, 85]], 
           EdgeForm[]], "Critical Pair Lemma 29" -> Directive[
           RGBColor[
            Rational[47, 51], 
            Rational[98, 255], 
            Rational[53, 255]], 
           EdgeForm[]]}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.007780874156659061], 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0., 33.}, {-11.926349898835184`, 32.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxVknlI03EAxedVupZYzdJqzblveWA6Tez8/b4vOwyllWGWSzBkWuvWsIuO
RUNNZlh0mqZmWNrUGWZZutTMpqUltRKCDvJI02w2OjZrrfqrB4/3z+Px+eOJ
EneuSbLncDiBNv/J/6QE3hqdJecsr+jow4L5qv3A2eEbB9SKYVqizMpLSQG+
VznFFInM1OrX4KvfBCjTHDLvejvAqRmvM+KB1JMVt8VuXNyR8uq1q4DNk+0v
qQbdIGjzfhC+GOgQ27vUsO4IDFN9ZYKBgV3rBCW/PPHplCT6shDQ/bR7FRMg
xIa3PoadPMAYu0Rq6RdCcrqmPdgF6PWyG8pb4wV3XWvDL0cgIEFInSu94FrX
FF9upViafDCfckXgfjAH7P5CMSfMw3mJXATCWTQi7aH42jFyeGK9CHGO6RoY
KHIkPPsKvjeumbo2rLhPYZXJT7pv9Qa/M5STXEmRkDQj2bycQBbRFXRMQsHJ
i2l5vo1Ao9jiOmEmRfms+dMWniDwScxfGelBIXd6LJ99neChJGUokEshnje+
+Pp9ArWhZ0hnZjGsGzXcfEmwZ7VFau5n0Xwh92dUH0FGUZXbu5csivW9njtG
COr0znN2N7NQR73zn/6DwKOFU6OtZKElWZJYC0HyX7EoYDrYzu+2fe5oaPtq
FnvTcxXhRoI3+wf2qRgWjPWTtrTbxl8dHKIOYDF49RF/7DMCS23nxm4Biwyl
5IysjqAlq80xewIL3nFByJVCgtpZ02ekj2VxqPHUx/dHCF5kt2ieWBl0+eU0
esoIpja0ahVmBsIm9+plQTb++pn+Md8YJOjXulSt80Jhk6E0s53BlLLUAyXX
PFGcH704+iqDiKfKgvWRk6CWXvhcrmJwfozGweg7DvEGza1LSQxWpXeH81zt
wA9RnxVHMkilsT+cMj/Tavnc7EUhtn6cWVgiq6ULtldc7Bcw0B1NU5rSeu6V
RRkb/ccz4JjWD/UpTPf+HZrBb5MhNpk=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAAAOVlXjMm9L8AAAAAAABAQG0u2cTZ
F/m/6Rm7eP3zP0B+tSIbuo7+vxcpA0+35j9AFz2hMGpFAsCDLdiCLdg/QD4+
nEsUhgXAMCc6FGDIP0A2XoJeWwkJwCAWKQNPtz9A/ZxTaT/PDMBQ+qRP+qQ/
QEr9BzbgaxDAwdOt+WGRP0B/u1szb5ESwHOiQwGGfD9AGgmlrEzYFMBmZmZm
ZmY/QCL3f5fTLxfAQbS1n6hPP0CelojpXocZwKsg0SPyOD9Ajee+ou7eG8Cl
q7jyQiI/QO3pIsOCNh7ALVVsDJsLP0DhTlqlDUcgwEQd7HD69D5AhAG6HNxy
IcDqAzggYd4+QOCMsMesniLAHglQGs/HPkD28D2mf8ojwOIsNF9EsT5AxS1i
uFT2JMA0b+TuwJo+QBYtbBFjICbAZy9AWGOEPkDCUrtNNzknwOsY265Qbz5A
yZ5PbdFAKMC+K7XyiFs+QCoRKXAxNynA2mfOIwxJPkDmqUdWVxwqwEbNJkLa
Nz5A/GirH0PwKsAAXL5N8yc+QG5OVMz0sivACBSVRlcZPkA6WkJcbGQswF31
qiwGDD5AYIx1z6kELcAAAAAAAAA+QKu8wPY=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-1.2593263328001854`, 32.}, {1.563784810642062, 31.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwB0QEu/iFib1JlAgAAABwAAAACAAAAAOVlXjMm9L8AAAAAAABAQAxTzmpl
hPS/6Rm7eP3zP0C9sVzJgez0vxcpA0+35j9AEgEReohe9b+DLdiCLdg/QAdB
63x52vW/MCc6FGDIP0CicevRVGD2vyAWKQNPtz9A3pIReRrw9r9Q+qRP+qQ/
QL6kXXLKife/wdOt+WGRP0BAp8+9ZC34v3OiQwGGfD9AZppnW+na+L9mZmZm
ZmY/QHAL7e5ilPm/FBMlkfpPP0Cghycc3Fv6v/abjuk5Oj9A9g4X41Qx+78O
AaNvJCU/QHKhu0PNFPy/WUJiI7oQP0ASPxU+RQb9v9hfzAT7/D5A2Ocj0rwF
/r+NWeET5+k+QMSb5/8zE/+/dC+hUH7XPkBrLbBjVRcAwJHhC7vAxT5AhhJH
lBCsAMDibyFTrrQ+QIpUcpL5qAHAF+QXtN+YPkAL0Y4pTpQCwEI/LOX/fj5A
CoicWQ5uA8BhgV7mDmc+QIV5myI6NgTAbqqutwxRPkB+pYuE0ewEwHK6HFn5
PD5A8gttf9SRBcBpsajK1Co+QOSsPxNDJQbAUo9SDJ8aPkBUiANAHacGwDBU
Gh5YDD5AQJ64BWMXB8AAAAAAAAA+QES2yws=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwBgQN+/CFib1JlAgAAADcAAAACAAAAAOVlXjMm9L8AAAAAAABAQDG4+bUY
2PK/aLEQ2mnzP0Bt9ylI0knxvxKHWdRo5D9AY0XtKcD27r/6gNru/NI/QPxz
vziE2eq/IJ+TKSa/P0Cmesq88Dvmv4XhhITkqD9AY1kOtgUe4b8qSK7/N5A/
QGEgFkmG/9a/DdMPmyB1P0BGfAIhpITFvy+CqVaeVz9A2J8P7Yncoz+QVXsy
sTc/QF0s4KbVvb0/tYS1T70qP0BiVAXR/Q3IP9rimi+iHD9ASNEBui1C0D/8
byvSXw0/QFyANd4BIdQ/HCxnN/b8PkButx1Ve6PXPzgXTl9l6z5AfXa6HprJ
2j9UMeBJrdg+QIi9Cztek90/bXod983EPkBKxgjVYwDgP4TyBWfHrz5Az5ym
Wu8u4z86QJPrwmU+QI6DmEUVHuQ/1iT+ziNPPkAn1F2EqAvlP3R9DqmAOD5A
m472Fqn35T8QSsR52SE+QOiyYv0W4uY/qIofQS4LPkAQQaI38srnP0I/IP9+
9D1AEjm1xTqy6D/aZ8azy909QO6am6fwl+k/bwQSXxTHPUCjZlXdE3zqPwYV
AwFZsD1AzCuumqRa7T9mZmZmZmY9QJzlbYY+Qe4/FjEOkrNPPUAUPr/ifTHv
PwIUM+0dOT1AmxrRV7EV8D8pD9V3pSI9QH5li3Z2l/A/hyL0MUoMPUC1f45N
Dh7xPyFOkBsM9jxAQGna3Hip8T/2kak06988QB4ibyS2OfI/BO4/fefJPEBQ
qkwkxs7yP01iU/UAtDxAgF2kHCX69D9nZmZmZmY8QK4qF7bkgPU/hiIG7UlQ
PECsbrGpyM31P7/ZEll3OzxAeilz99Dg9T8RjIyq7ic8QBZbXJ/9ufU/eTlz
4a8VPECAA22hTln1P/zhxv26BDxAuyKl/cO+9D+WhYf/D/U7QMS4BLRd6vM/
SCS15q7mO0CdxYvEG9zyPxS+T7OX2TtAREk6L/6T8T/3Uldlys07QOyijx8O
4+o/msBbrLasO0D7L6zYgUHjPxU0QHswjjtAanOUE6+G2D9prQTSN3I7QF4A
p8s8osc/kiypsMxYO0DgkWEFapR4P5KxLRfvQTtAkPRKS26Lw79sPJIFny07
QIaBXQP8ptK/G83We9wbO0BsjxLxfEHav6Jj+3mnDDtAAFJi95xK4L8AAAAA
AAA7QLjvnNw=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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

          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
6vjg/lcl+AsK/pZ5
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
chLkq+5Wjt82hH7KTZwe/JgERGu3qxnz1Sjq0abt2etIEOJs8vTp/kGEiX7t
u/IzCQKddgh8uwYQt23BLCqZBHaWa0mRoQNIfWi36oA1CQRtf45z/tyP6hds
DdptRILSqHvh+z370fC5URO2YjG8666Uyl/0oRvKwLSugsXwC9ssi+3fhwq9
zOK0CYshLHh77B3HPrTkiUFO0ObFQPBvmmlv0Ydkb7+NK7j8kF7UZNqHJi6c
Gy1OdQXjKYP5pl97USAz1LUx3BWSt73+N0fRi9oJ93v2CFzhvb3ThXKsF52I
0+TMsnKF1xzzA36/9aKVhdT4190usDVDkh3g24u4mTt/iSt0gYLoo/Sm6b1I
tPYm8kh0gfzrP0wuf96DYh/X/GjlP/a84yxXamgPkssn2KhpLiD+OXZrkHEP
Oo31W6+e5AI3Oitef32gQoqoJ1uFTUQINbUQG25WodYvWw0r84hw5ZHg0w4z
FYpdOdKtOkcEZneADL1RoscRoTaXdxFBcDX81f7jSpS8pfB6tZgIRVVhbXOF
SjR73mDkXxQiSJPWOjqZKRHvttH5yTOJQJCTz6V86Eb6/1Ui/B+aFy6D
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
L34wz2v84M9Z4Yu3zddfWOhg+SLavB/JNY4pNY6+0Jqvx1zOMwUdl6hnCmaY
9/0u55mC5Tf4bM95pqCig3omI6mTeibjrS7qmYwTD6hnMmaZr9cUzjMZra20
Pz5Y9Cf1+OBWI/X4IOY09figPod6vE33T+rxRmE6n7lxr/DGmJV8Duc83vg2
iXq8MXExn7/hPJNQtpB6JiEqgXom4UkC9UxCRzKfOU69F8an8rmH83hh4Qrq
8UKF2cNxQr3wxr/ovLyQuZL2xxP9adTjiczl1OOJN5Lp/niiIY72xwPK+bQ/
HnCbTT0eyI2h8/JA1gzaHw+8jqQedzyLoB53rAmnHnekh1GPOzaEUo8bokKp
xw3jQun+uKEnhHrccCGEetxgCKEeV+wNoR5XfB1CPa7YFELn5YoNIXReLigM
ofNywYsQ2h8XfBdKPS5IC6MeF2wJpx4xbv5ff8RYHkk9YuinU48Y0dF8lnEl
RpJ5HmOr17zsGSZG8rt8zozdb69tccZ08/wWcg12ht1cPtdcLhlYuNMZP8/j
c0HZV9f0qc6QxNL7mTNyF/D5yuDbpc648R6ffeq/FFi/5QyL9/nM/x90xv8A
NHvNRw==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-18.509108050481956`, 33.}, {-11.926349898835184`, 32.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwlkltIk3EYxpcwD+XKVQRuzpw2B6FW+/YdRPx/b0tt1ihTMUxM0+yg0NR0
KJmKVmJGktjw1DpMMRFiLR1SXbzRNAsyE4wlIovU8JDSDL3RlasfPDw3D8/V
T56jT87zEggEis14Wrvy8kdqjQoFHqoBRCmyvbYnKpQYwvXj5QCRud9HJcMq
DI7uKrYVA/SEiTZqXCoUJVZsNecDVDW3mZfkFM529TLt5wAs/Q32zDQKe05S
a6bTAKTOmTXaSGFawi7dMx2Awq+1NGGEwqX64/R7ALgU0y9EsRoLJZPWZQrA
O5gOiD2jxsk1u10eDhBllVPGW2p8Ic05UCUDqO0eSjdb1TguvvenfjeA0B12
4/yUGg9PnKI12wCs/dHWr340/i7pHO3eAnBnxGfai6Zx9q3YXLrMQ5P2bqAz
i8ZSjVu/OsGDPexjctFtGlvytvuODfKwL9veaOujMSlSU+Br4UHadmw5KJXB
KGm4wZbOw5GjMb09ZQwW/mruM8XzIBmYMXo/YDDQNY7MIR46FhOt1BsGlbK5
tsogHoanL24cnGHwfvGIxuDDQ+cjvszty+IF180BmYvA/pDPoR0RLJo6dqyX
TBI4mxu04ZfEIldUIKoYIkDy5T7aqyyyha2LKguBD2onpBlZbP0HAf93gysp
Ayw2ZL52l9cSECv4y9kOFmMjkr1NVwg4TugeX1tl8bkwwyLMIJAd97O9ayeH
zrkv6xYtgafC0PSpCA4/OQYXHrIE+prmHYp4DivHlNfHlASqFxKkFRkcznvm
gQQCAtiQb3oO98zG1Xn5b/4JXm36w/33R0DgL28GBlg=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1mlQVFcaxnFAQYQY0WJfm+UitoT0vi9PqEgAA0IIiqBCCCKjgiJjYxwj
KrsgaquIMsgkUERRBIXBRHRywqC4xMSoDEvAcSkQUNAUTNgUB7v7w/HU6br1
/9L1q/e91dXu8Zs/W2diZGRUMfN5+wwcufT08708YvT27Ab2PY89fELJI50k
+VLVV8CWZPW8Y4Nc4pDQXD6VCoxtWxUZnM8lzQOva6eTADezcxsbHLjkt3DW
s9q1wKCLMqytlEMC/744fH4EsPKK2aya+Ryy6IbDY+cA4OZ1G/P0QT+S0vGy
rEMMfOB9uMr4+AfE+ea5LH8f4K42+9EE25fwTkYUR9sBZTxtknnTEhJ7S2B8
dwGQVlHcOrRsCYmMEyUdtwTCe7XTp3vYZMGaqFt1swHZeM485RY28ckURnIm
1fDt3jpaNYtNmpymLMsH1PA5tKL+6bHF5EGmcVNNuxp+drzgN76LSVFTYPzq
FjVUKaY/DDX7kF+a7xifqVVjOORCZN4qb2L+onggka3GNoc3H9770JsUZLjY
KllqDMQnpu+e6036du2dVWKtRiC7f8nBPoZYD109nz5HjYObs0JMWhlif/Mp
q3tchRaevPs/1QwZtukPu9qvQm/aex3ztAw5cefaR/x2FV7wxvHdToY4TmaO
MC0q9G2etq3YwJAtWrfEsloV2KdKB88oGJI4tMoqI16FnEy/2kEOQ9wcXscd
+FSFIe8fdxR4M2RnXdvsXJEKcdqQkCIXhmyvfzK1jqVCz9VO7xEbhth4LArw
tVAh8acv51yaz5CIV+VPOkeUmMx6NvzYgiEC/9D7KT1KlFil9iTPYUjDCNf+
2TUl/BNG70abMqTdalltaJ0S0Rnbfj09e8ajO0rYGXqicvlk5XIlft+l76In
kpmrRJWhPT3eHiXSDd0YZzlzlQg1dFD56MxVwNfQD3reHgUWGHqrc2uqc6sC
r77Wt1lMnWlMnQL3DL1e51GgzdCTOo8Cf35NexTgveNRIP8djwLThg7WeeQ4
kEF75FDspj1ymO2hPXJYZ9HzkWM6i56PHL9n0x45KnNojxyrc2mPHLPyaI8M
J/Jojwyu+bRHBm0+7ZHh8j7aI4NTAe2RIa+A9shgXKhvL51HhuxC2iODzX7a
I8WF/bRHiugi2iPF/AO0R4qDh2iPFJFael9S2B3W9wGdR4p2Q+s4HlJoj9Ae
KYKP0h4J3hylPRKcL6Y9EsQeoz0S5BynPRK0naDnI8G2MtojwRff0PuSoLSK
9kjgUaPvZTqPGOMNtEcMp3/RHjGKrtMeMQQvaY8Y96fo+YjRb6qh9iXGlvc1
1HzE2GijoTxidDlqqPmIcNlVQ3lEWOiuoTwi9Bha7xGhykVDeUTY56yh5iPC
J4ber/OI8F9D6+cjQqgr7RGhhEV7hGjypD1CNC6iPUIU+tIeIf5U0x4hWEv1
Pa7zCLEhkPYIcS+Ino8QK4NojxCvAzTUvgQg/rRHgAoF7RGgUkB7BEheSHsE
qDfXUPsSgG1M70uAO1P0+yNA1bi+L+o8AlSP0b+HfDwYp98fPvxf0e8PHx3G
tIePnHf2xcft5Tn1X5owRBPTaR8Txsfw/cbYQ1NeJONKrPllOR9Pz865z3vp
RfYUTgjyffi42L7dKvChF9lxvepksy0f8ZEWNr/d8iKbUtcvTTLjo5e5/Oj2
BS+yIle+eMcYDwgq0qiOehGphWfw+AAPaT/uvueR5kVsJl1OPe6Z6f4b1+ya
3Ak/vCAmic9DueP6gKD97uT75/yz0Yt4iLJcjs4v3MnO6o3VFo48lF7a09Aq
cSe79vFWbLfk4S8+b761XuhOrhTm1VZMcfHvz1styRCLyM4nNxYOcnFa3TV8
4xaL/G/s0QZ+BxdOA+JPeWdZZDiu9+djLVzYhz/0nChiEeZ5evcPtVzUVd68
uFrGMsxn5vtW+n6S6sYixc4dlVFhXCSsY7WbmrDIq5+iJRfkXHiUhvwqaHEj
x1cMs9J8uDjIyvhjTYYbSenSri215cI2ps06V+hGvgoJ/INtxkVjcJi0rs+V
NNW+3+k+xkHyixdrO7WuRGjcZ7N7gANFUEO2icyV9H70y3dLezhwjyqrWdLt
Qn5ObS3aepeD/Is1mQtLnMmmj7v+kVDHgd9WC96aZCdisiC12vgQB3Pz6r+3
XO1IitoLzgT9lQPXiVN2rgkOxKqEXamI5mDT1cHQI9n2JPezkCNd/hyMPN++
NoXYkVGz0b95+nFQvzki4Ky1HYn6p2uMnTMH50J2mIXutSXn19zmNr7HwcOc
oZMRc231/w+NOPg/ZmuWow==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1gtQVOcVB3BEQASyCrE8fFAMRHDBfdy77+c/PnjENAhFaeyI0QR8kFGx
qNFYxUcC0YgxYYiJQVhFa40KsQqlRP3UDWAjSI2KUSBSFB1ExIAEFohddm9n
Dt/cnTv/2Z25vznfPWe/qUtXJ6a6uri4nLd/hu+x3f96mLSdYy7DKwt4ljtf
W5bLMcNpLvnaRiC6SHQpsIBjR6ff8ju4FpgZ3rZt80mOmdLaufdWAg9DG99v
ucAxt+Wry7VLAFV+19GYGxzrk6QWeSQD0i2hPiXtHJtY+cOT63OB+ruZxwJG
82ylz+HCg2Zgcsn9D7ZN4dmjVx6fXcEBvn1rP+rQ8izvt8MyRRgQfyj1XnAc
zyLDMrj+SYDNMmVX9gKezct7tGLxy4Do1692TFvKM7d4r4Y0L2CXpenqQDrP
ZiXd2jhuFLDG8iB1TCbPpsZ+WXy604yLvaffjNvEs4bNd1jOHTM2WeZkX9zC
s2PRa2It35tRZCkYt2ab/flHFuoHS8y4/OtwfXiW5lhmuPY5c39xvK043gy9
kPe0anJbNWakC/kVxzIjT8hlb3vbLzPKhPx6YU9cYY8J9UJubhpeJrQKOWNy
tf0y4amQ3f9car9MeN5HPSb0CrnP4THhNyHnOjwmjO135lCHxwT/fuoxIVzI
cx0eIwz91GPEfCGvdXiMWCtkD4fHiOZ+6jHC00brY8RMG/UYscdGPUa02ajH
iIQBZ45zeAz49wD1GJA0SD0GdA5SjwERL5x5mcNjwA0h2xweAzJdKonHAO9R
lcRjQJ6QnR4D/FwryX7psVPITo8eHUJ2evSIHV1JPHrArZLUR499QnbWR48u
N+rRY5E79ejR4E49eqR4UI8O3R7Uo0P+GOrRIdqTenT4zot6dNjpTT06LPCh
Hh1kLzlzmMOjg5+IenQYFFGPFp3jqEeL9vHUY//el3q0SPkd9Wgxz7+S7JcW
PgHOvNfh0WK3kJ39pcV/AqhHi8YA6tHgVAD1aBAdQD0aFPtTjwb7X6YeDZL9
aH00yBlPPRpMF9H90kDnTT0afCfsh7O/1CgZTT1q+L2g77MabSP6S40jbbS/
1JjdQt9nNcRNtL/USLpD548al27T/lJj3W06f1RY9RPtLxW+uUs9Kkh+ph4V
QruoR4XeHtrvKlhGzEMVggdov9ufN0g9KuQNUo8Sn47odyVSRswfJVx7qUeJ
3gfUo4R/C52HSvyjkXqUqLtN66PEuzepR4n11+k8VMCjnnoU8KujHgUOXKUe
BfquUI8Cr12h+6XA/hq6XwoMVdP6KLBKyOUOjwKPq+g85LG+inp4vFRFPTy+
/Z56eJy3Ug+PLCv18JhvpR4eRiv18FBbaX14RFvpfnFYbqUeDget1MOhzUo9
HKZVUQ+H7Cr6/nBoqaIeDvIR9eGwsZp6OJRXU48cndXUI8ekGuqR47Ua6pHj
8xrqkePxQkv7Ufv/v+mnMxUN8XIw3/ndX2/l2cEztbtPaeWY8OTmKPVmnu3s
K21sD5Xjfkeo/7oNPOspTjnxiUgO3tcsS87gWXvFLdvn/TKMWhg+r2kFz5ar
g2pcHsjwh+rGdWOW8Gz1lGkTfqyXIeCtxZab9vPMUPpQs9c5GQITHnqmhfzf
I4Pyab2qwJdn20sXtTbHy8C+yIqIceXZt74Z3A9aGcpe72165xeOdX1c9MfI
MBmCPLnk7haOIagj+oVIhkfX+Lzn9RybvfVvgbk9Urx6aCBvpf28JradinG/
KkXdlo/fSrSf5/jDnRPfLZaiNbWp5cRXHEvZlPbZ8b9KEXq79qPRZo7VXh1e
Euw9lDkpKJxjETlDB6oLJRCX1K26IuJY54X2inN/keDZ0N2sCb1yNjEzb1pJ
rASPcr9OsDXK2cliW8uBYAl8lo5v2XRZzk4kTOnY8XwGFm9QS/P/LmfjPxic
vax2Bu7V+Rre2CtnzSH7O+YcnYFPlxeOKciUswmzuv77+6wZaKp0eVj7VCZ4
orA9P+BYYa2MuYqzC24VReG91ecyq4/LWHKML+vfEIX90b+8MSdbxmrC0hWq
xCi4Ty6TBb0jY0mX8my7pVEoe+oZMsskYy4huX4D46LwzcX2iZcD7b83Jm/e
0R0Ja2j5TO6BlJ2c1KV+9U4kKlhZ2q4vpKy04k9z7l2OBL/whiU3VsquBewr
PlMaiRiRW/nWsRJ2/vwadfDKSCRlznrzXmsUi9F7LImYHonETz5bVtoQyVbt
SZj64xMxohc8c+26L2aSs4nvB/9TDMn1xSGF3mKWc3psmleOGD4uzRfOzZ3O
tny4vj1/kRjNP6e3zD0SwUSSL92tGjGOZIz9MC4wgulOZJTvCxLj7bNlx8uK
w53neRcx/gfhVr5M
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
JbM=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-21.509108050490966`, 31.}, {-14.509108050440943`, 30.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-21.509108050490966`, 31.}, {-24.509108050493865`, 30.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-21.509108050490966`, 31.}, {-7.275855948597467, 30.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1X9M1HUcx/FD4ASRHwJ3cEJwUtmiEXjf7+f7+769Wps/27hV0yE56FLM
rZlYS0paCYIsE6G1tYXiILZkFZItmdyiT9Ty/uqP0EX5Y20YqEnGYIYYEHy/
38a7z76323Pf3fbY+7vv+9aEX3lm1zKXy/X6wmfxu2S2f+y5OsZd1nkC//Ut
X6RmdtLEOqe9j8aW9o2aCDh9uGi4rmjYhOB0ySNaZmV06b7f+sHS/dBMV+lM
lwnRaT70+b0XWk0wp1/tfCqmsXapq6xjQnV6evHnpSa2ON08oixcJnY7/WDB
4jFx1OlzlUkLl4l+p7ecmtp0aiqIKaevXV08Qchzdu/PvVCdeyGIRqfd5b3x
5b1BnJ2nniA8rojV9yxPEEectj1BxMdEiCeIZqdtTxAPL7N7k+UxEHXa9hio
iY0QjwExLkI8Bn5y273b8hhoW263Nd5SAzsSqMeAJ5F6DAwmUo+BqhV2b7Y8
OuZXUI+OliTq0eFdST062pMjZD460lPofHQ0pFCPjskU6tHxfCr16PgmlXo0
+NOoR0NtGvVouJhGPRp+W0U9GtalU4+GhnTq0fCr0w9ZHg2PZ1CPhvoM6lHx
Swb1qCjJpB4VTZnUo+K0h3pUzHvo81IR8tp93PKoaHfa4hSoGPVSj4rCLOpR
8FIW9SjozKIeBcNZ1KNgXzb1KOjOpvNR8Hc29Sgo99HnpeCij3oUhFdHyPsl
w51DPTIGcqhHxrFc6pHRlE89Mp700/nIaPHT5yXjNT+dj4w/86lHxmwenY+E
zgeoR8K1/3kk9PioR8L3adQjYS6ZzkdCyHkfjlkeCecS6HwkFLupR8JALPUw
hGOoh2H1PN0/DDf+ofuHIe8u3T8My6foPmQYn+gnHoYf7/ST+TB8Mk73IUPt
H3Qfinj6Jt2HIrxj1CPi8nXqEdFwlXpE/PBpIC7vEOM7tx/vaQ6JyMz5qOyN
txhn5+WKdw0Rex6bGKs6wPjluoqaskIR0SvymdG9jD/b55657xMRKN57ZvpF
xtu3Fl2vThLRVfDBjRNbGR+oHJIicwIK+rq3D61n/ItL0xM/Two4fbsn/oTI
+IGvTnqitwSo3318824+46tcgx1HRwTsPLJxx6WTIp/t604Z+1pAR/S96vBa
kb/9e31jWZuA8cZ9a9vPC7y1KZQ4clDAhsHJg03bBM46Uj+srxDQ+6Z3/xqX
wF8u/rZYXy+gsHc4Yc+XAS4Ju4YSSwScDWuoqA7w1s/uH7qTK2Dz+3p2nBbg
77Qd1m+vFPCXeaVlW3LA+T8V8C/LCH2G
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1X1QFGUcB3DefAM8kNe7RHxDYhx1YG937/b2bvmKgkCmhlqKL5UDKviG
ySAmSVAGMSOUYaikoIKjlwHxh9ph+oiaM6YmQUYqpsaLKSmJEqFi591N8+OZ
Z2fnO7N795nvs/vs2GXrEpJdnJycsq3Hy3P4c0vHvFyBOdlGJM7snC8dLRRY
ZlJy1d5uBU8Pq+rVewQ2e+6RCcY2Bb+Gt+dkfSOwrRebkpubFCyYfCPz9imB
+V25uXZDvYKssq6DM5oE5rb0AoZXKZieN96z+p7AEjJKrleWKKhtTT8U6Cqy
PnVMpClbwdljrZtzRonMNebqqsYkBZucNnzSKYks5fmMd1fGKqgyJ98KjhNZ
QeydpEc6BYnmUQV5b4rsQlhD48lQ6/Uvdn8UukxkE/b6VV3yU+Bubrn4dJXI
dh860h3somCEuS15SLrIpsTuqqh9YELBi9pZce+L7Pesayz/mgmbzNF5p7eI
zByTFrvvnAk3zHu80nJEVlyZKD+rNqHHuc7aj8iW24YJeS72/G/F7L6K2SaM
dLXnwj/01mlCrSOPH/dymBDvZs9H3/GwThNaHTmu7LF1GpEzyJ5vtrwcRowe
bM/vBZ1fH3TeCObIgxfVDFpUY8QvQ+15hc1jRPowe+6zeYxQuVOPEWXu1GNE
qAf1GHHIkeNtHhljPalHxnZP6pHx1JN6ZExS0X5k5KtoPzLaVNQjY6oX9cjY
5UU9Mh55UY8B8d7UY0C5N/UY0ONNPQYM9qEeAxb4UI8BZh/qMaDPkUNsHgNi
fKnHgO2+1CPhhi/1SAjxox4JqX7UI2GaP/VI+NifrpeEHxy5yOaRMDTAnm2c
cRKiA6jHen8A9ejBAqhHj2cB1KOHGEg9enQFUo8eYWrajx5L1NSjx+dqul56
nFZTj/X3HPk1m0eHIA316BCjoR4d1mqoR4c2DfXo0KWh/ehwWUPXS4csDe1H
h94BHh2i1bQfEUmB1CMiYUA/Irz9qUfERG/qEVEy4HkW8cTx/G+zeUREetB+
RGQMox4RpUOoR0DNgPdd+H+/sHsE7HemHgHlfRbiEZDWa8+9No8AucdCPAL6
uy2kHwHH/7YQj4DUhxayXjz8/rIQD4/j9yzEw2PuXQvx8Ei9RT08lsa5z5es
+6X0WKqcOYdHyKe9X7V/YN2vx9yRcmUeR8u2nlqcKbKF95eGDAmz/t+2b0+U
pomscl5N0nV/HpFvZBUfWC6yNYuv9vW78dB3tsWkJ1q9Lg3t659o0b/kQePw
mSLbPKM8jO/QYvvBHXKaLLKTE6ez6GtaqHy+a/daJTg8WngVHR6UOVVgbQtr
zk2ao4XbZCl7XaDA5GN1dS6yFvfur5jb08mzlVvyY++GasF+FHI963mWUh2w
usVXi4KL+z1qv+RZVPzy0DvOWkQ/qHrYnsqzrlkbN/Z0cegKT5zytcKzjO/j
3n7lNoei4orz/SN41rCjpeX1nzkEawrrbrdqmWsz1/3ZWQ6j8zuU/k1a9tbO
P6+uruQQlaC67B+oZdMuNXWX5nPI2+iSEnaCY2cyHscFr+XQ+c8ZLzGFY83F
sb91z+ewoTGhXgnmWO6rDfuCwGGUe/WHUdcjWP2UwgM7J3HoKG2On1oewUrM
2TdXjOTQmP/TGHlNBHMurUwo8ORw68oXLuFREY7vO4f/AO+xtUg=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1WtQVGUcBvBlRXRZtqzwGiGS4uJEAuc9ezln9/hMI7TmJBcLBDXQAFMb
Es1LUZoi5qAhNo6oqClgajmrk2bKDvVCOpqTTQ1IhBemvEBqoME0yLXl7Pnw
552zs/PMnA+/ed5ndictfi85W6/T6dZ4P4Pf0X1VLW9sErlOPTNwYFHY7o7V
Il+Xle0+2KEgJ3GJaecSkSfMPTHFcVfB9p92vB6VKvLCn+uzG+sVGK/uTbk8
U+TBv97KXVWroDW90Lw4WuT+b12Bya0gbFXyj93jRZ68pvT6kVIFZ0b7Tf3c
T+S94+JnODcoqHhl51xzC+P+8Q3L67IUtD3Rz6q+wviyvlcXveNSUJswqr3I
w3iR66+sf60KbInz4sLdjF8x/1b3fYSCxJ6m2QXljE85GOy+GqwgIGmP3r2H
8X3HTnSE6hVkJJUsLS9h/GXX3spv2pyY11v7SWYR480fNfGtTU50JkW7WgsZ
/yp+hevwRSemJzf+YC9gfNeRdLn3pBPvq/0wnqMeJ45r+UllQndlghPtWi6+
bfM+TsT1+/KL4YPH+76Wz2YavY8TEwd8edYXnd7HgUot37o5eByw6zxqXhly
KS/kkgPNWg6Yf2r4/FMOOIb58hLV40CnlrtVjwNH/D3E48Cc4R7iceChln0e
BwoCfPk11SNj1AgP8cjYPYJ6ZDw7knpkbDJ4SD8yHmnZ14+MBYHUI+NiIPXI
iDRSj4xtRuqR8MBIPRJcQdQjoTyIeiScM1GPhDYT9Ui4b6IeCce0PFn1SIg0
UY+EFUHUY8e6IR47ZgZSjx31Q/qxI2wY9dix1o/elx3Pafe7Q/XY0aHtReWE
2zFmyH7sWK/tzeexYVof3Y8NE7Ts89gwR8s+jw3hA3TPNjwaoHu2YbIf9dhQ
q6f3ZcMFf9qPDdHaPmarHiv0gbQfKyQT7ceK66NoP1bkhNJ+vO+H036siJtC
78uKLVM9pB8ruszUY8WhSHpfFqyPpB4Lis3UY0FDBPVYwF+gHgsuTKD7seDo
WF/+TPVYsCyY9mOB4RnqsWCriXpE3DVQj4iwAOoRIempR0RfJ70vEYbHvtyl
ekRk/lNFPCJ09+l+RLTeo/sR8fydKnJfDKV/0v0wLGim+2FYfpPuh2FhI/Uw
vHk01j90I+MZ6TvcxYkMcWP3pX3wsbeP89aMIgdDlPlxS85axk9vyliXNo0h
sMl68l4u48bvArp7xjM0v5R7sutt7+9zStSdPCPD12G7WvenMB6SWWfx9AvI
/fZ4el0849fqux7/3iHA/MA9fD9jPO3MgdGX7wv4o6bi7/8mMv5lf83hbbcF
GIpdC68dEPits8efaqkWsLdhe97iCIFX3CnYklYmoLBsRcTB87H80aeJhtv5
An650ZG/NTWWXzz0dGlBhoDV+8asnKSL5ZOn10yX4wV8WN84cunpGG4SsusM
0QJuFEnIyIvhG070bGwPEVBWLY/zl2J4ftlm+WGQgHPv3ihJNcVo/6cC/gfu
BHf5
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1WtMFFcYBmCqCKiIgCy3naiIitrY2Lnu7uwuL5S0qDVQRHtBTSVBqEK5
KI0SQSXSesFLMVZqq1IEFEML6lZxUXuKxCu2EttFjRhbFESbWgtFBcSuu/vj
4+RMJu+fmSfvlzMTlpyZkDLMzc1tnf16dZ/1wtqZWCgxN8eKxBSPNed++kZi
Jf0TS+Z0mzGwr6gg3yqxE7V7LY/azahvuhu8/Y7E0rmM1PYWMxbkbSl54imz
2qjSI2+eMePG2cJHh2SZfT6BK7BVmmEsuRR+dLnMHv/47I+WrWZs7FmijqmQ
WYf7G7bwTDPq7kfzp/+UWbb36Y+a48w4m5LrdXaqwrY2l2demWlG0ZWY/l69
wnp9Ls5/NMmMC+vqBv+aozBLwKnllYFmFBbW+5d9qLBzbbmW515mWK4vUnyX
KYxbPjjrwXMTklfuSzdlKezyqYS7WV0mbFqadyxitcLON+c07mo1Ydr+bq9f
8xXmf3BJa3yTCVHTR2YJGxT2gzFwwuFaEyrdG+z9KGyZY5mQM8KZn1fE9VXE
mRDp4czb23X2bYKXpzOHT3q1TLjqyic+Hm3fJuz0cubZB3rs24iEkc58p+3V
MsJ3lDPncBeyuQtGNLuyR1LdiKQ6I8LHOHOqw2OEzZX7HB4jNvhQjxFhY6nH
iPqx1GNEjK8zz3F4VFz0pR4V0X7Uo+K4H/Wo6PWn/ahYOI72o8IyjnpU+AZQ
j4q0AOpRcTqAegzw0VCPAUs01GPAEQ31GLA7kHoMaAukHgMmB1GPARmuPNnh
McASRD0GDARRjx7RwdSjx5Zg6tHjWjD16FEfQj16DITQeekRGerMOxwePfJd
2cGZpIcllHr0eBhKPTqEaqlHh1gt9eiQpaUeHdq11KPDcI72o8N4jnp0EDk6
Lx1iOOrRIc6V5zo8ChI56lGwgKMeBe9x1KNgBkc9CkZztB8FV7V0XgrStbQf
BV1D+lEQM6QfGQUh1CPjqyHzklEcRD0ySsdRj4x4f9qPjKeu87HN4ZGxecj5
kuHhQz0ysrypR8L5UdQjwWMk9UiQPKlHwr9u1CPh6aDVkZ85PBI6B6zEI6Gx
z0r6kVD0zEo89uf3Wsm8RFzrthKPiMQnVuIR0fS3lXhE+HdYiUdEzsKi1Lfs
38uABdweNV5EX829Dp8Cu+/gitfMqoiqrhspJ+3fW7/5iZUZESJWeSffM2Yr
bHGyrfBygIhUzfrkA6n297c8+TpxuIgCd+HunSSF7f6u6uHobgHWm3mL++cp
bH1Lz6p/2gVwu9+/1WNSWNnS27phNgErNBkRm3bILo+AnTvXx7yzQmaBeTM+
mx0vYJB9kp77tsxeKhX5uaqAo1XTDviHySys7PrahxECqqPO3B7fL7G8Y/Ur
D2sEPPgyYsre3yTmnTk/udZdwKd7Uldv/F5itt8Pxr7s4WFIyLe1FUnsVkf1
1NIOHu82pkVWLZaYpjxlYM1NHpWd04+3iRLb7Nl6qeIqj+pf9EV7GkT2bUX2
f6U1PE7WbIqtmSuyQ71iQ8h2Hi0bAl9o7wvsyIuJ2ogcHj3z2ss7vhBY+SlJ
8/MHPML9Huu9RYHtmrGyujOKx6Ir+sbiLp6tjb/Zuncmj7K159S0wzxLej2t
7JaWx+PJxVX7s3jGN0wYfsibR2zTrmGzonnX/53H/1r1uQI=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwBYQKe/SFib1JlAgAAACUAAAACAAAAQKIEddN8LMAAAAAAAABAQOpV07m2
UCvAKxym/OLyP0CjO8JeKdUpwB4yr15N4j9AalPRYysKKMDUQRsmP84/QD2d
AMm87yXATUvqUri2P0AbGVCO3YUjwIxOHOW4mz9ACse/s43MIMCQS7HcQH0/
QAZOn3KahxvAWUKpOVBbP0AUcv89ONcUwOYyBPzmNT9AePQ/k+kPC8A4HcIj
BQ0/QNYtvw3+CgrAbDUQ9QUJP0ArbmyU+A0JwCZSNM7RAj9AdLVHJ9kYCMBk
cy6vaPo+QLIDUcafKwfAI5n+l8rvPkDiWIhxTEYGwGbDpIj34j5ACLXtKN9o
BcAu8iCB79M+QCIYgexXkwTAeCVzgbLCPkAwgkK8tsUDwEddm4lArz5A8OL6
PUV1AMBUSkkIME0+QF7S/VJRzf+/c+oCO7k7PkAIEjBY7b3+v78kwg+jKT5A
3YSMi168/b84+YaG7RY+QNYqE+2kyPy/2WdRn5gDPkD9A8R8wOL7v6lwIVqk
7z1ATBCfOrEK+7+kE/e2ENs9QMRPpCZ3QPq/yVDStd3FPUBowtNAEoT5vxwo
s1YLsD1AM2gtiYLV+L+amZmZmZk9QJf3EY2FMvi/jF28/nmDPUAHJ+LZ2Jj3
vz8sUgaebj1Afvadb3wI97+xBVuwBVs9QPxlRU5wgfa/4unW/LBIPUCFddh1
tAP2v9DYxeufNz1AFiVX5kiP9b9+0id90ic9QLF0wZ8tJPW/6tb8sEgZPUBU
ZBeiYsL0vxbmRIcCDD1AAPRY7edp9L8AAAAAAAA9QNUYFpc=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-14.243800789657257`, 32.}, {-11.926349898835213`, 31.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1XtQFVUcB3ACLw5XRxiHIA3D9JZAu4uhe5+7d7+jJZrgJU1FIFEQSAt5
DYgJGFpSNKFpMGE2kkOQGS8NSwQ9oICSJshDFAV5hIKEjSIqBHW5yx/nzNnZ
+c6ZnfOZ7++PfTUkanWYtZWVVaT5mXjj2JT4xiSGWFkWoPL07rDfx5C+WWcT
xx5LcAr2Zd4+wBBndxvTb70SZno5B8V9x5C9bOsetlXCiz/lbj+cz5CFC/SO
my5JeK3ySWjZrwyZ6zTxgQQkK4XGKob4jeSaRnIlhN/uGu5pYEhlY8HzzV9L
yGxP+eZhJ0Piji19YV+ShPq97Y6PHzEk3LIkuDnt2P2WgiWLmzdu6zFJKOmo
aNPOYklibvyqTp2ErXdPutdzLFnU9PPM91USTC+t26pcxpLNW8ZPr7c335eW
f/jeRpbYro02NIwYUcjmV0TsZMncPKucy71GqKatvZ6eyZLC9UU9aDTiimtJ
q98plpzammSnIUZcL4kN9EnmSPQCz7obPkYkVrb7lmZz5NtS5Z44gxG9s41H
ak5yZIWLqjDS3QjHcweWfXKJI8mBu1bVOBmhONHi03WLI3ycQ2iyjRFnOu2L
Bvo4Ehva/eDgQxFvhgiRR5+Yz5mh+7ZtIj5igtJGxjiSdHVJwM1qEdsQNTZm
7UlWeF+TlMUinHPjrx2f4jnZj4jjeXJ+PlGvSYTquJwzurXmLSL1hJznz5tY
IqoK5Hx60zTzFtFbJOcVR4fMW8DDEjm335lYAu6cknOsS22MS62AolI52wYW
KwKLBbiclXOExSOgrFzOlnGbBHifoz0Cqs7THgFulbRHQEqVnN+xeAw4f4H2
GDB4kfYYML2G9hgQcJnux4DAOrofA/z/oD0GrLtCewzwu0p7DFj+J+3RQ7xG
e/Twqqc9eqgaaI8ebBPt0WNuM+3RY3YL7dHD9YacVRaPHh6ttMd8/03ao4P/
Ldqjw6422qND3m3ao0PWXdqjQ0snPS8d3LrlvN/i0WF/j5wtnHk6KHppjw4Z
92iPFm59tEeLpn7ao8WhAdqjxVePaI8WIUN0P1p4DdMeLf59Ss9Li4rntEeL
xFE5r7R4NPAYoz0atIzTHg2SrBIojwanFQmUR4MO2wSqHw0WTE2g5qVB+uS5
3I8GysnvZY8GedYJVD9qbP6P9qihHaU9ajDDdD9q9HTS/ahRXh3zTGnjSdp8
l3v+Y1JDkRIWx41zxDHt5RAHvRqVynfhOGzOM++O16jUePDh4uDyfo40DWYq
HB3U+PwH+/rXb3PEf46Y8HSUR9aJroNr6jiS832zX8x9Hk7pBflLSjnyS1Rw
Zmozj6li9IyhIxzZdejWUrcLPD646FEbkcqRGXbeQWElPNrqHba4vscR66xe
wTuLxysrw7MH3Tmyc3e/u00yD27RGxHN1hyJq149PzuMx/Qvgq82trNkMMLV
3c6Px+8+Nlf6Kljyd7ifYY3AY2GKU6hzDku2V/21YYcHj8Q52QeDPmNJzMcd
n8bP5pHh8WXAmUiWPMsQy32n84j+caCM3cBO/r94/A8OEhrz
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1QlQE1ccx3FAwXqClqOICCqDVUl2Wzf3JvuzMlYaKlW0olSpWqGKU0Qp
DgawKSqK9SigM2q9KGgVtLYVVIL6dKjHtDoFRC4FVAQLHiiXBoyN2XTm+eZl
Mt/ZSfLJ/2U2YxbHzVrq5ODgkGh9vHlGTv9vK5KDiINtAUV5PhnH84LIxw7h
ScYOAT+6lx25WRlEfri0eOaVJgH/PAm4MX2ohPw9jdlUViEgjvN6NTBUQgZs
PeN7kAhY9eAI916mhOh2WoZPzhdQ41iVsLpBQlZFOS7NyBKQszn3nA8nJTlt
xPNwkoAbyW6uw3dIyXWVdvzGBQIW1I1cFt4hJZ0hibsmCgL2np0RGOzPkFl8
iH8eKyB/WFS2Xs+QuF59/vgxAjJq9X8sS2BIcHqq4nc3AQpfj7T9exlyq6Gx
NPi1DoW3ivu1Eob4O68Ob3ikg/MArSy0iSGBPdx9Y40OI6qub7nnxJLmwsCE
oD91GBQdO+fYCJYsmTLdpeFXHa5GHh10Rs+SInXBq/2f61CR5hwqncuSn8dt
jZBM1eG44/oI/SKWbH4R1T2X0WFOZQDrutz6+rMBVaN9dLhmaSlPimfJB9F1
ZqOL9f1Tr2PLGpZ0WdIWGZ9p4R1emTQ1mSUn0kYP9r2tRXfK65ScdSz5ovNY
z+zLWhyw6D/9xcgSx5kTxk84qcXE6uKW2d+zJNq2tEirEftlbpg5N0yLm7Vi
b7uvtG4tRt0We9zYN0uLeXfELvpysHVrsb1e7JADndbNw9Qgdv2dN4tHfaPY
q0ZdiR91hceLu2K7RJ50jjzJI/qB2DE2D4/lzWKbbR4eC1toD4+pD2kPD49/
aQ+Pant/YvNokNFKezSY1EZ7NChpoz0a6B/T89Gg9DE9Hw2EJ7RHA9MT2qOB
4int0aDoKe1RQ95Oe9Q43U571FA/oz1qtD6nPWrEd9AeNcwdtEeN9E6xA2we
NTy7aI8aR7tojwpCN+1Robqb9qiQ0EN7VEh5SXtU8DfT56XCX/bebvOoYOgV
28YZqwLbR3tUaOujPUqceEV7lEiw0B4lPnpNe5QwO5oojxKXnUzUfJQw9DNR
HiVG9jdR56W03r5MlEcJd2ex9TaPAivtLXoUKLS36FGgyd6iRwEfF9qjgMV+
XZyPAlvsLZ6XAqX2zxfno8CRfrRHAc7+fcT5yLHCgfbI8dlb85HjTi89HzkS
3vr9WK8/GBK823o/+Lqy5VFjmBwOl53mRVvvFyF5uyMqVHLUZf4UWGJgyaBb
hqPaADniQmsL9iSyJC9mW4Ofqxwlz01tjitZ4je/zJxkluHihin3n8WwZM3x
4F59swypzrFZyxeypGDRw8ad5TJ0xSv7YsNZcjGxJH/uBRl2Nbn8NsDjf48M
9RsPtmf1Z8n6+mnfNYbJUFG356a8hSHnr3kcLlPJED3Zh+dLGeL2fkWVKkCG
ZPdLXsqDDEl6merh7SqD27rtMRMNDOnTekfFmTkErk6b9O4chuzqOnSKb+Zw
vn3fkucShoT4e3sayzlU9tS7XnVmiPv51DT+AocVm6ax2bel5MWN8r5vCjgs
7C3OthySkj0kIzkyk8OwlLXp+lgp8WRzjzmt5ZAydMM7BqWULPP1S/9qCYfD
BbVeWwdKSeam3uHGGRy2zTcUGuslJCtepY/QcJjsFXM34rSErKiu/rB1Aofs
e/v2jsiWEJ9zNVflIzmcKvFrOpEgITl+/FDdEA478h4VS+ZJ7P+nHP4DVTyE
aA==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{6.490891949511905, 32.}, {1.563784810642062, 31.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN02tIU2Ecx/GlpeY5m5ZLW225EnRIWmJmnNvzw2ylQdqVKI15aWqYpkUS
0v3iugujstowQYqclJiZ2mXSykiyIkOiMgtDe5FkZm6OytzlxfnzHA7f58V5
Phx45mcXr9vuI5FIMPm43p/D5Fn1YwpXunbxqOxlRWyGArm9X2PUvwicN2XS
DvNs+CTWRST1E1y89Xa49H4Yeuj0L9tfE5w/ro5PuBuKvm09+tNtBIOxI930
6VlQx/BNjTUEprqU7nFOjqqyY88/HCdocETG/emciVVC/XW/PIIIxamhkIQZ
iDnctDp+BcG3sIHgI2MypMLckqUmeLrjb5F+vQx3jrYnr5tNUJRfzpTbpJCv
SWQNMoKBYN3udq0UhdVTTL6+BJG5FsXSXhotZeF5T34LWJKdGfPxBA1HT6Wp
c0BAELX3VuNyGosfbuRCewTc3fbb1BpCIzO6SHvDJiAq84NjeIzCoXnv2/bf
FrDFV/N48xAFvXsEqHw87ahNc9amCQif4ulz/csmlwCdxNMRC1wj4NNElLub
ddTkElDl7dXVoynVozyM3v7U6xoend4uVT4rUT7jAe/3/LY2TNvawKPLR+zh
cc/rG3d7eLyZKvbwUPqJPTyq/DUiD4+k6Z5OcXs4KCmNyMNBI9WIPBxygsQe
DrvDPJ3n9nBoUnja6fZw2DNX7OHQqBR7OBSqxB4O172d6vawyFCJPSwqlWIP
i+S5Yg+LLrn4/7A4SJb9MfRTCI8zzruSzuKhLb9O0TF5vnxleAvH4lhN64vA
CxT2BB3Jb49m0f0uOicjnYI0ItnZOIeFpeDBTpkjECNrzr49T7OgNxR9V58J
xAJjpn2ThIXjEvqMdCBMP5qyA8YYFCbEa/P2TUdWrjG0dohBwULt/KtvAlDy
0zEzepDBYIe8uW3aVHzTVwfZ2hmYDWkbFvETpGCC2E+aGfAp/5w5jJ2Mtr1/
fmA/g7pXCboQ32FiuFxcUaNj0JX43b88tp9EXv23aETLwFI8Hhdy7xV5aa2w
7VrM4NqKPpXVarEe8qeSVCoG4yVr9efM3Va21GCx0wwkI1l2U+pnq+e+M/gP
Nnuqig==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1gtUjPkfx/GUXWFyK5dNl5lnnhY11VxqLs3tI7KERrGxxf4VyT9FtcT6
L3/axEopstpC7qWk1iaXskRbqTCi1KpU/LuoXDLd2GXHzPzP+X3PM2fO+5w5
z3k9v+c3zwwrcINPkLGRkdEl7evTe/Nki4Dz/V/ASDdAk5ShXrrcEknvmQc8
3yoRlaYo8npsiYLc1PyuZ0pkCrPtkoKn4t9WYcHPHigRYebDsDWzQs7MlCze
dSWqbQXhg2VWiLa12l57Rgl1mJe3dYo1Oi4NtjyIU2L1wKnc+G02aBruVMve
oMTBIkHcvC22CGIU+VWplMhp+hAxfTYTP1Sd3FDpqIQi6+jS1BAmusaUL+6i
lLgxYdO3sfuYyLK4GnJmkhLcKbtiu88xca1xU/6QqRKJ1+7er7rFxJSQD9yO
IQWah7zcpj1movSqT3N4pwK2taal79uYKKmKvHXwsQJeqveRnr1MjDv17eNF
JQqEBn0503yIiRzZJNvMXAXapu7l+r5nYo1uFKjOOB015y8m1otsLItUCsTP
1cyd/JGJIMfvzCBRYNKHLRnlJizMnRuEXkp7vnL+Ab9RLFjs0VysZiiQmMEa
eXcCC/e6mUEt/XJEp3kwmNYsRES98LVpkcP99LG0xTNYMLLz3vNTpRzqYs7l
YBEL2waXDFEFcuxe0RqQvoUFpjTfwmuVHDHHjgQz9rJwLvRsL3+hHCOCPRJH
prEQvsQfw0VyjL3c8OTnbBaieqv/LmbKkZYQ6JlfyELBHDOH0FFynO+pfRJQ
yYLQe1S5sUYG90eSxPQ/WegdX/FoV6MMK9zjgsM6WXi5Z4F3X6kMH0SVAZUD
LNgVJMm982SolM8SDrej8NvFfdzsIBkO15vOSuJTWDUwOGa8SgZqfZPTByWF
jNhRXpFiGYLf3x7yXEhh+8rinnssGdbuvHpqsx+F9hjrl1+OloFtdIMTE0yh
7a2NaqtGiiObHyWHb6SwKeePcXcapVC3Dz2R7aSQ8ut4gXmZFDcXORt3xlNY
ZGRSsCxPitbcPc+TCyh0340Z57tGirSGwACz2xQeq6dOSFFJIew1eRF9nwLt
GnG+XixF3ut12/ueUFC/i3lqSUkxsi7VJqiDwp+spdn+o6Vwz0yseKCh4J7V
PvaIxg1+AQujpcPYGJUsNGtodIOPyQOPk2ZscJ/OOjW1zA0OCVMnfm7JRkHc
2Gq/PDfIGEv2yt3Zhv3jhtVbhtE5XmykFnZ7ZqjckNBt6yz3Z8NckaPuFrvh
2trc7J5gNu73ZAwIKTe0def+8vtGNioqGm7sGu0G8+9ZQ7k72TCtmT+jXiPB
TLPhFcUJbMQx+gS8Jgkizi1laNLY8IqoexpfJsHJhVY355xj42uTfs6rPAns
ky9cvFPzf48E0yvexBc+Y6P0sORjvkqCm/eS4pb1snHjQvMJtkSCNycSso8P
o6HK9ve6SElQMKuj5+B4Glvis4YHMCSYlH/Mh0/RkHx9t8S5XwzG21/r/yOg
ccC4JMGmWYw0I+rHcA8aMYcSAh0rxLjV8NJr3DIaY8Y4Ynm+GMuOjui4fJZG
6sBrJ6wQ492j66qtV2iUnFztGzJXjLvZYXV25TQa+65k+gm0zZocfa2GRtvr
HrvxNtrPC68tELfQqD9oci/eVAzfLl9x+gsa15uGjqt7RWhW9Mx+9YbG/gfq
Y/UNIvzM2xY5fUB7PaF7yjJLRfjh9ufFnu9ofLjAnKrIE2Fc/0/a7zttWB8R
cgz97rRKe4jAH9B3wjOx9hAhzdCUbkToMnTBytHaQwTbQX17pmvmpWuEkBq6
qfHTCCEzdKRVWYRVmRC0oT/3z/vMP0+IlQOkRwhrQw/pPEI8MvjidR4hYg3N
1nmE4PaTHiFq+kiPKzb2kR5XMPpIjyuOa0iPK+i3pMcVWb36HtR5XOHQS3pc
kfmGXB9XWL0hPa7Y91rf83UeF/S/Ij0u8HtFelxw5SXpcUFiN+lxQWsXeb9c
wO8i75cLtr0g18cFtzv1fVnncYGJoefpPAKgg/QI8H076RHgQhvpEcDkOekR
gPOM9AiwqJX0CBDWQnoE2NFMro8ACU/J+8VHchPp0XYj6eFjXwPp4cO8nvTw
YVRH7h8+umpJDx81NaSHj6JHpIePUw9JDw+7q0kPDyEPSA8PC9Skh4fTVaSH
h/9WkuvDg28F6eFh+h1y//Dwpoz08HCplPRwsfEP0sMFp4T0cNF0i/RwEfs7
6eHC/jrp4aK8kPRwsfwauT5ctF0hPVysvazvZEXnQUWnM1ov6buo8NM4wydf
37rTJTij8KK+R+tO4Iw1Ofq+W/VpnHApW98a3YZ0Qu85fVt/upwIJ0zJ1LfH
7E/jhBln9b2ueFJo8SQn2J3W9yGdxxGMk6THEQ3p+n6u8zgi9ai+GTqPI5oP
kR4Odr72/l/tIA0v086edSc4cPws2+Qb7fN1982UYaqtHDx/mBzX8JzWPlee
jIhaysHp5WO3BTykYZFx0ahFzMH6dMu69iIaoTVW3fttOJh1pODIhhPa35Md
lhXRphxQi59VDO6gIc7MTr3a7wBGyfHAH/1pXFigXuHS6YCPL1+uGsvTPu/D
9pi/feqAb6wKz/ztQqHIu0MVud8BU9adDa1axUR1WfHtIg8HRBUERAxstYaV
2mJDtbEDouvzzSfHWCIlpMX7t1J7LFbOuTnQOhlfHZ4W+q8ke3S3T9z8y+GJ
sPdtv14baI/5D9niv06YQ5HB/OoLqT2+GxZuwjSegNi9D0dMs7THysh3dcOv
jDP8f7bHPyMf+Es=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1g1QzHkcx/ESXU4NtbXtSl0KaW7t8/PT/7ODo+JWOKQ7ypFzzIgMJh3H
Xagj3K2HO1TUIOShRSZRrpwilTKkPITDcTGZk+Shu+3//9/M12/+Ozvv2dmZ
13y/8//vDp61cOKcXm5ubnmuV897a6B/4uFXYrixB7jF9xPxmeXv/2HQzHdg
pIe9+BGDG3z/MKJpzYgmBg18yyOM/glVDGr5DhX2fIHBJb4nvMm3v8lnUMn3
+cbCrsQtDMr4Ttk70n1tGoMSvpPYw6CG766er9sZDBBxvfGBPuuBnsGPfIex
h8FwMdenEvq5LgbdfEfnvIzKeWlF7yCu79zuOVYYB3G9aNBF12XF3mCu+8Qf
c11WeIZTjxXOIVy/Zj1WxA/jOov1WPE+gutw1mPFjkjqsULyKdcxrMeCUgn1
WDBayvVi1mNBtYxrT9ZjwW9q6rHAS0vnY0GCjnosyNNTjwU1BuqxoNXIdRTr
MeOOiXrMqDRTjxkOC/WYcY3hei7rMWMRuGbXbTejHdRjht1GPWZstlGPGcds
dF8mFNmoxwSHjXpMmGqjHhM8QedjwgaGzseETiv1mPCZlXpMWGahHhOyzNRj
ROYH8zHiGyP1GCExUI8RhR/sywiNinqMyFFQjxGP+X0PYT1G+EipxwhfCfUY
8DqSegw4E0E9BswYSj0GhAZTj+vzgXRfBhj5+20T6zGgSEDvLwMq+lOPAYv7
UY8eJZ7Uo0e2O/XoEfJOQDx6rP1LQDx6XLkvIPPR4+ptAfHosfmmgOxLD+/r
AuLRY1SjgNxfOuiuCohHh8d1AuLRYWId9eiwr556dHjBNzcfHS7yze1Lh0i+
ufno4FdHPTpkXBGQ+WiReZl6tBBWU48Wkj+oRwtnCfVoMaCYzkeLeKeAPA+1
cByl89HizCHq0aJ2P/VoUJ9HPRqU5VCPBrt2Uo8GzRupR4OdGQLyPNRgZjr1
aDB0NZ2PBs/SqEeDE8vpvtRYuYR61IhOph41AhdQjxqpM6hHjZHT6b7U8JhC
96VGcSydjxoJ47kuZj1qdI8VkOehCptHUY8KIlCPCg4T9ahQIqEeFd5GUI8K
z8OoR4WsYOpRuX5/6XxUaPKl+1JiTT/qUeJmb+pRovW9H/EoUfPQj3iUWP3m
YNe4DjHS10QOPm5XYsOYlArpCzFK43Ij/Q1K/F0z/1zsUzH6tl1atSlMiexM
x9OTrWIsMBSEh3srse/7Z2Pir4nxyGYKqOtQoNfRpddtF8RY1mf15F/uKlAU
IN82zylGyI+p9xZWK3DqhHhdQ7YYt85GlM52KhAavyfs66j/PQoE5RZtVcvE
2JE3z+OYXQHv5iR3d3+X/05uUX+DAh1e5+ZUdYpwJMB7SXqYAvWS079nNovg
iD40xtdbgbzRX4jGlorgTFs5wtkhx4JJW5Pcdosw4HD60Pl35ZBMWV7oTBPh
QFO5zFAtx73x3W2J8SKs6CUfF+yUIzWucPrk+4G8R4796Y2iayWBKJg//Mv6
CXJsi+1bu2JDIKK7dwZsschhO/t5asxUV4ec//mARI6CqrzgkUGB2Hd5e6Mw
RI76FK/Ts5qESPQMbWrxlePkubSog1lCpNbG5XZ+JMe0ArcGsVWI9vDRkm/d
5ChROWKPPwrATz6VnUmvZGj6SleVvD4A7c8SQva3y1A5KXLa21Fe2O5360n+
Lhlyy6ZtnzW1jVkxN3f1DbsMDTMDfHy62st+bSt8aP1YhiMxXZKwxZ7lz/f0
FrZcluLE1ZJh383xLV+1Lt/vsEOK9S3/pqyrEJaP3b2x5fhsKaZUxHTLJgWV
j3tQltxmkiIkI/vCUv9PyjPiTA3xA6VIFr77s9BjcDn3/1CK/wBy0UaV
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
+DFg8tEZtzCr43s1Ev8HMLyHPQ==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
pQ==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
KQJcVfORdH//807xP551xR4=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{10.490891949412969`, 2.}, {10.490891949414305`, 1.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-11.926349898835184`, 32.}, {-11.926349898835213`, 31.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxVlX1MVWUcx3nxXkuFdMLlRQ1Eyd1zrk4859y3c49+21AuOOCirRoYIwfE
VmrpinIjSYKMKBiVBAZkg0SF+yIFLVo9FU53eQ2MSJN8Wa+0/lCa2rC655xn
6+nZc3f22b07++z5PZ/d1bv37SiJCAsL2xP6qM+iumfHTi5YT8K0tRnvPgzL
z7MWUlFc4m27qeCKNJqYMmYhZTu7U10/KtjAJR3L91rIwPCFkukLCioFoafh
VQspH5/Ze+BLBd/nLcobLLKQtsIgorwKNld31PwpWMjG8qZLnU0KukbCc9ZG
WgiXuG2LckjBCj7lhGeUJ/UZU09OFit4q9XQePBtnhT+k/F4mVvBPVnJM7Hl
PDFlXSu+YVPQst1fm76LJ7fNX09+9oCC7Pc/ajJu5Ulke4x3JEZBYs5Gw640
nognu2/eH6HAkJs8mb6aJw3u5o4zf7gQ3Vkd/kVM6H0VF8mRiy6InqKG8cU8
Gdz2tPv4WRee9/gPHTDypKUzX573udDXqZ4PT54oVZcLZyj/1ZEb2i4EKb9x
3R7aLtyhvCZFXS7gA537ihaHtgvvUc5qn8tsn5OReELnmcvqktFNef/Kc8+s
PCfj0S6djQV+Q4FfxtwpnTWdUhkDp3W+o/nI2NfN+shY1sP6yGjtYX1kxHtZ
HycqvayPExNe1seJ5T7Wx4kGH+vjRK+P9XFi2sf6ODFPea3m48QqP+vjBPys
jwO7/ayPA9V+1seBLj/r44ApwPo4IAXYeTngoVyv+ThQRlnTSXGgPMD6OPBy
gPWxozbA+thRF2B9/vte97Fjz/987Jg3yklXInjiye8cjPTYQRa+Fl11lyO/
f1zfX+i0o7+3pLVxjiPi4dQt5al2XF40NBT9C0e4vtKC7GV2OKIGmm99y5Hx
h3YuuXrXhuAn0sLsQY6sKZzN2zRrQ+1yOea+Ho6kTmywPPidDZVxQ0Rp5Mg3
/lXHos7bcGSpMdSXmQwb3KG+bHjnc7UvM+Fy1b5scH+l9mUml9arfdlwdEVf
qC8zmTmu9mXDS+fVvswk7bTalw33BtW+zGQqU+3Lik3JNaG+zGRE68uKW0G1
LzOJzVD7sqIgqPZlJj6tLyveTHwudD5mej5WhCforN8fK07F6fy6Ni8r6k06
6/fZiu5YnfV5WbGAsj4vCUdjdNbnJaGYsj4vCU9R1ucloSqW9ZHwA+Xbmo8E
ycT6SKihrN8fCaMm1kfCUuq/XfMRkRPH+og4HMf6iOiNY31EiPGsj4hHKOv3
WcRBynpfIprj2fMR8SHlfs1HxDDlTM1HwLV41kfAjXjWR0BEAusjIIpyS7O6
BMRSrnvs079fqBKQRBmWHca2vQJ4ygGD+gIBaZSv/jo173cLcFAemz47224T
AMovTqyrmFgnYCvl39SfJwjIomz6Kf2ViCUCPJT1/y8B/wJ+x/5v
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1X9M1HUcx/FDFIVTNPQ44OAOjcHcovH93vfX/fjqy7E0izpGVgyGoCN/
wMQfWTtL+SVSm3HOULfSmTqnTUYgmthp8jGZYmZbkaakDOJMSW2sDIXE67jv
/fG+z76323O7776Pe3++37vZy9fmvTNBp9NVBV7j7yW6M3eX1CpMF1zzMBbq
wcQz7rF/VDRFaB0/N9LV/oeKsglab828UZt5Q4USqXVWhn1WSZeKhIlapwZP
UDFlkta5o4ddo4cDHaU1624eWbZTRdJkrd89lB1Rv1mFY4rWK4JLRXG01iPj
p7tUfBCjtWdACRwqPHqtn58zvlTsmqr1qRJ94FDx6TStF3/xKHA4URerde/t
8eXEmulab0i+tD75khM5M7SOKmydVNjqxHCc1iuDHifOz9Q6+HVcTlTPoh4n
rAbqceKmgXqc2Biv9StBjwORRupxoN5IPQ74jdTjwOuJdD4OtCXS+TgQl0Q9
DlQkUY8DnUnU40C8iXrsWGGiHjvaTNRjx4iJeuy4mkw9duhTqMeOl1Oox47a
UKcFPXa0p1CPHYMp1GNDgpl6bHjJTD02VJipxwafmXpsmGyh+2VDRqh3BD02
LAx1kDPHhhIL9djgtlCPAo+FehQctFCPguMW6lHQY6EeBb9b6HwUDIZ5FDyw
0P1ScC/Mo6A/1K8GPTKuh3lkXAzzyGgL88hYGuaRoYTNR8aome6XjCNmOh8Z
spl6ZJwI2y8J8SnUI2F5MvVI2BN2/wQ6gXok7DPS+UjwhJ6XhqBHQlnY8yWB
m0U9EgbiqEdEzXPUIyJmBvWIqIqlHhGmaOoRURT6fXoS9IjYMol6RLgj6XxE
uCKoR0Sk30v2S0DjUy/xCHg24iUeAYsee4lHwLWHXuIRwIae5hXUKGxNr+cH
U66Apf7vdpVVKqzgsvjrObuA44nTmrdtUlhmRmG9K13Ayfm/7W3aoLA7j5/d
vBonoHx95rJbqxVW45j9s00n4JevIseMxYHr/X2+ovEvK4YeF61dmqewtab+
lp7bVnTkOE+3ZCvsXHvl7uk/WuGL3eJedVEOeaxYUrSzIeeYzJz611Jn5loh
nDqafrRBZns2v5i+z25FXSLLdq+T2XveGHdEuhXZH/X4OvJkdq2z35AdZ8UG
/3B0pSCzM3tP+Ev8PGbUGk60GWSWNr9aLHzIwzJd6isallhcy6J27haP/Ufy
d1Zdl9jW+9HbfFd4/Nd94FjXqBjy8PizqaBAf1lk6tcZD7JzeWQOrrw1sEdk
+9M+e7PYwaNje1dWXqnI6k96D53O4HG4cfPbb3Eie1T6SbfLwKNHV5c7NCaw
+2LsvbSJPJZ395pSvxdYWQb65EccVH3DN3d2C2ydbc7Zj+9wWP2lZ+6CZQLz
l5/80HiDw91jA+X8CwIzdAybfVc4HEgv7+jfbWX1FWyj1MTB92/pqFFvZfMW
N+fGNHBoS/gp+dp2nqmub9uK13OI2tGSnpjAs9rqoc+l/MDn83UJvhaOxd5e
GL1jAYec9y8MiW9wrK+Uja3K5OC8+6Q1dgLHRo1F7k4Th1NNB/IrzmaxguHk
TQencjh9Yfz+yQr9v3P4HyimrCY=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-1.275855948580329, 29.}, {-1.509108050491676, 28.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1XtUjGkAx/GZeVEaHZfaUspl7Lwodt+5X/P+CG0uZa1LLruSy8rqhEY2
LUWxKdIqsZViWYXSbEg4u6+y5FIuK1npRivKbWkkyrRjZv94nvO85z3fc97z
Pp/zPO8577CQ8BlLBTweL8ZyfbzzTEHPH4eaOJ51+MB479ofPwnbOC/zMP/M
Nj0+54QONyNecW5ns1M+e6QH31+SPXHiS+6qLLL6TJUevk6PBjkzT7mx3+W5
+5TpQddJdwjzmjlDsOLrkgI9jh12f+1d8IALc/LM9t6jx4EG9e7WjX9zo+IX
1qVv1CPkYeO87OgrXF5Rl/v7xXpYVLX5PedwLdmm2bP89PDUdt6smneO/eyU
vbObSg+tcVgv2dhr7NvU1tUDaT3K3DPYEeOrWOgyVn3lrIchvSa0nqthhcdc
+13l65Elbokdsr2RDWoKmf7DCx3iss7HHfq1iaX/iZasqNGhrTDCZ2N+M2so
CDmRelGHloWC4/n7W1g/1rW6o1CHJL5/xUvHNrZ1Zeygiqk6XCh5NPCdi4kt
2GHvt0KnQ0HK4itv+75hz6xtz1o2Sge/bWV1TzvesPbiyZ6lLjqk/CKYfedW
O5uVSV2OonRIqB0uPZnxlo28J9qX8lILqYpek/BVB7u3Pjer530tEot6u8zo
6mA/HN116e+LWqQGXPfsv/sde2Rsk7uDUYuzio7ctC86Wf2z/NKyJVocvGvk
Ky91slsHz18+N0CL2/P+TKwZ18Vm50cVPVJpMYmT+m4+18VuTrff/+0wLTp7
dHmNkX1gJbV2kgYHLUzeQ8ffz/vAHt+wbulUkwZSeU7Cdg8z275+jk9hnQZF
nlFmJJtZYVVuiV25Bt8/KTjY8cHMPktYfneWUYPYxKZTYxgellmHBkzq9WTz
Mh4MD3ZmHgnUYE/KjIKT2Tysu6Nxaldb3rc5vP/0uzx8N35J5RSRBnGh4nM3
+/Exc2Tfq0eFGjhMNBxVTuFD+qO2t9MbNSZ9sqBh01Y+eixsToyvV0NTUzu3
qIyPK4UDArvL1XiY2u52uZuPTVHcrLjf1DCET7jl1SjAnepXFcXBaijSK5Ye
GUghfndjAz1FjR7Nq2M2T6ZQcr+TH6FQo+Eb+eDitRRWHfGVZQ5R4yLPefyE
DAr55tMROb3VKLnW7+noEgph94MuxLSpUMJ5ua26QaGIpUX6OhX+rF1U4dhI
Idp7aErVJRVqRcU9erVSuJw9ydHfqAIyRpQFPaf+3x8VHmTZ+v2hQMtUYc0+
Wyc3qS1ThVeZthZZhwpf77V1cbDQMi3r77L15ByTf45JCUGSrevrPg4ltJts
vcajfLVHuRLBa23da76x53yjEpUTSY8S75W2fmf1KBE20tY7rB4lRO62Hm71
KOHRh/QoMd9MEx4F6v+lCY8CvzbRhEcBYzVNeBQ4X0ATHgUUB2zdYfUocCKN
JjwKqBNoYn8UuBBNEx4FgsJtPcXqkcMUQnrkSJ9NeuQYN5n0yDFNRHrkGOpC
E+clh9yBJs5LjjizmNgfOfq22fq01SNHzWNb+1s9MjysFRMeGcR/iQmPDLnl
YsIjQ8ZhMeGRYVeWmPDIULpLTHhkoLeRHhm4GDGxPzIkR4qJ85IiLYz0SHF9
CemRAgtIjxTzxpEeKcI0YuL7keJTKemRItab9EixQUx6pBgylPRIsHQQ6ZEg
wJX0SFDrRHokMAhJj+X5ytLl655QWCiKoSsDJahx3bvg9j3L+vfax8ZrJHB9
mrtvZSkFY2JlYdJwCSi/V96+ORTsVVRUk6ME+70NdnMiKHjV78lI6mDwYi/D
5PlQcIlNco5vYvAsmT6sNAtQ6VHfXHGdQabj7FDBKQECTu7sv+wsg/fOXJQw
RICfJ+1PCzzMoCby8fRyEx/VxZkOW3Yw2KPsV7gumY+M0aHRAZEMmJmaNI/P
+WjNtX98LJjBwRshvOJqHs6PXD9t31QGr/O2t/lu4UFU+PtxkZaBR2Nx2CUt
D310tx30oxj4tpbVrX/RzW6sOLuoxY2B3c2BL75c281GLzac8OrDIHZ1eJ8B
Dt2s7f/O4D9E83SK
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.563784810642062, 31.}, {-7.275855948597467, 30.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
/wd4l59P
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-11.926349898835213`, 31.}, {-2.886419338890647, 30.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1H9M1HUcx/EjFAuBEg6870UQ58GxkkMOze/ve12pxMWCSM0CLzMwselN
pGkI6FAnU/xRaXM5FdtFp5Ky2k5Qk/fIk9zCBl7lj/yBbETpopBLIsvgvvzx
ee/92WfP/x77/PFJWeouLH1Ep9Pljp6x+1Zec53zqoV0obHD+M3Pef55FvLN
d8uDgypq50Q3uHakUY4+sHjbbRVTuxy1CcdT6SvVWvLtRRU/La+8d9drpqFL
1flNJ1X4J5+811M9jWID7cnPHVBxs/V+bXC6iSLt/wZKN6hIWyMftviepsv6
DLfkUmFzRx74w5ZEmxYU/u4TVJTHeOK//8JIk8JWFl6eomKKOfV4+utGilzk
+uWHKBXbTshn1sYYqdHcEv71RBXXmn+zn+nk6Pqyys93PFCgS88U/vqYoyNJ
n3Xn/KngoT7Sm7qCo5g8fsudXgWBtevrnTkcRQ9kt60LKNhYsKmvxMrRp5P2
bRxoVzDhUIqvIpmj7r0lF/JPKKC3Fv7zvpGjZaFRED7ef3vyRzz5CuxLtN7Z
y4+ugoo3tZ5mGhsFDS6tfUsmj64C/2Ktcw8Nja6M28Va37g+NjKGi7QuT+xY
ndghI2K8I4qaJxY1y7j0mtbvhDwy2hZqPRLyyKhZwHpkPD6f9chYU8h6ZHgL
tHaGPBK+fJn1SKjPYz0SRCfrkdDnYN9HQqmdfR8JcQrrkTAgsh4JwzzrkWCd
zXpEfDiL9YgwzWQ9InpsrEfER5msR8RuK+sRsTmD9YhYNV1rc8gjwvks6xGR
/AzrEdCfznoEeC2sR0BxGusRMJLCegTs7Vj1dlwCR1sabLbcAgFJp1v233yU
o9aucysrJAF7HmR7bgwaKGwkkeu3CAhuv1X1RMBALk6a6YkXMLfsbOp7TQbq
zkxu804QULun82BUlYHeUC60Bod4HIuO6f/xeQMNOwTz9j4e7YENYQGdgY4q
7v+WX+Hh/9V0J9w3lVbPePfFXZ08sg1Zcz/5LoGysP7+1iYeNbNOdc4IxtP5
V861RO3k0eg4u7kjM56spfPqnyrncURWVriq9FRWGVZ+ahGPurTZNcGrcbTu
g2BZr4PHCw+PUf1LcVR81FSxL4PHtfP7s8wXY0nvr9t95UkeBdURXaeXxtLh
HktbYxSPBtPdg68+Fjv+//D4H7dlADM=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1H9MlHUcB/ATzDKBS6Ig5+W4pPvxPHctHHt+P3zcBJW8FK2ZR7FgAmck
BaE0aqbgGoUBoWkHEUmih8FxEsLdPSy+g0OSo5E1BnctA5ylIyuFjYnc1fHc
tT332efZs/dfz2uf7+f7JOa+tTsvQiaT7Q48y++pHbaqDK8KycRKBZyNbtq+
Qo14odpgnePBfSw2l9erUYE1raX8Jg9OBZpQ56jRex6df/84D4vyJ/2PNKhR
Kbsl5+AgDydeiRu/PqlGxokq98lOHooWnK9eVGiQ9uIDdtLMQ8ufqz8rNGnQ
VPcXl+kKHlTkiiNKhwZVLhSmCCYeljxfxY/JtUhecqBvn4EHC5ftd6Rp0aOL
ZXovw8Mn00TPhXItsrpUGX0aHtqGdKmfW7XId+1duSw+4Lmdaq6e1qK7iYVH
WiN5qHixyHXscQzVdPtPt//NAT9nR+VbMDT+0aZ9T/zCQfLkhprDpRgaOLt6
6LchDl7zteCHvsaQcemod42Ng1LLzSjPOzgqebA1x7SNgw7fCOLqceRLn9l/
j+DA4qPj5B04Mquu/fzdsxzkWVIeNrhwlNYUZ/0hjoMZn9O8MIEj/4X2uacj
OFD6R9wxt3A0stV8rusvFpLa8prq53F0/n0vqvKycMv/cUylD0f16W9vOzvE
wsF/6Q1TETpU02pkljpZ0LUfGmtbqUMF+cvFgieUF8/tDDQLdR3BXHODDDQL
O63B/IxyuVhI6AzmntfXBJqF2VDOaJ7f3jzPwBVbMF//dbkYaL8UzCXrh4vX
DzPQ2BXMq7JsD2XZGBi9HMwiJ5+Bvp5gvi96GDjTK/UwkGWXehhY6ZB6GDjt
kHpoWOuUemgodUo9NPQ7pR4adghSDw3FgtRDw0lB6qHBFsobRQ8NVwSph4ZJ
Qeqh4A9B6qHgH0HqoWBekHoouBPmoeCGID0vCkZDuVb0UNAWyiJHSUFZmIcC
KsxDwp2w+ZBwKmw+JOjD5kPCebvUQ8JgNCPu10vGVlfkLhJiY6rF/Vuy1/Zm
0yTUOYL7ubciKbUsiQT2Mbe4v6ae/CzDWhISYgVxv5Nf3hM17SMgqT+4/7bs
2czkWQJy4xnxfvz+kx7f7CFgbJ1bvD8/XlI0Rn9PwBtX/79fvV+e6SVgU/rV
hQgm8L1uzSm8kQBlx+1dz63C0bczDjRwlIAUf3pC9jiGjn9o2mg0EXCAmjbU
WjA03JzSfy+TAFe2/e7ABxiq1Cd+eoIjYHPRaOR9I4a6krEGFUbATIHi+PM0
hva27/EOriPA8sI3JW8qMFTc2JCZE0VA3VOHA/PBQv9DAv4DPqJkng==
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1H9M1HUcx/GTHwcoNSU90zAVUL63jrqEvve9u+/3yytHjqCAoJWDSWCC
2Ry/lDZANkUNQ5ACD5UJx8FBgDbOoRnN6kMB4mKiJAikdssgT7BB/DBIqbv7
8sfnvfftu+f2/W6Pfb7f3cad6bEpLjKZLMH+c1ytb1mORQwHEplzQpHg8mlo
/oNAskndvP/mlAjzOv+O0n8CiWvBD6LHqIjL1YWKgqUMqZwJTTQNiDAcbWXf
fZEhI0Uv/WLsFCH2NQTIQxgy9npBlUuriNYjydZTkQxpXBv23bVqEX+fvb/H
K4Uhvqsyt8wcE7GwNqg9/iBDwl/1enokU8StBWH0eBVDVOne63K2i3gcUBus
bmXI9eBVs3VhIvwtgRfDuxhiC3jS9YlaxPaa67v7BxiSt7W9dPIFEeUzFVED
fzDkUPGumJUeIgZbDn4UOcEQmeuo52+TAjb3Hr8UMseQ6fo32t65I+BA3Dev
lf3HkMTsw8l7uwQM83Lbh65KsjXTuOQVi4CYkuzeJjclSXWOgJATUs+Zo+fN
0QKWlUp94j5nXwGDi+3v5xgBFZ9L/XXSMvsKCP9C6jeN0/blMb7Y9+46hsfR
MqmzfK9m+l7l4VMutTzB4p5g4VFzUurdTg+PDQap550eHhcMtIdHXAXt4eF2
ivbw6FjsCKdHD8Np2qNH9hnao0dqJe3R49sq+nz09u+DPh89zEbao0deDe3R
QzDRHj3GTLRHh8Ja2qPDs3W0R4dDdbRHhxoz7dFhxkx7dIispz06mBY7wOnR
Ybae9ugQ0UB7tKhpoD1azDTQHi0iv6Q9WiQ10h4tLjfS70uLFU1Slzo9WmQs
tpPjp0VfE+3Rgm2mPRyMzbSHw9JztIdD3jnaw2HqPO3h4PnB0PfjciWJ/8lm
fT+GQ9J+t5JLzyiJYoeJadFzmB+f1bqtUZKy4BJhL8PhVrelc5BRkpvbvlpf
quAw4bFFHSwoSX/Fkt7Vcg5Rzbk5z72nJGf9iyLljzX4q6XIlLNPSTY/2maI
t2lw4/mdjSkGu29Kc37lXQ3S+h4uP/C2iuRfq03/OUgDdfVns4/2qUixd3fc
mJ8Gk+7JT4cMKvKrT9vH9QoNLF6Zm9CqIql3si/Oedqfb2pL29CjIqo9C+oH
cyyYEd1QrlVFXm6LtWbYWPx+ZXpX9ISKpPdk/Vh+m8Vp9Z8rqv9VkbHaxNsx
HSyi4GNNdQkiZl6xvrGFhWzccT5BpPKMY1jcG5G6eMeVhZzDLFZbpQ5Vxcqr
01g0D0t9wd1xwCxO9ktttQ08sYSzGL4hde9g55hRwyK3R+r8vkD7ssjqlvqh
4/Y1LDo6pFaMhhW6eLPIaJda+n9m8T9yPqBb
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
kHL6gX+Rw1Dj/x0G/wNWNOk7
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-7.275855948597467, 30.}, {-3.2758559485823184`, 29.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN02tIFFEYxnEtNMjthrphnAU1ISskyaQzt3rQktaETcWSVFLxRkppRbi5
qa22CmUkFlnZVaMPaoqCEUUcxbxRgSlk3iJSKdDK1MoNo3VnPpyXdxj+Hw78
5sD4pZ6MSV/h4uICx7P8Ti4//Ne8ycBcnLMHs2Vqf/V5nr80p8CstX7rStPT
KQXzNrVLgoasQUMK0rQO3iJ6Jfco6Lmotq/zgAI/rQ/Z60z2OgUnStVmA42L
KZUKmkvUPv0w3NVmUTBlVTvDOQoMWi8uHzcpyLqg9pXP1LEKXhWrvdl/eRQE
a92W7OFYBQ1FahvvzTtWhqz1+NjyyBgpVPsU6c4j3TIuae2e0OyW0Cxj4Lza
mU6PjEKtnZ9jkjFt4T0yfC28R4ZXAe+R0WdWO9LpkRCRz3skWM/yHgklZ3iP
BHsOfz8SGo7z9yOhIIv3SEjL4D0SMtN4jwRbKu8R0Z7Me0RsPMZ7RJQn8R4R
M/G8R0T2Ed4joiWO94jojFU7wOkRcSea94gIM/EeAU1RvEfAhJH3ODqC9wgI
kXmPgL6JF49DfRwe/e2oJpMAOvmjIcvbwCrqM97rBAEW5edqz3UGZgjodS/y
F3BthrXvcjewJ8Udw246AdaFxP43dsKU9pjYBwsU++K6hPFpwl5PmnOjP1KM
6pbs6aOEHf22e6e+lyKSuHqn9xI2NXy5+nsLRUXJu7KRVsLy6vNrx2ooym4d
CN1bQ1jOWHXlWhvFzdHx8FU2wgL/dXTdyKV4abzeGpJH2P01v8PMiRS/PmWX
diYRNugR6t5qpAh7lNr27CBh3X8s6/dTiroqs9FTIsw8+DZlRyCFT2Oz0r+d
sC93t9nzfChqZ1dVzRkI08df/aDTUSClyHhuA9H+d4r/DPDIHQ==
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-2.886419338890647, 30.}, {-3.2758559485823184`, 29.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwBgQN+/CFib1JlAgAAADcAAAACAAAAQJ64BWMXB8AAAAAAAAA+QB/ahhT2
2wbA0xpqeNXzPUC08OyR1ZgGwL4sv00X5j1A/uHqfQFOBsC9Nf9/xdY9QPqt
gNh5+wXA0DUqD+DFPUCsVK6hPqEFwPosQPtmsz1AE9Zz2U8/BcA4G0FEWp89
QCwy0X+t1QTAigAt6rmJPUD8aMaUV2QEwPPcA+2Fcj1Af3pTGE7rA8BwsMVM
vlk9QMDVjgyqkQPAed8P5qRFPUAUceCikEcDwFgQuH47MT1AeExI2wENA8AL
Q74Wghw9QOxnxrX94QLAkHcirngHPUByw1oyhMYCwOmt5EQf8jxACV8FUZW6
AsAY5gTbddw8QLE6xhExvgLAGiCDcHzGPEBqVp10V9ECwPBbXwUzsDxAzcj5
upJTA8BnZmZmZmY8QNBoPgyCdwPATPxKPLhPPEA3URtUY44DwNZAJpYwOTxA
/4GQkjaYA8AGNPhzzyI8QCj7ncf7lAPA2NXA1ZQMPEC0vEPzsoQDwFAmgLuA
9jtAosaBFVxnA8BsJTYlk+A7QPQYWC73PAPALNPiEszKO0Cms8Y9hAUDwJAv
hoQrtTtAlx4fEl3zAcD09kv3CGU7QPH3ulj4pAHAZla84ZBOO0DuKAc+OFcB
wGUbaCsQODtAjrEDwhwKAcDwRU/UhiE7QM+RsOSlvQDABdZx3PQKO0CzyQ2m
03EAwKTLz0Na9DpAOVkbBqYmAMDSJmkKt906QMSAsgk6uP+/iOc9MAvHOkBa
/o5EcST/v8wNTrVWsDpATZViMMVJ/b9mZmZmZmY6QGUsGOCBr/y/9yWLGgVQ
OkC16F3BbQT8v4TnJg9kOjpAPsoz1IhI+78OqzlEgyU6QPzQmRjTe/q/kHDD
uWIROkDy/I+OTJ75vw44xG8C/jlAIE4WNvWv+L+IATxmYus5QITELA/NsPe/
/MwqnYLZOUAhYNMZ1KD2v22akBRjyDlA9CAKVgqA9b/YaW3MA7g5QG8c/Zxs
bvO/85ycDYKbOUC6Gj9TP4Lxv8nctTEEgTlArTeg8QR3779bKbk4img5QIA/
YBtsNOy/pIKmIhRSOUD0TL4jtDzpv6nofe+hPTlACWC6Ct2P5r9oWz+fMys5
QLx4VNDmLeS/4NrqMckaOUAOl4x00RbivxRngKdiDDlAALti95xK4L8AAAAA
AAA5QPbBlkw=
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-3.2758559485823184`, 29.}, {-1.509108050491676, 28.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-1.509108050491676, 28.}, {-0.509108050510406, 27.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-0.509108050510406, 27.}, {-0.5091080505076775, 26.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-0.5091080505076775, 26.}, {-0.5091080505133903, 25.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-0.5091080505133903, 25.}, {-7.017068050765658, 24.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-0.5091080505133903, 25.}, {-4.509108050501396, 24.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1H9M1HUcx/EbloRgQzoZFkeLgO+JOL7f732/9/0G6edV5Ami6NAx6AyV
gBoFCjXAZeJaDd2SdGUYNZRSOjc8kakltE5tgEN+SMcPgeAOvCOnE4lfIj+q
8/v95/Pe57vvnrvbvo99Pt99X8nYm5zlpdFozJ7r6V3TkPH4h01Om0aZ16A5
EXLYfWDQVpyZZa2clNGc2J8W5+qzJW+vCX/dLSO1Yvbd7be6bUdau7LudMmw
HtpfvZLvtOluD+V9dEPGt4tX39RyN20r0luw3CqjKfnL5D/mrtoyC8sHzpbL
OF0+HrAvdL8tcJWJrCuRcdH5U15N768k3NTzgT1TxohYeNBc1UK+Wdy45/14
GfXV7ti3dJ2kJn4kc0KS0XDMfS6vqIu49J323yNkTN2J8Vm7q5fIlVprm1ZG
Rok7raSrj1gsNZMhXjKWfe7+Pqt3gEjx352pG5NwbzSmw/HeIHEd6L92uF/C
ws/uyYdfDBGraV98VaOEhGa3zzHOQU6cfTt24YIEw7nYFU05DpKtjASxRe25
M1s9S8LSLrXL7sqeJaGqSe1QZSR4/aj2ld2+niWBzVZ706mphFNTRuhfUHto
8OkYcd8So3RBcHN+cLMRhYzaS821z5prjRB0MuUxIvRTSeknisfzf7dR6aOK
xwg2Re1XFY8RmztEymNE+zaR8oi40i9QHhHP5AqUx/O7t0B5RAh3ecojYl2p
2rOKR8TNMJ7yiOhu4Kj9EZG+maM8InJ6WKUTFY+AmTSW8gjQ9EZTHgFlW6Ip
j4DsgrWURwDjiqLOS0DPrijqvATkutdQ+yNg7GO1f1E8AtKeVztB8RhQezGS
8hgwkR5JeQzQBUZSHgPadqymPAZ8Frya8hhw/G895TFg5rKe8hhgLdVT+2PA
tZ166rx46EU95eEx6q+nPDzmHzGUh0fF1wzl4TFWzFDvD4/ruxnKw0ObyFAe
Hk6JoTye5zMM5eEwHsRQHg7CcobycJhZQns4tI5HUB4OluBVOe+cd5CONUm3
2G0cTncX1R+PcRLXv/yfAbEctiR1B/kNO0mVQ/uJH8MhZTbstq5lmPi2Tzbq
tBxs9mxn0/QICWnpqDN5cSh1ViR4Z7rIX3bLG6X/sDgfct3XoR0lGx4cLHAM
s+DK+iKSnrtH0vyTN2y1s1gZ7arYsf4+CYwLre9pZJE/b3bXjz0ijoD09XnV
LKoqW1sfnpwgAfM+3nuOsNg412YeWDJNaufDtRfyWFT7170cIT8ml7R1Wakp
LG4MFwe1i09ImMk6vxMsTuaGmuwLc2Thqxd7fotiEXnJahGPLhAyMTNV9BKL
4ss6TI8ukgcfxqWW+bE4lL/XL2DZf0T9PrP4HxL/kWc=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwBYQKe/SFib1JlAgAAACUAAAACAAAAALti95xK4L8AAAAAAAA5QF/WI2/4
d+O/kvsgkkrzOEBJzbbQr0/nv7mvmrTr4zhAwZ8bHMPR679vHG1n49E4QOEm
qSgZf/C/tkGYqjG9OECoay24fmrzv5EfHH7WpThANJ6aPBKr9r/+tfjh0Ys4
QIi+8LXTQPq//AQu1iNvOECgzC8kwyv+v4wMvFrMTzhAP+SrQ/A1AcCuzKJv
yy04QIgRJ9q3zwHAEg/IU+siOED0sIT1Z1cCwMkUuWqlFjhAgcLElQDNAsDS
3XW0+Qg4QDBG57qBMAPAKGr+MOj5N0D/O+xk64EDwNG5UuBw6TdA8KPTkz3B
A8DKzHLCk9c3QAN+nUd47gPAFKNe11DEN0A4ykmAmwkEwK48Fh+orzdAM3XY
PacSBMBmZmZmZmY3QGpAyAN3HATAHjGTHppQN0BCs5dV5jkEwB4URx+4PDdA
u81GM/VqBMBnD4JowCo3QNSP1ZyjrwTA+CJE+rIaN0CO+UOS8QcFwNBOjdSP
DDdA6QqSE99zBcDykl33VgA3QObDvyBs8wXAW++0Ygj2NkCCJM25mIYGwAxk
kxak7TZAwCy63mQtB8AG8fgSKuc2QG1560lF+gvAk2afD8PANkCuMuwqtDAQ
wCj/P/eJnTZARXhAAWcxEsDFutrJfn02QHqN8ic7/xPAaJlvh6FgNkBPcgKf
MJoVwBGb/i/yRjZAxCZwZkcCF8DCv4fDcDA2QNiqO35/NxjAegcLQh0dNkCN
/mTm2DkZwDpyiKv3DDZA4CHsnlMJGsAAAAAAAAA2QEsRFYU=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV029IE2EcwPEzZ1j+KwxTmUZGiIb9YXf3nJbwg8jUJVsqGPrCuT+3FxHh
IrIQFbOwF2kLIihzar4oRFlJhjq8x8iUlglZuRaKubQ0E82luZy13dOL6+GO
4wPP89z3Hrjd2rO5hk0URSHf7X9SvdrVhuxJgRJHKrRg4rmY3jLvMgfOF8Q7
kwJVT2c4aBsmrklxVKc4OIh8R3wwMW2HZsjnceJdUf4FvvnTxGpPq8rT6ttv
gRiPtq+VmDlo/kV8ruVowNVyDqhAnWheHBzkhxCv+ZerOPCGE9e7uDoXx8Hv
MOI9Cf7BgTKYuEsT4rs4WPSS/ZUWd5bFjWD23/snxv0DAfuR2CQfLJUPIhh7
Rry5yBpUZEWgKNZKehC8zyAWP0eF4PIR4jqxB0EqEIs5CQhWT2olPQj6Somz
xR4W6izSHhaM//WwkLVXJ+lh4VWuXtLDgrlDLzkfFiiZQfR1sYeFuDyD5HxY
mLprkPSwkD9hkPQwYIrlJT0MpKl5SQ8D7ZW8pIcBxQYv6WHAc9524KFpUggJ
WhzrUTPAm22O4blJwanrkR1OZ6BMbfyxtfOTMFI9MD+zj4H9nbZyjX1KmC3Z
fqNPzsC1btuF14rPQnJA40J/BAO1OqMrf35auKk5Hbwk881/ZBOW3V+E+KqL
48p1GspabKFtOXPCaPHQmTc/aeCR8eWllXmh/U9Bd80SDZlPdIIjjsKF2rf8
0hANTcc+nOhKD8bf62Wm4fs0TFV4CtG9CKyv/eqMrqbhitXlTomPxFhZ1Tyq
oyF8xbJuDovCgU77gDeThtBtj58PNkTjZIX9+O1DNFRuxOSM2GMxKqhIbIqj
wdA/duvBHTlOypjWR4fRgE99a8zbEo/J/0XDXwXzwA4=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxV1wlMk2ccx/GKXAqIFBSUVm4KCKV3K1H6U0EDzuicGhxsohw6Najo5iAx
XniNAqX1AnWic+gcOnGKBx7TONicTkVk6qZTmDid1yYqHtlGn/cJ+b9PXkK+
yZu3n/6ft7wlZPrcCTlOEonketeP47ekfvrLLam3T0nYGoJFVdbq49lHT82c
u/X1nX9McKod2hlw7YZZusQyOaXVhLTkw1t3nXpqfqW84Gv42YTE4WUTN616
a5YvmarZXWfCm7Ix6jkuLlg2d+SBbZtNODHvXpu22hPhkgK7bLEJC7d7bb9s
k8JVLWkZlG7CsBXPIm4O90eE0/WCar0Jxz74cunQTBmKFvRc8q2nCeY7PnVr
D8lQ43w3/3t3E6ZOimy5IJGjGcWzqpxM8D/Wett9hBydihc5Sa+NyPYe3ZJQ
IEfAsYic2idGvDPpvbqsajmMLwfMvNdqxE/FbstW/CjHxN+b8tqvGNF2IMtQ
2SpHXv74gn1njLCdm9Gy6285Vu63rTZ/Y0Rks++0mhdy5LJlRDHv1zvHdR1G
WHmXtpm6DiNMvEPZMmLpFaHrMj26DiM+ahI6dVtHyrYOAzouCX3rpmMZEHRR
6HxZ43xZowGPzgvtmr7fJX2/AYqz1GNA2mmhXzGPAfNOCl3CPAbk1QsdxjwG
jDtCPQYEHKIePRprqUeP9/dRjx7Ne6hHj4efU48e5s1CdzKPHus2Uo8ej+x0
PnqMslKPHjssQo9hHh3+XUM9OmSspB4dTi6jHh0kn1CPDln5dL90aMij+6WD
Yjadjw5FM4Q+zDw6tGYJncI8WiRmUo8WlRnUo0VHGvVo4TeWerSYlkI9WmxK
ph4t6odTjxYNw+h8tDg+hO6XBlv11KNBrpp6NAiMox4NGgZRjwbpA+n9o0Fn
P+rRoNKHejQwe1GPBg/cqUeNCmfqUWOshHrUcH8rJR41Eh5LiUcN7wdSMh81
PNqlxKNGfKuU3D9qFN6SEo8af92QEo8KRb9IiUeFpGYp8agQe5l6VGhopB4V
np+lHhUSz1CPClWnpGQ+KshOUI8KtceEXpd43554Px6ZR4Q+Xu9Y8YiqE5pd
rjQevQ8K7cEuEI/KvUJfOO9YStR8LXQHuyGVaP5KaLnj7cxXwnu30MlJjqVE
RrXQs0/3n3O6vxIndwq9nnnioPuCeuJwYrvQfzBPHDKqhPZknq7zt1BPLN5U
Uk8sfq2gnlhc3UQ9sbi7Ueg5zBML7410PoPx7gbqGYw966lnMGTrqWcwjtqp
JwZpduqJgRtvtt3zY9BgE3oU88Rgg416YvAxbzvzRCPHRj3RyLZRTzQW2qgn
Gg95M875KHjz13/GPFGIE3mikMybcZKiMMFO9ysKU+x0PoruFjyK7vMFjwIj
7fT+UeCZjc4nEi02Op9I1NuoJxJbbHS/IlEgmk8kJtqoJwKxovlEwEk0nwi0
lFNPBBLKqSccHuXUE442K71/wnHaSj3h2GGlnnCsslJPGBZYqScM2VbqCcMU
K92vMIy10v0KxWgr3a9QDLPS+YQiTuQJRYDIE4q3ZdQTgt/KqCcEdWXUE4Li
MuoJQXspnU8wDpbS+QTDUko9wZhZSj3BSC2lnmBoeEctblIsbgpCMO9PFzlW
EKS8f3BcThYET97+7AKD4Mu7ssKx5PDj/Sf7gMjRn/cQ9gdR1t2frXEsWff5
15bHdR2y7tcTPIHwEnkC4S7yBKIH7wDmGYj2EuoZgFu87zPPAFzlzcbbFoBL
vNcyTwAaeF9nngB8V0I9/jhSQj3+OMCbjVvmj70ldD79USHy9INV5OmH1SV0
Pn4oFHn8MEvk8cNkkccXZpHHF+Eijy/cRB4pKi3U44NC3g+YxwfTLdTTF+Mt
dL/6YoSF7ldfJPAezx6A3t399LFj9UGihT4P+yCFt5JdwAureGvZ8sAG3pcV
jjfYG9UW+jzuhVrevj6O1QuHeDuezi7p7jgs8rjhIO8nzOOKvSKPa9f3Sepx
gd1CP+/OWM4792Hr84uBzljA+/W0cs3ThT2Ry7vIMY5rTpjM23nc4fbVyU5I
5V3YoPzwv+M9YBbNuwc0vNnp5ySI5l2jUiT4ZUoQzFv4/0uC/wEp397r
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
qw==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-7.017068050765658, 24.}, {-13.509108050505148`, 23.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-7.017068050765658, 24.}, {-6.509108050501055, 23.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwtUm1Ik2EUHfM7NssQDXPvnknTYmbDeN43NeuGkVmJLpFkmuBEEYkNrGWK
OckMSc0PImljYlHixCwK0YXoTWeKQolWziCpdDhbgs3USGct6cDhcDiHe/8c
iUpzPo/P4/Gkbv5TyNEllQaEIm8bR6DsokePLisUU0aGPNUrHJTsTnRidyh2
zUp1JfMcsBVnNuJFItxzKlwTNsXB8zbh5FqTCOtclncFAxwsVzVcdQQxGODF
f3bOxMGSaMq+18Rga9Yn3psGDjrU7/dXJ4nxqOeFke9aDsKvNbPyX2K0bag9
TBkcRBsFfreVBPUJ0m5+DAcTyd7Vx8oJFm6Vbo7IOLCWWzoHjAT9Ar9mqkUc
nJYnFgvNBItuKqdWhRwQ1Z2FiAmCbSnzqmwXC6pAvct/zu21uh3tDhYEiYXm
wR/u/ppsbNLKAvN7KyRh031vcvHBrIUF/cGMsAa+BC/5mhvHn7Lw4rX2rclT
gvnbYMGyK0782Z1rlY8tHqksjHrX+Fe6CJaZ63uyY1nA9jxj00+C1yulx4ul
LHSsjY37293/evMzkwNYuLX88v76NMHsjDTBFxeF9HvUJ9lC8GSuQxHtoBBs
jw3c+YQgmYmKPDFDYdw2hvFNBFfMIoNwlEJRvU0wc5lgv1dvS3MPhf710XV+
HMGSvgN3Iw0Ups8uph7yJrhkN+NgBQVNcJ28r0OMQTUF+5QFFIbVrwyMQoyr
D+mAU0Ghy6iZq/rDYK1c0lgbTyHqUbOPs5vBD4dl+ggZBbgR45t7hUFrZ9rH
oRAKC1y6zRrLYKNBr8gRUCDD31rS/Jj/+6HwF28ACWI=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN1HlIFGEcxnERNTwyEptdXbXWtETTnJ2dmcVKng5CuzTdSty0DEyjQ8wE
iySiO7PWQqQi18qKItKMCkHsjXKNLLqkVNA0pWudskwwTWl33n/eHzMMX5h3
+PDOMPotBWm57m5ubsnO03VFzoHkfdNDiJs6Jgx2ZI7bWnQkumzGvR3DMioC
HgSmb9cR7Y8dpj0DMuL8KyrPueuIPcrLyr2T8aTNUZpTFkykBX2N6Y9kpK60
v2zyDCb5kZP3Y27KaD8168i1wiBi+bLxcLVVxlrr2FXdKy2ZfnAi4naxDPs6
c/TMMC059vtjlTlDhtAdq63P1hCywKO7yiQjT9O82lejIf4jDmtRjAxz31O0
f+BIj/V4Y2yojPGEJb98LnMkblrXevtUGRkR0qa63RyZLOjNXzQhoeBSzcnH
qziSeu/iz7MOCYnXDxYtns8Rfaevw94hwZ7YGTQ/mCNFffGWzqcSpuTdKD05
lSPLX/jgeZ2EmrDB6nRvjmxVR0L6TNp/a1PGalOc6/W0y/tNp/tNEkYiac8O
d42E3hjaDzb7Og8JJwTaK2x/km1/RAwtpN3T7RoRgUm0d4e0Foa0ihgx0/ay
1Hta6kXsPMp6RCyupD2qekQ8u8J6REzcoa1ywkV8amQ9Ikqe0F6peoxoamM9
RjS8ZT1GbOhgPUYMD7Ae5/qvtMdUjxHNg7RPqx4jRofY/TEif4T2Q9VjRMAY
7WTVI2B4kvUI8PNQGI+AbG+F8Qi4oFMYj4AovcJ4BJyaozAeAS0xCuMR8CZe
YfZHQIOoMO/LgLwEhfEYMJTIegxYs5T1GEBSWY8BXWaF+X6c6zNYjwHuWazH
AP8c1mOAJpf18NBtYz08gneyHh5cIevh4VdM+8J51/AYKKFdntU0ufcQjyP7
aWNemlf1Lh4/DtC+6+l6AI/QQ7R7v73/V5/EI/Ao7dcdLQ6bzKP9OO3St3Od
B4/MMtrfXbcH8bhVTpv7vOyYux8PcoY2/f/w+A8tZAYI
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-4.509108050501396, 24.}, {-6.509108050501055, 23.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
our8i0rDPxb+/2cX/A9yHxeX
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9399586187128932`, 16.}, {1.9399586187151954`, 15.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{1.9399586187128932`, 16.}, {-0.06004138129682701, 15.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-13.509108050505148`, 23.}, {-14.509108050465073`, 22.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-14.509108050465073`, 22.}, {-14.674177018535119`, 21.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-14.674177018535119`, 21.}, {-14.674177018535175`, 20.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-14.674177018535175`, 20.}, {-12.509108050505034`, 19.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-6.509108050501055, 23.}, {-6.509108050501226, 22.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-6.509108050501226, 22.}, {-7.509108050421929, 21.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-7.509108050421929, 21.}, {-7.509108050455495, 20.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-7.509108050455495, 20.}, {-18.052117398997268`, 19.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-7.509108050455495, 20.}, {-17.052117399038906`, 19.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-18.052117398997268`, 19.}, {-17.258545075500365`, 18.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-17.258545075500365`, 18.}, {-16.509108050438698`, 17.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-17.052117399038906`, 19.}, {-18.25854507548891, 18.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1: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
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-12.509108050505034`, 19.}, {-10.641640219737667`, 18.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-10.641640219737667`, 18.}, {-3.509108050562901, 17.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-10.641640219737667`, 18.}, {-11.888376108489922`, 17.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-10.641640219737667`, 18.}, {-5.509108050584416, 17.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwtk39MU3cUxatFbKSB0aFbmSIt74vu9dd7zgiIwg0plgHyqyK4FYMyQLQd
zF9IB7owYCoycKkUtZsVJttIHCp1ds3obrdCxTHGhnNdBNQFKRJRAwK6bGHF
7JPc3Jw/TnJykiPaWZyRv5DD4UR4b/6bqZWB1QkEOS9YA5X+j8cOphCsXK7l
P51iodM67gjMJFj2huvTk6MsJIcJTJkagneVgRb3HyywKfmlce8QtKUlpva4
WHg3akTt1hJclLW3OO8bFjj3P2ZfOUjQmXUs6IsWFsbT8l+aO0JwKqM+xlDP
Al1R+KT+OMHGhKoJWs8CFp36tecUwbbIXaI9eSx0zHbZl5oJLk9qGH1zMwvq
Cf8GyVcEcWfwwNIIFs4nlsT7Xfb6j/h6+kJZOBMwPmy5RtB0fov4wBIW4jaU
a1Z3Ehy47lPNe8pAY3+4Pd9BMHp6WcCxIa/ufcDVOQneDK/FmW4G4pkuWUw3
wXM5O06nX2Kg/7k1+k+vLngBA+Zz7q8nuwgefXvVWlsqAx2fRPBifyTY3Wk8
EBnFgO/A7yq7nWBo3TX6npgBY26HrsTqzddTo7bwGdgV3V+WeYlgyuiSu3kT
CtDnSbW6VoJfvlzIsTgU0Ot2Ka1nvPleE/O2NSog52wzd10dQd9/o2cz9iig
Uves1JxM8NmmpDXbv5fD1grBivSNBJ8vdPIuGuQwFTtxu0/h7XtkaLa1SA7Z
V49ahBTBbQ+b5pJi5FA5NNLKBhO8IpxeaRLIYb91QccyAcFb2sls46gM5Jvu
uK/7EfzhfkPbRpsM2msqXk1YTHB/VX9QfZ0MZsoG3zP4EHyScNlYmyuDGyH/
jFzkEvy5dx4pXNA2Te9eQPBCzYCj3SyF7Czdqua/Kbz3bVz69lIpDA7r9erH
FB4uCH7fnSYFlut4dPgOheUn3ooNkUlB44yton6icFjC/UzB9/rFs+uVVyhs
VgYZ+Y8kQK/wCIYNFLpu1dFXf5NAnyWAP7mXwtS/irNft0kg/kFJ+AfJFEYW
2kKLPpfAvjE/fbkzDDWejxILcyVwaJHyRIgqDHfMtKitIglsAWFOwU0xqgz+
GzRjNPicrn2o1oqR73Bx1RYajgecXe/xF2N7+S9tpmoaPC0qVeh3IlzrImyU
hgbh1pOCuX0ibDLfaFwdSYM4/JDpw3UiHOTZb+8W0sAJmu9H9P++aPgPHxSH
OA==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN0l0og1EYB/AhbrYkaT4iX0l433cHu5CYf+GC0uTK5YwhozXyFSJKtCKf
ZRe+WimF3FiaYm7mglwQUnYzyVISbijlPee52b/n7fSrc07POefNtjqabNEa
jSZP/fgI62PlTqLuTCNSjPpW8luqb+jvi6G3jZxcEGP2vjB4beQp+WFSfmBI
7iAX55cnWS4YFjrJmXq+gKGwi9z46zH/ehiCdrL/Zu+nZYHhoIfct10dNT3K
4HaQ20UYlpxksdzMsNhHnguVqaW6n5ybw6POHyQfWbRqMawOk5dN4SVT2AD3
CPnEx2PA1hhZbDdnwO44WSs2MKBhmnx1yaPgeIb8XbehloIXFzkj4EwPOBXc
zpNra3gUTCyT7X59t1+v4GONvCL6kZG1GdmPjIQd8rPoR8b5Plkn+pFh9JKN
pTwyAqfkNP5ccTKCAfJYs0dX8SRh4JpsFQeSsHgXef8S2BN5/dB1X+WQ0BiK
vG8Jn6/kWz69RELKO7nocjY+NkXC2Wfk/yPhH9RHA2M=
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-11.888376108489922`, 17.}, {-6.888376108482532, 16.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-11.888376108489922`, 17.}, {-12.888376108487705`, 16.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQrcC20/rmMfUDDGBg6LCOFcJ/Lbm74u9nAwdDKF9c
k9l/+zMDhxUsEH6z7o0m3RsGDkJQvqG6lUjCCQOHImYIX14MpMHA4QgThB/w
a4n/ryUGDjxQ/sHLa38mTjRwcGeE8IsXOTO21Rg4lDFA+GlgYODwyuDTFd0T
6gf2e2RnXPU3cPh6eO4C7TPqBxYVLXdbamngMH3n7nmXLqkf4H8ixXhN2cDh
jKDPeaU76gfY5h6dns5n4DDrjJ+RzAv1AzzW/qJbPuk7/Ht5+Pi+b+oHlE43
bo46qe/wI3N1PxeHxgGvV0pchxfoO3T4sHb9l9Y40D7DSPJthb6DWY1I3qcW
jQNnz4CAnsPsfdv0787VOLD1zaaU2Pl6DqaMwcpeGzQOKAUduCNSpOfA4PLS
w3KPxgGBv19MPrvoOfxtq1yw6qDGgbq3Abk/xPUcdE4xa807oHGgSPlKq8pr
XYc+3o6nwjs1DjybV1dXvk/XQTmQ7TL3ao0Dd+MDwj9O1HV4NaXuU+s0jQPh
aZ4Ck1J1HR7f+ODcVK1xIHhT5spIS12HR2Grdb1jNA6kZCcyXeDWdfB6y5X3
yk7jQEV9WsOXBzoOMnP4WROUNQ70vKtQPr5DxyEkeeen1ZwaB+btmPHafbKO
wzcnDvNzH9UPbLp79EZZgY4Dg/Wfi8duqx84EsvwOjhAx6HIe+rhqcfVD9yw
8FC6b6Tj4Fdymdt6q/qBN3lz6yQkdBwmbN22atsSWPrRcQAAjTwOBw==
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-5.509108050584416, 17.}, {-5.509108050582398, 16.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-6.888376108482532, 16.}, {-0.06004138129682701, 15.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[{{-5.509108050582398, 
          16.}, {-5.344667303397084, 15.50000000000178}, {-5.509108050578021, 
          15.}}], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[{{-5.509108050582398, 
          16.}, {-5.673548797763387, 
          15.499999999999176`}, {-5.509108050578021, 15.}}], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-5.509108050582398, 16.}, {1.9399586187151954`, 15.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-5.509108050578021, 15.}, {-3.5091080505793286`, 14.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJxN0j1IG2Ecx/EjmCwJDh2CghSUu8vlnrRDdXCo+hvSQJYKgiBkMYGCfaFS
qMXJwaWUgihKxySDmKk0WWIwQU9FIpJg21itQorge0HExkVB6N3zf4bnz3Mc
H7iXL89de2J04IVLUZTH9uGcrX8HPZkHPkvhE4L3mrzT+eH67oyBXZEfDXiS
b6sMDy/JnljWHcsyHP4lx5+/N6xphrFzMkLODQx/Tsjpm2jqJsrgPyJPZmKN
9Q6GjkPyWfijy3drQqmTqxVnTGzvk/ntKRPfdslt5Xf2MpGukSNhZ2x/J79Z
9dvLRK5Knu29sFcQP7fIpaIzQTRtko+7p466p4KIbJB9+WFvfjiIhRKZ51QM
DC6RG7zHQK4g9xjIL5J5TthAQvg17zFQFJ7jPQEsF+SeAF4tyT0BWOL9Xt4T
AMry/uh4uSXvj46+qtyjY2Wb/Iz36Dj9Ie+PjkJN7tHQ9Uvu0RDblXs0hPbk
Hg0Lwp18NDSEW4vj9w2Pht7f5Imhed/TuopJ4Th/gIo1Yav29TY+o+JeOJn7
vNc3qqJLfP+7+X57qRgR3nEuf6LiizCrfGp2t6iw9uX/WcV/IIxQ/w==
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{1.9399586187151954`, 15.}, {4.179705992012771, 14.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{4.179705992012771, 14.}, {4.1797059920178015`, 13.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-0.06004138129682701, 15.}, {0.8085463367302737, 14.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{0.8085463367302737, 14.}, {0.8085463367303873, 13.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwtlHdUkwcUxQMkQCCQDyFhBDEJIYShZZXWle8qUWoSURREoSihagFluaCO
xq0MEXAgaI1WPYwiggMHynYgoHUj5OBAwQSBKoIIiHXd8955f71zfu++cy4v
PHbOEl0KhRLyub/MsBWDTdQLBChf5QzLkYpecT6B+55r3gx2OMEybnG/9gCB
sXP0D8c0OkFxo+Op4Q4ChiHFtJBiJ/TqS88cWEkg3G+VqDLdCbddUqJzFhKA
65cFJ7zz/odp+gsB1bsZn8sJ4aKC7N4fCGzKDemt4TvBmrLTWMYm0C7Zocv4
IILn+qSbon4mGr5KhFEvz7+xKWciJSxmsUwlAj8k0+3VNibW84paGuJFULRa
7UifycQhZqqHv0SEuhhZnzmLCa2zYWQTW4QwhvO6FWpTRK3kK8M1jhCeP2tV
eMwU1prmVT1ljrCK7WysjDLFQIq7VJnmiPFet3KK3U2h/6vwk5nCEe2GadLy
NSZo/MojRGrIySzJZBNU3fAPlqmEoCp+U+fqmWBW9cQzDfFC+FkXW72qY2DN
xeRHsyVCLN66R05LZ8CrSHz9EVsI+d8miZ8CGUg7ErRZoXGA/kq7gw85DCjT
Hxh2lzkgvf/queRnxqD/eSF4Q5oDtK7UG5xcY4yNpCQyFQ7oXU7WlXcYfecR
YO3Z4PC2QiPEiLOeylQC/EWrZj2ONwIt27/hVrwAC8JWt6m8jZChHtodKBGg
qHZV/U9DdBD0/S5P2QIc9KhsPFJBxxY7ripGYw9BQZC2eQsdnbY5Wsple0hc
JvLafenwpVJNs9Ls8elc1IpqYzoO3A+luyvsYTPFK1o63fD7v/i4EJW+OoNu
iLhOWqVcxQdbor64v8EAJjMZ0rvxfLg1Wk4I3m2A42+eRIVK+NDT9+lv8TeA
x+ON/G42H/u6Q7s5Fga4qNcTt1XDw4vtEXybh/qYEO88j3uZh+5b4ZkPs/Rx
mud5tyqNh9JrcrH/An0IWPSXEQoelmrjmkUptO/+cOHrfMLupoyGzJyyAD8V
F5y1jjvpDBr20tsONcVz8ezxe3ZHPRV3rH1OLJNwsX8Guz48hQppfUu0gSUX
4rrNx9dLqRieGNwVdG8MHs6ffMyLToXaPkZ5OnEMFAPTridf14OHX2+Gnd0Y
qHMPEcptetAp0wgO1diheZEmYnSBLnKyv2g0XFnT1l5dqot3JHv8UfFoqGOL
bj/n6yJKPDWxps0WHbEOkatbdfBh7+ggSpIt/FgF0zdk6+CwT96DoHG2MAub
FDE4VwcLpc976+5x4DZb3fjaRAfe+fUl8/7goPBlUkLAdQqEYYuZI3YcbOFO
W+K+kQK32EJGZa0N2r2jFjjZfyK/8VhDXBT9VC9jhNzVPsMlT2yNrJZ9J0I/
fiRvNBFTnrRZoav8eZ53xEfSL667WZxkhcnzA7Rpd4ZJm5PPB66Ns0JqrjZy
6fhhcuzurpyE+5ZoLjzheEU1RCazmVWz11pCELHNfg91iBzn47tsDtcSyx8n
hb76fZC0Ze3PXn+NjY1drXLbuQPfeVgImbC9tvvUe9KnlP7qppiFHPvwZBn9
PXnMkvCKemGBSfkrDnss6idLrxRuSEi2gLj+POV4SR+pzHtS+9bNAseT3EtU
lD5y6FEeXf3IHNEvnpxykL8jXeWGck+l+ef7qod/3NtLmtNGUgaE5hDENmf9
2/SWLNJNrnO5PQoWKuGmPuu35IikkNqYMAqpu87smu/3hqxnXDqZyxmFgmcB
zi1p/5EzJM6tI7VmaPZmFQ2W9pCJncP77q40Q97qfMc/I7rJQF2PB3yRGSqU
S6vg0UW27aw72POMAD9Qvm6qxWuSr6zR/HyUQENfcOAW007S7OWYipElBKoV
mbP0eFqy5FIrZ4rb51zOfhtZLdOQ3/KZwP9slHEg
          "]], 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-16.509108050438698`, 17.}, {-12.888376108487705`, 16.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-12.888376108487705`, 16.}, {-11.50718608453738, 15.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-12.888376108487705`, 16.}, {-8.507186084530275, 15.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-11.50718608453738, 15.}, {-8.507186084527717, 14.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-8.507186084530275, 15.}, {-11.821706137469647`, 14.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-8.507186084527717, 14.}, {-8.507186084529167, 13.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-11.821706137469647`, 14.}, {-11.821706137469562`, 13.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-8.507186084529167, 13.}, {-8.507186084526154, 12.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[BezierCurveBox[CompressedData["
1:eJwtlHtM03cUxYsOZYqPAGJ52Xd/LW/CY3EUv3esBouAsyhRXuO9RbCsRQSF
ISLg8IHTui0iocAYFQPDDcysDL4gzNJigfIWLBShtF0mynRT55Sp85Nzc/46
ycm9yaUlZQpTV5BIJMHreeOkCZ/zlTNmRHqLK7TW7e/OrzWjEd/DS/8YuUAN
iBt6EG9GHsJVVSINF+AMr+OhnRlZxVyzjLnGBVv509KiHhNKijjE6fyaC5Wl
5e71B00I3N8EuHDX1aI5eqMJyZ4IXosLaumu9dWNRnRcHvO4m84FSdeR0MPB
RrTAP7nC+jkHNC3HknXaBXTnLRxoPyBKNcQtoHCFKDpUxgFiQRhbZTag0uLm
ll4xB1azPXZYZRuQxPPcRAifA3GuLzkMkgHZ/LJOpbTngPvjW68WT82jz7e4
lewwEyApLFClb5pHkhSjtbqNAPchr7JLsjnkXRacEFZOQIJpLCiXO4fqzvCO
DSQQQJqmBbbKZ5HmbR824NilpQHvWRT9SH82VMYGcZCanqvQo5aE3OMqMRs2
FTZqGj/So3EXqVzAZ4NQ4G2YujCDeggfUp89G+KjHBk5NdOooEB4OtzMgghi
8163Zh1aSX+6Q9vGAuqv7LxnbfeQ0IayNaqcBRN2gm+mlVPo4C51zL0EFlQ0
RC6ub5h414cJ6mNn/Vt+Hkcb3NzmQ2VMmLwYK3x5cwyd3FkzqRYzodfUyX/Q
NYr8Pb2uhfGZIM27aX1COYI2D4+kDNozIShccLWjbxh5fXjh2V4zA5RxB12q
+4dQfvJn6bo2Bng2sdOIQS1ajtjTnlbOgEOB2cV7BgfRjX/3LS4lMIB05XDA
w4197+5Fh8uN1y0la1RoX3jooZ0yOrzUxfFml2+jphEXJ42YDixe5iRvqQfd
SQrp2s2ng63SPFM8fQv99PR22l17OvxWoAlTKDvRp9LKtSlmGhTc9gtu3d+O
xv17m5faaPDCVK3od1Ig+xlBZFE5DSxTZ5a7RlsR5Rzt702JNCAVOh9NelLx
bj9UoKzS3+x+VYR47drEcBkViAtlX7SIC/G2i4HaETEVMuYtQj7xq8Da3Wuc
kvlUyJcnGwu31uMnfwWhZ/ZUiC9WEzlHm7HQoimPM0yBjJ5oSYmoFevm5B6i
XArkRNtsqPJW4FPSjItdLhSIeM/6QMnKDrxv44tmevcWSKs4/cGsrRJXXHqD
C8j7HqlSq1TYOHkkS7HNBYhAvS9t5x0ccHUwkTnvDEbT/mxbxwF8YnVVymSZ
M0h+9wypstTivj9n86a8nOH8cjaKODeE7TIq5cSYE/T7Fn3v4DqCY7M0xo58
J3A/GZlFGhvFNVbZvBqGE1x5bv5xhXQcG9ykP/SrHYF/ensUNfEuJnQEI0Ti
CAHn13U0bJ/CFgHdZaGbHSG9ky6+vk6Hx0JqyuVdDnCfXJL5sWIa19vc8okX
O0BYeMU9LlOPRd+yskRsB+itJRNZOj32Ge4TTujJYDgT9N2XX83ixd7WwcvV
ZKhd+76HgHUf1+Xo/7iRSgYLSp5ptOU+jpqJkHt5k4GklKoYfnP4//9Dhv8A
q5cqBw==
          "]], 0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-11.821706137469562`, 13.}, {-8.507186084526154, 12.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-8.507186084526154, 12.}, {-7.50718608451848, 11.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-7.50718608451848, 11.}, {-3.5091080505764864`, 10.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-3.5091080505764864`, 10.}, {-3.5091080505722516`, 9.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-3.5091080505722516`, 9.}, {-1.5091080505424088`, 8.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-1.5091080505424088`, 8.}, {-1.5091080505381171`, 7.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-1.5091080505381171`, 7.}, {-0.6001147210174338, 6.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{-0.6001147210174338, 6.}, {-0.6001147210174338, 5.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{-0.6001147210174338, 5.}, {0.7904979771890623, 4.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{0.7904979771890623, 4.}, {0.7904979771890908, 3.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{0.7904979771890908, 3.}, {7.490891949421922, 2.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{7.490891949421922, 2.}, {9.490891949403988, 1.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], Dashing[{Small, Small}], 
         ArrowBox[{{9.490891949403988, 1.}, {10.000179420477082`, 0.}}, 
          0.3417206900744997]}, 
        {RGBColor[
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137], 
          NCache[
           Rational[167, 255], 0.6549019607843137]], 
         ArrowBox[{{10.490891949414305`, 1.}, {10.000179420477082`, 0.}}, 
          0.3417206900744997]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{-0.3216193122015573, 32.89279367650638}, {0., 
            32.678380687798445`}, {0.3216193122015573, 32.89279367650638}, {
            0.3216193122015573, 33.321619312201555`}, {-0.3216193122015573, 
            33.321619312201555`}, {-0.3216193122015573, 32.89279367650638}}]},
          
          TagBox[
           GridBox[{{"\"Axiom 1\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    OverscriptBox["x2", "_"]}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 1", $CellContext`x1 == CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, 
               OverBar[$CellContext`x2]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{-1.5809456450017427`, 
            31.89279367650638}, {-1.2593263328001854`, 
            31.67838068779844}, {-0.937707020598628, 
            31.89279367650638}, {-0.937707020598628, 
            32.321619312201555`}, {-1.5809456450017427`, 
            32.321619312201555`}, {-1.5809456450017427`, 31.89279367650638}}]},
          TagBox[
           GridBox[{{"\"Axiom 2\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 2", $CellContext`x1 == CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[$CellContext`x2]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{-18.830727362683515`, 
            32.89279367650638}, {-18.509108050481956`, 
            32.678380687798445`}, {-18.187488738280397`, 
            32.89279367650638}, {-18.187488738280397`, 
            33.321619312201555`}, {-18.830727362683515`, 
            33.321619312201555`}, {-18.830727362683515`, 32.89279367650638}}]},
          TagBox[
           GridBox[{{"\"Axiom 3\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Axiom 3", CircleTimes[$CellContext`x1, $CellContext`x2] == 
            CircleTimes[$CellContext`x2, $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{-21.830727362692524`, 
            30.89279367650638}, {-21.509108050490966`, 
            30.67838068779844}, {-21.187488738289407`, 
            30.89279367650638}, {-21.187488738289407`, 
            31.32161931220156}, {-21.830727362692524`, 
            31.32161931220156}, {-21.830727362692524`, 30.89279367650638}}]},
          TagBox[
           GridBox[{{"\"Axiom 4\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 4", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              CircleTimes[$CellContext`x1, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{-14.565420101858814`, 
            31.89279367650638}, {-14.243800789657257`, 
            31.67838068779844}, {-13.9221814774557, 
            31.89279367650638}, {-13.9221814774557, 
            32.321619312201555`}, {-14.565420101858814`, 
            32.321619312201555`}, {-14.565420101858814`, 31.89279367650638}}]},
          TagBox[
           GridBox[{{"\"Axiom 5\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}], 
                  "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Axiom 5", CircleTimes[
              CirclePlus[$CellContext`x1, $CellContext`x2], 
              CirclePlus[$CellContext`x1, $CellContext`x3]] == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[71, 255], 0.2784313725490196], 
            NCache[
             Rational[182, 255], 0.7137254901960784], 
            NCache[
             Rational[109, 255], 0.42745098039215684`]], EdgeForm[None], 
           PolygonBox[{{6.169272637310348, 31.89279367650638}, {
            6.490891949511905, 31.67838068779844}, {6.812511261713462, 
            31.89279367650638}, {6.812511261713462, 32.321619312201555`}, {
            6.169272637310348, 32.321619312201555`}, {6.169272637310348, 
            31.89279367650638}}]},
          TagBox[
           GridBox[{{"\"Axiom 6\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", "x2"}], "\[Equal]", 
                RowBox[{"x2", "\[CirclePlus]", "x1"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Axiom 6", CirclePlus[$CellContext`x1, $CellContext`x2] == 
            CirclePlus[$CellContext`x2, $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[146, 255], 0.5725490196078431], 
            NCache[
             Rational[10, 17], 0.5882352941176471], 0], EdgeForm[None], 
           PolygonBox[{{10.490891949412969`, 1.6180758707382354`}, {
            10.872816078674735`, 2.}, {10.490891949412969`, 
            2.3819241292617646`}, {10.108967820151204`, 2.}, {
            10.490891949412969`, 1.6180758707382354`}}]},
          TagBox[
           GridBox[{{"\"Hypothesis 1\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                  OverscriptBox["\[FormalA]", "_"]}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                 "_"]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Hypothesis 1", CircleTimes[
              OverBar[\[FormalB]], 
              OverBar[\[FormalA]]] == OverBar[
              CirclePlus[\[FormalB], \[FormalA]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-11.926349898835184`, 
            32.383718162884655`}, {-12.30827402809695, 
            31.722208074903946`}, {-11.544425769573419`, 
            31.722208074903946`}, {-11.926349898835184`, 
            32.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 1\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    OverscriptBox["x1", "_"]}], ")"}], "\[CircleTimes]", 
                  "x2"}], "\[Equal]", "x2"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 1", CircleTimes[
              CirclePlus[$CellContext`x1, 
               
               OverBar[$CellContext`x1]], $CellContext`x2] == \
$CellContext`x2}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-14.509108050440943`, 
            30.383718162884655`}, {-14.891032179702709`, 
            29.722208074903946`}, {-14.127183921179178`, 
            29.722208074903946`}, {-14.509108050440943`, 
            30.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 2\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    OverscriptBox["x1", "_"]}], ")"}]}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 2", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, 
               OverBar[$CellContext`x1]]] == 
            CircleTimes[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-24.509108050493865`, 
            30.383718162884655`}, {-24.89103217975563, 
            29.722208074903946`}, {-24.1271839212321, 
            29.722208074903946`}, {-24.509108050493865`, 
            30.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 3\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  RowBox[{"x2", "\[CircleTimes]", "x1"}], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 3", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
              CircleTimes[$CellContext`x2, $CellContext`x1], 
              CircleTimes[$CellContext`x1, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-1.275855948580329, 
            29.383718162884655`}, {-1.6577800778420935`, 
            28.722208074903946`}, {-0.8939318193185644, 
            28.722208074903946`}, {-1.275855948580329, 29.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 4\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 4", CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[$CellContext`x1]]] == 
            CirclePlus[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{1.563784810642062, 31.383718162884655`}, {
            1.1818606813802974`, 30.722208074903946`}, {1.9457089399038265`, 
            30.722208074903946`}, {1.563784810642062, 31.383718162884655`}}]},
          
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 5\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}], "\[CirclePlus]", "x2"}], 
                "\[Equal]", "x2"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 5", CirclePlus[
              CircleTimes[$CellContext`x1, 
               
               OverBar[$CellContext`x1]], $CellContext`x2] == \
$CellContext`x2}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-11.926349898835213`, 
            31.383718162884655`}, {-12.308274028096978`, 
            30.722208074903946`}, {-11.544425769573447`, 
            30.722208074903946`}, {-11.926349898835213`, 
            31.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 6\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", "x2"}], "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 6", 
            CirclePlus[$CellContext`x1, $CellContext`x2] == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-7.275855948597467, 
            30.383718162884655`}, {-7.657780077859232, 
            29.722208074903946`}, {-6.893931819335703, 
            29.722208074903946`}, {-7.275855948597467, 30.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 7\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                    ")"}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 7", 
            CircleTimes[$CellContext`x1, $CellContext`x2] == 
            CircleTimes[$CellContext`x1, 
              CirclePlus[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-2.886419338890647, 
            30.383718162884655`}, {-3.2683434681524117`, 
            29.722208074903946`}, {-2.5044952096288826`, 
            29.722208074903946`}, {-2.886419338890647, 30.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 8\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"]}], "\[Equal]", "x1"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 8", CirclePlus[$CellContext`x1, 
              OverBar[
               OverBar[$CellContext`x1]]] == $CellContext`x1}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-3.2758559485823184`, 
            29.383718162884655`}, {-3.657780077844083, 
            28.722208074903946`}, {-2.893931819320554, 
            28.722208074903946`}, {-3.2758559485823184`, 
            29.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 9\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  OverscriptBox[
                   OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "_"]}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  OverscriptBox["x1", "_"]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 9", CircleTimes[$CellContext`x1, 
              OverBar[
               OverBar[
                OverBar[$CellContext`x1]]]] == CircleTimes[$CellContext`x1, 
              OverBar[$CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-1.509108050491676, 
            28.383718162884655`}, {-1.8910321797534406`, 
            27.722208074903946`}, {-1.1271839212299115`, 
            27.722208074903946`}, {-1.509108050491676, 28.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 10\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", "x1"}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 10", CirclePlus[
              OverBar[
               OverBar[$CellContext`x1]], $CellContext`x1] == CirclePlus[
              OverBar[
               OverBar[$CellContext`x1]], 
              CircleTimes[$CellContext`x1, 
               OverBar[$CellContext`x1]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-0.509108050510406, 27.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 1\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", "x1"}], 
                "\[Equal]", 
                OverscriptBox[
                 OverscriptBox["x1", "_"], "_"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 1", CirclePlus[
              OverBar[
               OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
              OverBar[$CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-0.5091080505076775, 26.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 2\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"]}], "\[Equal]", 
                OverscriptBox[
                 OverscriptBox["x1", "_"], "_"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 2", CirclePlus[$CellContext`x1, 
              OverBar[
               OverBar[$CellContext`x1]]] == OverBar[
              OverBar[$CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-0.5091080505133903, 25.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 3\""}, {
              RowBox[{"x1", "\[Equal]", 
                OverscriptBox[
                 OverscriptBox["x1", "_"], "_"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 3", $CellContext`x1 == OverBar[
              OverBar[$CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-7.017068050765658, 
            24.383718162884655`}, {-7.398992180027423, 
            23.722208074903946`}, {-6.635143921503894, 
            23.722208074903946`}, {-7.017068050765658, 24.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 11\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 11", CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x2] == CircleTimes[
              OverBar[$CellContext`x1], 
              CirclePlus[$CellContext`x1, $CellContext`x2]]}], "Tooltip"]& ], 
        
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-4.509108050501396, 
            24.383718162884655`}, {-4.891032179763161, 
            23.722208074903946`}, {-4.127183921239632, 
            23.722208074903946`}, {-4.509108050501396, 24.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 12\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 12", CirclePlus[
              OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
              OverBar[$CellContext`x1], 
              CircleTimes[$CellContext`x1, $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{1.9399586187128932`, 16.383718162884655`}, {
            1.5580344894511287`, 15.722208074903948`}, {2.3218827479746578`, 
            15.722208074903948`}, {1.9399586187128932`, 
            16.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 13\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 13", CirclePlus[
              OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
              OverBar[$CellContext`x1], 
              CircleTimes[$CellContext`x2, $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-13.509108050505148`, 
            23.383718162884655`}, {-13.891032179766913`, 
            22.722208074903946`}, {-13.127183921243383`, 
            22.722208074903946`}, {-13.509108050505148`, 
            23.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 14\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 14", CirclePlus[$CellContext`x1, 
              CirclePlus[$CellContext`x1, $CellContext`x2]] == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-14.509108050465073, 22.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 4\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 4", CirclePlus[$CellContext`x1, 
              CirclePlus[$CellContext`x1, $CellContext`x2]] == 
            CirclePlus[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-14.674177018535119`, 
            21.383718162884655`}, {-15.056101147796884`, 
            20.722208074903946`}, {-14.292252889273353`, 
            20.722208074903946`}, {-14.674177018535119`, 
            21.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 15\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                "\[Equal]", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}], 
                  "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 15", CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               CirclePlus[$CellContext`x1, $CellContext`x3]]] == CircleTimes[
              CirclePlus[$CellContext`x1, $CellContext`x2], 
              CirclePlus[$CellContext`x1, $CellContext`x3]]}], "Tooltip"]& ], 
        
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-14.674177018535175, 20.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 5\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 5", CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-6.509108050501055, 
            23.383718162884655`}, {-6.89103217976282, 
            22.722208074903946`}, {-6.127183921239291, 
            22.722208074903946`}, {-6.509108050501055, 23.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 16\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                    ")"}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 16", CircleTimes[
              OverBar[
               OverBar[$CellContext`x1]], 
              CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
              OverBar[
               OverBar[$CellContext`x1]], 
              CirclePlus[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-6.509108050501226, 22.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 6\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                    ")"}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 6", CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
              OverBar[
               OverBar[$CellContext`x1]], 
              CirclePlus[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-7.509108050421929, 21.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 7\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                  "x2"}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 7", CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
              OverBar[
               OverBar[$CellContext`x1]], $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-7.509108050455495, 20.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 8\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 8", CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x1, $CellContext`x2]] == 
            CircleTimes[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-18.052117398997268`, 
            19.383718162884655`}, {-18.434041528259034`, 
            18.722208074903946`}, {-17.670193269735503`, 
            18.722208074903946`}, {-18.052117398997268`, 
            19.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 17\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    "x3"}], ")"}]}], "\[Equal]", 
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 17", CircleTimes[$CellContext`x1, 
              CirclePlus[
               
               CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == CirclePlus[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              CircleTimes[$CellContext`x1, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-17.258545075500365, 18.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 9\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    "x3"}], ")"}]}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 9", CircleTimes[$CellContext`x1, 
              CirclePlus[
               
               CircleTimes[$CellContext`x1, $CellContext`x2], \
$CellContext`x3]] == CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, $CellContext`x3]]}], "Tooltip"]& ], 
        
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-17.052117399038906`, 
            19.383718162884655`}, {-17.43404152830067, 
            18.722208074903946`}, {-16.67019326977714, 
            18.722208074903946`}, {-17.052117399038906`, 
            19.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 18\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 18", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, 
               CircleTimes[$CellContext`x1, $CellContext`x3]]] == CirclePlus[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              CircleTimes[$CellContext`x1, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-18.25854507548891, 18.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 10\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 10", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, 
               CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
            CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, $CellContext`x3]]}], "Tooltip"]& ], 
        
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-12.509108050505034`, 
            19.383718162884655`}, {-12.8910321797668, 
            18.722208074903946`}, {-12.127183921243269`, 
            18.722208074903946`}, {-12.509108050505034`, 
            19.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 19\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}], "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 19", CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[$CellContext`x2]]] == CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-10.641640219737667, 18.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 11\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 11", $CellContext`x1 == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-3.509108050562901, 
            17.383718162884655`}, {-3.8910321798246654`, 
            16.722208074903946`}, {-3.1271839213011363`, 
            16.722208074903946`}, {-3.509108050562901, 17.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 20\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  OverscriptBox["x1", "_"]}], "\[Equal]", 
                RowBox[{"x2", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 20", CircleTimes[$CellContext`x1, 
              OverBar[$CellContext`x1]] == CircleTimes[$CellContext`x2, 
              CircleTimes[$CellContext`x1, 
               OverBar[$CellContext`x1]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-11.888376108489922`, 
            17.383718162884655`}, {-12.270300237751687`, 
            16.722208074903946`}, {-11.506451979228157`, 
            16.722208074903946`}, {-11.888376108489922`, 
            17.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 21\""}, {
              RowBox[{"x1", "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 21", $CellContext`x1 == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x1, $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-5.509108050584416, 
            17.383718162884655`}, {-5.891032179846181, 
            16.722208074903946`}, {-5.1271839213226515`, 
            16.722208074903946`}, {-5.509108050584416, 17.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 22\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", "x1"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 22", CircleTimes[
              OverBar[$CellContext`x1], 
              CircleTimes[$CellContext`x2, $CellContext`x1]] == CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-6.888376108482532, 
            16.383718162884655`}, {-7.270300237744297, 
            15.722208074903948`}, {-6.506451979220768, 
            15.722208074903948`}, {-6.888376108482532, 16.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 23\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    ")"}]}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  OverscriptBox["x1", "_"]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 23", CircleTimes[$CellContext`x1, 
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]] == 
            CircleTimes[$CellContext`x1, 
              OverBar[$CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-5.509108050582398, 16.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 12\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  OverscriptBox["x1", "_"]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 12", CircleTimes[
              OverBar[$CellContext`x1], 
              CircleTimes[$CellContext`x2, $CellContext`x1]] == 
            CircleTimes[$CellContext`x1, 
              OverBar[$CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-5.509108050578021, 
            15.383718162884655`}, {-5.891032179839786, 
            14.722208074903948`}, {-5.127183921316257, 
            14.722208074903948`}, {-5.509108050578021, 15.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 24\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", 
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                  "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 24", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              OverBar[
               CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
            CircleTimes[
              OverBar[
               CircleTimes[$CellContext`x1, $CellContext`x2]], 
              CircleTimes[$CellContext`x2, 
               OverBar[$CellContext`x2]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-3.5091080505793286, 14.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 13\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", 
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], "\[Equal]", 
                RowBox[{"x2", "\[CircleTimes]", 
                  OverscriptBox["x2", "_"]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 13", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              OverBar[
               CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
            CircleTimes[$CellContext`x2, 
              OverBar[$CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{1.9399586187151954`, 15.383718162884655`}, {
            1.5580344894534308`, 14.722208074903948`}, {2.32188274797696, 
            14.722208074903948`}, {1.9399586187151954`, 
            15.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 25\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                  "\[CirclePlus]", 
                  OverscriptBox["x2", "_"]}], "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                  "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 25", CirclePlus[
              OverBar[
               CircleTimes[$CellContext`x1, $CellContext`x2]], 
              OverBar[$CellContext`x2]] == CirclePlus[
              OverBar[
               CircleTimes[$CellContext`x1, $CellContext`x2]], 
              CircleTimes[$CellContext`x2, 
               OverBar[$CellContext`x2]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{4.179705992012771, 14.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 14\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                  "\[CirclePlus]", 
                  OverscriptBox["x2", "_"]}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 14", CirclePlus[
              OverBar[
               CircleTimes[$CellContext`x1, $CellContext`x2]], 
              OverBar[$CellContext`x2]] == OverBar[
              CircleTimes[$CellContext`x1, $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-0.06004138129682701, 
            15.383718162884655`}, {-0.44196551055859157`, 
            14.722208074903948`}, {0.32188274796493754`, 
            14.722208074903948`}, {-0.06004138129682701, 
            15.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 26\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                  "\[CirclePlus]", "x1"}], "\[Equal]", 
                RowBox[{
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                  "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 26", CirclePlus[
              OverBar[
               CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
            CirclePlus[
              OverBar[
               CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x2]], 
              CircleTimes[$CellContext`x1, 
               OverBar[$CellContext`x1]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{0.8085463367302737, 14.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 15\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                  "\[CirclePlus]", "x1"}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{
                   OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                 "_"]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 15", CirclePlus[
              OverBar[
               CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
            OverBar[
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{4.1797059920178015, 13.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 16\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", 
                  OverscriptBox[
                   RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 16", CirclePlus[
              OverBar[$CellContext`x1], 
              OverBar[
               CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
              CircleTimes[$CellContext`x2, $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-16.509108050438698`, 
            17.383718162884655`}, {-16.891032179700463`, 
            16.722208074903946`}, {-16.127183921176933`, 
            16.722208074903946`}, {-16.509108050438698`, 
            17.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 27\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], 
                    ")"}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 27", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, 
               CircleTimes[$CellContext`x2, $CellContext`x3]]] == 
            CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               CirclePlus[$CellContext`x1, $CellContext`x3]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-12.888376108487705, 16.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 17\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], 
                    ")"}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Substitution Lemma 17", 
            CircleTimes[$CellContext`x1, $CellContext`x2] == 
            CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               CirclePlus[$CellContext`x1, $CellContext`x3]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-11.50718608453738, 
            15.383718162884655`}, {-11.889110213799146`, 
            14.722208074903948`}, {-11.125261955275615`, 
            14.722208074903948`}, {-11.50718608453738, 15.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 28\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}], 
                    "\[CircleTimes]", "x2"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 28", 
            CircleTimes[$CellContext`x1, $CellContext`x2] == 
            CircleTimes[$CellContext`x1, 
              CircleTimes[
               
               CirclePlus[$CellContext`x1, $CellContext`x3], \
$CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-8.507186084530275, 
            15.383718162884655`}, {-8.88911021379204, 
            14.722208074903948`}, {-8.12526195526851, 
            14.722208074903948`}, {-8.507186084530275, 15.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 29\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CirclePlus]", "x1"}], ")"}]}], 
                    ")"}]}]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          
          Column[{"Critical Pair Lemma 29", 
            CircleTimes[$CellContext`x1, $CellContext`x2] == 
            CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               CirclePlus[$CellContext`x3, $CellContext`x1]]]}], 
          "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-8.507186084527717, 
            14.383718162884655`}, {-8.889110213789483, 
            13.722208074903948`}, {-8.125261955265952, 
            13.722208074903948`}, {-8.507186084527717, 14.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 30\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CirclePlus]", "x1"}], ")"}], 
                    "\[CircleTimes]", "x2"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{
           "Critical Pair Lemma 30", 
            CircleTimes[$CellContext`x1, $CellContext`x2] == 
            CircleTimes[$CellContext`x1, 
              CircleTimes[
               
               CirclePlus[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-11.821706137469647`, 
            14.383718162884655`}, {-12.203630266731412`, 
            13.722208074903948`}, {-11.439782008207882`, 
            13.722208074903948`}, {-11.821706137469647`, 
            14.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 31\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", "x3"}], "\[Equal]", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 31", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
            CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              CircleTimes[$CellContext`x3, $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-8.507186084529167, 
            13.383718162884655`}, {-8.889110213790932, 
            12.722208074903948`}, {-8.125261955267401, 
            12.722208074903948`}, {-8.507186084529167, 13.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 32\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", "x3"}], "\[Equal]", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 32", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
            CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], 
              CircleTimes[$CellContext`x2, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{0.8085463367303873, 13.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 18\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                   "_"]}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{
                   OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                 "_"]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 18", CirclePlus[$CellContext`x1, 
              OverBar[
               CircleTimes[
                OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-11.821706137469562`, 
            13.383718162884655`}, {-12.203630266731327`, 
            12.722208074903948`}, {-11.439782008207796`, 
            12.722208074903948`}, {-11.821706137469562`, 
            13.383718162884655`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 33\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", "x3"}], "\[Equal]", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}], 
                  "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 33", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
            CircleTimes[
              CircleTimes[$CellContext`x3, $CellContext`x1], 
              CircleTimes[$CellContext`x1, $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-8.507186084526154, 12.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 19\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", "x3"}], "\[Equal]", 
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}], 
                  "\[CircleTimes]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 19", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
            CircleTimes[
              
              CircleTimes[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-7.50718608451848, 
            11.383718162884655`}, {-7.889110213780245, 
            10.722208074903948`}, {-7.125261955256716, 
            10.722208074903948`}, {-7.50718608451848, 11.383718162884655`}}]},
          
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 34\""}, {
              RowBox[{
                RowBox[{
                  RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                  "\[CircleTimes]", "x3"}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 34", CircleTimes[
              CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
            CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x2, $CellContext`x3]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-3.5091080505764864, 10.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 20\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], ")"}]}], 
                "\[Equal]", 
                RowBox[{"x2", "\[CircleTimes]", 
                  OverscriptBox["x2", "_"]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 20", CircleTimes[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[
                CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
            CircleTimes[$CellContext`x2, 
              OverBar[$CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-3.5091080505722516`, 
            9.383718162884655}, {-3.891032179834016, 
            8.722208074903948}, {-3.127183921310487, 
            8.722208074903948}, {-3.5091080505722516`, 9.383718162884655}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 35\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    "_"]}]}], "\[Equal]", 
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 35", CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[
                CircleTimes[
                 OverBar[$CellContext`x1], $CellContext`x2]]]] == 
            CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[$CellContext`x2]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-1.5091080505424088, 8.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 21\""}, {
              RowBox[{
                RowBox[{"x1", "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    "_"]}]}], "\[Equal]", "x1"}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 21", CirclePlus[$CellContext`x1, 
              CircleTimes[$CellContext`x2, 
               OverBar[
                CircleTimes[
                 
                 OverBar[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-1.5091080505381171`, 
            7.383718162884656}, {-1.8910321797998817`, 
            6.722208074903948}, {-1.1271839212763526`, 
            6.722208074903948}, {-1.5091080505381171`, 7.383718162884656}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 36\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], 
                    "_"]}], ")"}]}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 36", CircleTimes[$CellContext`x1, 
              CirclePlus[$CellContext`x2, 
               OverBar[
                CircleTimes[
                 OverBar[$CellContext`x2], $CellContext`x1]]]] == 
            CircleTimes[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{-0.6001147210174338, 6.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 22\""}, {
              RowBox[{
                RowBox[{"x1", "\[CircleTimes]", 
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], 
                   "_"]}], "\[Equal]", 
                RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 22", CircleTimes[$CellContext`x1, 
              OverBar[
               CircleTimes[
                OverBar[$CellContext`x2], $CellContext`x1]]] == 
            CircleTimes[$CellContext`x1, $CellContext`x2]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{-0.6001147210174338, 
            5.383718162884656}, {-0.9820388502791983, 
            4.722208074903948}, {-0.21819059175566924`, 
            4.722208074903948}, {-0.6001147210174338, 5.383718162884656}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 37\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", 
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], 
                   "_"]}], "\[Equal]", 
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CirclePlus]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 37", CirclePlus[
              OverBar[$CellContext`x1], 
              OverBar[
               CircleTimes[
                OverBar[$CellContext`x2], $CellContext`x1]]] == CirclePlus[
              OverBar[$CellContext`x1], 
              CircleTimes[$CellContext`x1, $CellContext`x2]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{0.7904979771890623, 4.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 23\""}, {
              RowBox[{
                OverscriptBox[
                 RowBox[{
                   OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox["x2", "_"], "\[CirclePlus]", 
                  RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 23", OverBar[
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
              OverBar[$CellContext`x2], 
              CircleTimes[$CellContext`x2, $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{0.7904979771890908, 3.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 24\""}, {
              RowBox[{
                OverscriptBox[
                 RowBox[{
                   OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                "\[Equal]", 
                RowBox[{
                  OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 24", OverBar[
              CircleTimes[
               OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
              OverBar[$CellContext`x2], $CellContext`x1]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{7.490891949421922, 2.3837181628846555`}, {
            7.108967820160157, 1.7222080749039477`}, {7.8728160786836865`, 
            1.7222080749039477`}, {7.490891949421922, 2.3837181628846555`}}]},
          
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 38\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                "\[Equal]", 
                OverscriptBox[
                 RowBox[{
                   OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}], 
                 "_"]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 38", CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x2] == OverBar[
              CirclePlus[
               OverBar[$CellContext`x2], $CellContext`x1]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[47, 51], 0.9215686274509803], 
            NCache[
             Rational[98, 255], 0.3843137254901961], 
            NCache[
             Rational[53, 255], 0.20784313725490197`]], EdgeForm[None], 
           PolygonBox[{{9.490891949403988, 1.3837181628846558`}, {
            9.108967820142222, 0.7222080749039477}, {9.872816078665753, 
            0.7222080749039477}, {9.490891949403988, 1.3837181628846558`}}]},
          TagBox[
           GridBox[{{"\"Critical Pair Lemma 39\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["x1", "_"], "\[CircleTimes]", 
                  OverscriptBox["x2", "_"]}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{"x2", "\[CirclePlus]", "x1"}], "_"]}]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Critical Pair Lemma 39", CircleTimes[
              OverBar[$CellContext`x1], 
              OverBar[$CellContext`x2]] == OverBar[
              CirclePlus[$CellContext`x2, $CellContext`x1]]}], "Tooltip"]& ], 
        
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[15, 17], 0.8823529411764706], 
            NCache[
             Rational[52, 85], 0.611764705882353], 
            NCache[
             Rational[12, 85], 0.1411764705882353]], EdgeForm[None], 
           DiskBox[{10.490891949414305, 1.}, 0.3417206900744997]},
          TagBox[
           GridBox[{{"\"Substitution Lemma 25\""}, {
              RowBox[{
                RowBox[{
                  OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                  OverscriptBox["\[FormalA]", "_"]}], "\[Equal]", 
                OverscriptBox[
                 RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                 "_"]}]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
            DefaultBaseStyle -> "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Substitution Lemma 25", CircleTimes[
              OverBar[\[FormalB]], 
              OverBar[\[FormalA]]] == OverBar[
              CirclePlus[\[FormalA], \[FormalB]]]}], "Tooltip"]& ], 
        TagBox[
         TooltipBox[
          {RGBColor[
            NCache[
             Rational[13, 15], 0.8666666666666667], 
            NCache[
             Rational[1, 15], 0.06666666666666667], 0], EdgeForm[None], 
           RectangleBox[{9.698661144427776, -0.30151827604930503}, \
{10.301697696526388, 0.30151827604930503}]},
          TagBox[
           
           GridBox[{{"\"Conclusion 1\""}, {"True"}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}}, DefaultBaseStyle -> 
            "Column", 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
         Annotation[#, 
          Column[{"Conclusion 1", True}], "Tooltip"]& ]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.800933981155361*^9},
 CellLabel->"Out[15]=",ExpressionUUID->"2a50d148-9188-40ea-bd85-8c91461ddc26"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   RowBox[{
    TagBox["ProofObject",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquarePlusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[
              
              GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
               1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 
               0.}}, {{
                 GrayLevel[0.55], 
                 LineBox[{1, 6}], 
                 LineBox[{2, 5}], 
                 LineBox[{3, 5}], 
                 LineBox[{4, 10}], 
                 LineBox[{5, 6}], 
                 LineBox[{6, 7}], 
                 LineBox[{6, 8}], 
                 LineBox[{7, 9}], 
                 LineBox[{8, 9}], 
                 LineBox[{9, 10}], 
                 LineBox[{3, 7}]}, {
                 PointBox[1], 
                 PointBox[2], 
                 PointBox[3], 
                 PointBox[4], 
                 PointBox[5], 
                 PointBox[6], 
                 PointBox[7], 
                 PointBox[8], 
                 PointBox[9], 
                 PointBox[10]}}], FrameTicks -> None, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
              PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
              Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["72", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    OverscriptBox[
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                    "_"], "\[Equal]", 
                    RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}]}]}], Short[#, 1]& ], 
                   "SummaryItem"]}], "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource[
                "FEBitmaps", "SquareMinusIconMedium"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                Evaluator -> Automatic, Method -> "Preemptive"], 
              Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}]], 
             GraphicsBox[
              
              GraphicsComplexBox[{{0., 4.}, {1., 5.}, {-1., 5.}, {-2., 1.}, {
               1., 4.}, {0., 3.}, {-1., 2.}, {0., 2.}, {-1., 1.}, {-1., 
               0.}}, {{
                 GrayLevel[0.55], 
                 LineBox[{1, 6}], 
                 LineBox[{2, 5}], 
                 LineBox[{3, 5}], 
                 LineBox[{4, 10}], 
                 LineBox[{5, 6}], 
                 LineBox[{6, 7}], 
                 LineBox[{6, 8}], 
                 LineBox[{7, 9}], 
                 LineBox[{8, 9}], 
                 LineBox[{9, 10}], 
                 LineBox[{3, 7}]}, {
                 PointBox[1], 
                 PointBox[2], 
                 PointBox[3], 
                 PointBox[4], 
                 PointBox[5], 
                 PointBox[6], 
                 PointBox[7], 
                 PointBox[8], 
                 PointBox[9], 
                 PointBox[10]}}], FrameTicks -> None, FrameStyle -> 
              Directive[
                Thickness[Tiny], 
                GrayLevel[0.7]], PlotRange -> All, PlotRangeClipping -> True, 
              PlotRangePadding -> Scaled[0.1], Background -> GrayLevel[0.93], 
              Axes -> False, AspectRatio -> 1, ImageSize -> 
              Dynamic[{
                Automatic, 3.5 CurrentValue["FontCapHeight"]/
                 AbsoluteCurrentValue[Magnification]}], Frame -> True, 
              FrameTicks -> None, FrameStyle -> Directive[
                Opacity[0.5], 
                Thickness[Tiny], 
                RGBColor[0.368417, 0.506779, 0.709798]]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Logic: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"EquationalLogic\"", "SummaryItem"]}], 
                RowBox[{
                  TagBox["\"Steps: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["72", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Theorem: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    OverscriptBox[
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                    "_"], "\[Equal]", 
                    RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}]}]}], Short[#, 1]& ], 
                   "SummaryItem"]}], "\[SpanFromLeft]"}, {
                RowBox[{
                  TagBox["\"Axioms: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
                    "\[Equal]", 
                    
                    RowBox[{
                    "\[FormalB]", "\[CircleTimes]", "\[FormalA]"}]}]}], "&&", 
                    
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                    "\[Equal]", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}]}]}],
                     "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", 
                    OverscriptBox["\[FormalB]", "_"]}], ")"}]}], "\[Equal]", 
                    "\[FormalA]"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    RowBox[{"\[FormalA]", ",", "\[FormalB]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", 
                    RowBox[{"\[FormalB]", "\[CircleTimes]", 
                    OverscriptBox["\[FormalB]", "_"]}]}], "\[Equal]", 
                    "\[FormalA]"}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", 
                    "\[FormalC]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalC]"}], 
                    ")"}]}], "\[Equal]", 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CircleTimes]", "\[FormalB]"}], 
                    "\[CirclePlus]", 
                    
                    RowBox[{"\[FormalA]", "\[CircleTimes]", 
                    "\[FormalC]"}]}]}]}], "&&", 
                    RowBox[{
                    SubscriptBox["\[ForAll]", 
                    RowBox[{"{", 
                    
                    RowBox[{"\[FormalA]", ",", "\[FormalB]", ",", 
                    "\[FormalC]"}], "}"}]], 
                    RowBox[{
                    RowBox[{"\[FormalA]", "\[CirclePlus]", 
                    RowBox[{"\[FormalB]", "\[CircleTimes]", "\[FormalC]"}]}], 
                    "\[Equal]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                    ")"}], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalC]"}], 
                    ")"}]}]}]}]}], Short[#, 1]& ], "SummaryItem"]}], 
                "\[SpanFromLeft]"}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   ProofObject["EquationalLogic", 
    ForAll[{\[FormalA], \[FormalB]}, OverBar[
       CirclePlus[\[FormalB], \[FormalA]]] == CircleTimes[
       OverBar[\[FormalB]], 
       OverBar[\[FormalA]]]], 
    And[
     ForAll[{\[FormalA], \[FormalB]}, CircleTimes[\[FormalA], \[FormalB]] == 
      CircleTimes[\[FormalB], \[FormalA]]], 
     ForAll[{\[FormalA], \[FormalB]}, CirclePlus[\[FormalA], \[FormalB]] == 
      CirclePlus[\[FormalB], \[FormalA]]], 
     ForAll[{\[FormalA], \[FormalB]}, CircleTimes[\[FormalA], 
        CirclePlus[\[FormalB], 
         OverBar[\[FormalB]]]] == \[FormalA]], 
     ForAll[{\[FormalA], \[FormalB]}, CirclePlus[\[FormalA], 
        CircleTimes[\[FormalB], 
         OverBar[\[FormalB]]]] == \[FormalA]], 
     ForAll[{\[FormalA], \[FormalB], \[FormalC]}, CircleTimes[\[FormalA], 
        CirclePlus[\[FormalB], \[FormalC]]] == CirclePlus[
        CircleTimes[\[FormalA], \[FormalB]], 
        CircleTimes[\[FormalA], \[FormalC]]]], 
     ForAll[{\[FormalA], \[FormalB], \[FormalC]}, CirclePlus[\[FormalA], 
        CircleTimes[\[FormalB], \[FormalC]]] == CircleTimes[
        CirclePlus[\[FormalA], \[FormalB]], 
        CirclePlus[\[FormalA], \[FormalC]]]]], {{"Axiom", 1} -> 
     Association[
      "Statement" -> $CellContext`x1 == CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> Association[]], {
      "Axiom", 2} -> 
     Association["Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> Association[]], {
      "Axiom", 3} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x2, $CellContext`x1], "Proof" -> 
       Association[]], {"Axiom", 4} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[]], {"Axiom", 5} -> 
     Association["Statement" -> CircleTimes[
          CirclePlus[$CellContext`x1, $CellContext`x2], 
          CirclePlus[$CellContext`x1, $CellContext`x3]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[]], {"Axiom", 6} -> 
     Association[
      "Statement" -> 
       CirclePlus[$CellContext`x1, $CellContext`x2] == 
        CirclePlus[$CellContext`x2, $CellContext`x1], "Proof" -> 
       Association[]], {"Hypothesis", 1} -> 
     Association["Statement" -> CircleTimes[
          OverBar[\[FormalB]], 
          OverBar[\[FormalA]]] == OverBar[
          CirclePlus[\[FormalB], \[FormalA]]], "Proof" -> Association[]], {
      "CriticalPairLemma", 1} -> Association["Statement" -> CircleTimes[
          CirclePlus[$CellContext`x1, 
           OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
       "Proof" -> Association[
        "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, "Rule" -> 
         TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "Side" -> 1, "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 1}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 2} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           OverBar[$CellContext`x1]]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 3} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
          CircleTimes[$CellContext`x2, $CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 4} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x1]]] == 
        CirclePlus[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 1}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 5} -> Association["Statement" -> CirclePlus[
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
       "Proof" -> Association[
        "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, "Rule" -> 
         TwoWayRule[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 2}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 6} -> 
     Association[
      "Statement" -> 
       CirclePlus[$CellContext`x1, $CellContext`x2] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 1}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> $CellContext`x2), "Side" -> 1, "Subpattern" -> 
         CircleTimes[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 5}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "MatchingSide" -> 
         1]], {"CriticalPairLemma", 7} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 5}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> $CellContext`x2), "Side" -> 1, "Subpattern" -> 
         CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 4}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "MatchingSide" -> 
         1]], {"CriticalPairLemma", 8} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          OverBar[
           OverBar[$CellContext`x1]]] == $CellContext`x1, "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 2}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 9} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          OverBar[
           OverBar[
            OverBar[$CellContext`x1]]]] == CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 8}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 10} -> Association["Statement" -> CirclePlus[
          OverBar[
           OverBar[$CellContext`x1]], $CellContext`x1] == CirclePlus[
          OverBar[
           OverBar[$CellContext`x1]], 
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 9}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             OverBar[
              OverBar[
               Pattern[$CellContext`x1, 
                Blank[]]]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 1} -> Association["Statement" -> CirclePlus[
          OverBar[
           OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 10}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[
            OverBar[
             OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
            OverBar[$CellContext`x1]]]], {"SubstitutionLemma", 2} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          OverBar[
           OverBar[$CellContext`x1]]] == OverBar[
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 1}, "Position" -> 1, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            OverBar[
             OverBar[$CellContext`x1]]] == OverBar[
            OverBar[$CellContext`x1]]]], {"SubstitutionLemma", 3} -> 
     Association["Statement" -> $CellContext`x1 == OverBar[
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 2}, "Position" -> 1, 
         "Construct" -> {"CriticalPairLemma", 8}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> $CellContext`x1), 
         "OutputExpression" -> $CellContext`x1 == OverBar[
            OverBar[$CellContext`x1]]]], {"CriticalPairLemma", 11} -> 
     Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2] == CircleTimes[
          OverBar[$CellContext`x1], 
          CirclePlus[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 12} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 13} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 4}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 14} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CirclePlus[$CellContext`x1, $CellContext`x2]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 11}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "MatchingSide" -> 
         1]], {"SubstitutionLemma", 4} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CirclePlus[$CellContext`x1, $CellContext`x2]] == 
        CirclePlus[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 14}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            CirclePlus[$CellContext`x1, $CellContext`x2]] == 
          CirclePlus[$CellContext`x1, $CellContext`x2]]], {
      "CriticalPairLemma", 15} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]] == CircleTimes[
          CirclePlus[$CellContext`x1, $CellContext`x2], 
          CirclePlus[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 4}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 5} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 15}, "Position" -> 2, 
         "Construct" -> {"Axiom", 5}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
          CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]]], {
      "CriticalPairLemma", 16} -> Association["Statement" -> CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], 
          CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 12}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "MatchingSide" -> 
         1]], {"SubstitutionLemma", 6} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], 
          CirclePlus[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 16}, "Position" -> {1, 1}, 
         "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
            OverBar[
             OverBar[$CellContext`x1]], 
            CirclePlus[
             OverBar[$CellContext`x1], $CellContext`x2]]]], {
      "SubstitutionLemma", 7} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
          OverBar[
           OverBar[$CellContext`x1]], $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 6}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
            OverBar[
             OverBar[$CellContext`x1]], $CellContext`x2]]], {
      "SubstitutionLemma", 8} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 7}, "Position" -> {2, 1}, 
         "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x1, $CellContext`x2]] == 
          CircleTimes[$CellContext`x1, $CellContext`x2]]], {
      "CriticalPairLemma", 17} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
        CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 9} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[
           CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
        CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 17}, "Position" -> 2, 
         "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CircleTimes[$CellContext`x1, 
            CirclePlus[
             CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
          CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]]], {
      "CriticalPairLemma", 18} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           CircleTimes[$CellContext`x1, $CellContext`x3]]] == CirclePlus[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x1, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 8}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 10} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
        CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 18}, "Position" -> 2, 
         "Construct" -> {"Axiom", 4}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, 
             CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
          CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]]], {
      "CriticalPairLemma", 19} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]] == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 5}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 2}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 11} -> 
     Association["Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 19}, "Position" -> 1, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), 
         "OutputExpression" -> $CellContext`x1 == 
          CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
      "CriticalPairLemma", 20} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]] == CircleTimes[$CellContext`x2, 
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
         CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingConstruct" -> {"CriticalPairLemma", 5}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> $CellContext`x2), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 21} -> 
     Association["Statement" -> $CellContext`x1 == CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
         CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 22} -> 
     Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x2, $CellContext`x1]] == CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x1], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 11}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CirclePlus[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 23} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]] == 
        CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 7}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 21}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 12} -> Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x2, $CellContext`x1]] == 
        CircleTimes[$CellContext`x1, 
          OverBar[$CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 22}, "Position" -> 2, 
         "Construct" -> {"Axiom", 3}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CircleTimes[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CircleTimes[
            OverBar[$CellContext`x1], 
            CircleTimes[$CellContext`x2, $CellContext`x1]] == 
          CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]]], {"CriticalPairLemma", 24} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]]] == CircleTimes[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 12}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "Side" -> 1, "Subpattern" -> 
         CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 13} -> Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
        CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 24}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 20}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]), "OutputExpression" -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], 
            OverBar[
             CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
          CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]]], {"CriticalPairLemma", 25} -> 
     Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          OverBar[$CellContext`x2]] == CirclePlus[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 13}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 12}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 14} -> Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[$CellContext`x1, $CellContext`x2]], 
          OverBar[$CellContext`x2]] == OverBar[
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 25}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[
            OverBar[
             CircleTimes[$CellContext`x1, $CellContext`x2]], 
            OverBar[$CellContext`x2]] == OverBar[
            CircleTimes[$CellContext`x1, $CellContext`x2]]]], {
      "CriticalPairLemma", 26} -> Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
        CirclePlus[
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]], 
          CircleTimes[$CellContext`x1, 
           OverBar[$CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 13}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 23}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            OverBar[$CellContext`x1]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 15} -> Association["Statement" -> CirclePlus[
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
        OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 26}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[
            OverBar[
             CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
          OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]], {
      "SubstitutionLemma", 16} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], 
          OverBar[
           CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 14}, "Position" -> 1, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CirclePlus[
            OverBar[$CellContext`x1], 
            OverBar[
             CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
            CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
      "CriticalPairLemma", 27} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           CircleTimes[$CellContext`x2, $CellContext`x3]]] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 9}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             CircleTimes[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x2, 
            CirclePlus[$CellContext`x1, $CellContext`x3]]), "MatchingSide" -> 
         1]], {"SubstitutionLemma", 17} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x1, $CellContext`x3]]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 27}, "Position" -> {1, 2}, 
         "Construct" -> {"CriticalPairLemma", 21}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> $CellContext`x1), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, $CellContext`x2] == 
          CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             CirclePlus[$CellContext`x1, $CellContext`x3]]]]], {
      "CriticalPairLemma", 28} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[
           CirclePlus[$CellContext`x1, $CellContext`x3], $CellContext`x2]], 
       "Proof" -> Association[
        "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x2, 
            Blank[]], 
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 29} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           CirclePlus[$CellContext`x3, $CellContext`x1]]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 17}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 30} -> 
     Association[
      "Statement" -> 
       CircleTimes[$CellContext`x1, $CellContext`x2] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[
           CirclePlus[$CellContext`x3, $CellContext`x1], $CellContext`x2]], 
       "Proof" -> Association[
        "Construct" -> {"CriticalPairLemma", 28}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             CirclePlus[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x2, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x3]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 6}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CirclePlus[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"CriticalPairLemma", 31} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x3, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 29}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CirclePlus[
              Pattern[$CellContext`x3, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x3, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"CriticalPairLemma", 21}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "CriticalPairLemma", 32} -> Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 30}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             CirclePlus[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[$CellContext`x1, $CellContext`x3]), 
         "Side" -> 1, "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 11}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 18} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 15}, "Position" -> 1, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CirclePlus[$CellContext`x1, 
            OverBar[
             CircleTimes[
              OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]], {
      "CriticalPairLemma", 33} -> Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x3, $CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 31}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x3, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]]] -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x3, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 19} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[
          CircleTimes[$CellContext`x3, $CellContext`x1], $CellContext`x2], 
       "Proof" -> Association[
        "Input" -> {"CriticalPairLemma", 33}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 32}, "Orientation" -> -1, 
         "Rule" -> (CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             Pattern[$CellContext`x3, 
              Blank[]]]] -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]), 
         "OutputExpression" -> CircleTimes[
            CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
          CircleTimes[
            
            CircleTimes[$CellContext`x3, $CellContext`x1], \
$CellContext`x2]]], {"CriticalPairLemma", 34} -> 
     Association["Statement" -> CircleTimes[
          CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
        CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, $CellContext`x3]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 19}, "Orientation" -> {-1, 1}, 
         "Rule" -> TwoWayRule[
           CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]], 
           CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x3, 
              Blank[]], 
             Pattern[$CellContext`x1, 
              Blank[]]], 
            Pattern[$CellContext`x2, 
             Blank[]]]], "Side" -> 1, "Subpattern" -> CircleTimes[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           Pattern[$CellContext`x3, 
            Blank[]]], "MatchingConstruct" -> {"Axiom", 3}, 
         "MatchingOrientation" -> {-1, 1}, "MatchingRule" -> TwoWayRule[
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]], 
           CircleTimes[
            Pattern[$CellContext`x2, 
             Blank[]], 
            Pattern[$CellContext`x1, 
             Blank[]]]], "MatchingSide" -> 1]], {"SubstitutionLemma", 20} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[
            CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
        CircleTimes[$CellContext`x2, 
          OverBar[$CellContext`x2]], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 13}, "Position" -> 1, 
         "Construct" -> {"CriticalPairLemma", 34}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]], 
            Pattern[$CellContext`x3, 
             Blank[]]] -> CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x2, $CellContext`x3]]), 
         "OutputExpression" -> CircleTimes[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             OverBar[
              CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
          CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]]], {"CriticalPairLemma", 35} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]] == 
        CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[$CellContext`x2]]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 6}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[$CellContext`x1, $CellContext`x2]), 
         "Side" -> 1, "Subpattern" -> CircleTimes[
           OverBar[
            Pattern[$CellContext`x1, 
             Blank[]]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 20}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              CircleTimes[
               Pattern[$CellContext`x1, 
                Blank[]], 
               Pattern[$CellContext`x2, 
                Blank[]]]]]] -> CircleTimes[$CellContext`x2, 
            OverBar[$CellContext`x2]]), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 21} -> 
     Association["Statement" -> CirclePlus[$CellContext`x1, 
          CircleTimes[$CellContext`x2, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]]] == $CellContext`x1,
        "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 35}, "Position" -> 2, 
         "Construct" -> {"Axiom", 2}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> $CellContext`x1), "OutputExpression" -> 
         CirclePlus[$CellContext`x1, 
            CircleTimes[$CellContext`x2, 
             OverBar[
              CircleTimes[
               
               OverBar[$CellContext`x1], $CellContext`x2]]]] == \
$CellContext`x1]], {"CriticalPairLemma", 36} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          CirclePlus[$CellContext`x2, 
           OverBar[
            CircleTimes[
             OverBar[$CellContext`x2], $CellContext`x1]]]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 10}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CirclePlus[
             Pattern[$CellContext`x2, 
              Blank[]], 
             CircleTimes[
              Pattern[$CellContext`x1, 
               Blank[]], 
              Pattern[$CellContext`x3, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, 
            CirclePlus[$CellContext`x2, $CellContext`x3]]), "Side" -> 1, 
         "Subpattern" -> CirclePlus[
           Pattern[$CellContext`x2, 
            Blank[]], 
           CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x3, 
             Blank[]]]], "MatchingConstruct" -> {"SubstitutionLemma", 21}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            CircleTimes[
             Pattern[$CellContext`x2, 
              Blank[]], 
             OverBar[
              CircleTimes[
               OverBar[
                Pattern[$CellContext`x1, 
                 Blank[]]], 
               Pattern[$CellContext`x2, 
                Blank[]]]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 22} -> 
     Association["Statement" -> CircleTimes[$CellContext`x1, 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]]] == 
        CircleTimes[$CellContext`x1, $CellContext`x2], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 36}, "Position" -> {1, 2}, 
         "Construct" -> {"SubstitutionLemma", 18}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             CircleTimes[
              OverBar[
               Pattern[$CellContext`x1, 
                Blank[]]], 
              Pattern[$CellContext`x2, 
               Blank[]]]]] -> OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]]), "OutputExpression" -> 
         CircleTimes[$CellContext`x1, 
            OverBar[
             CircleTimes[
              OverBar[$CellContext`x2], $CellContext`x1]]] == 
          CircleTimes[$CellContext`x1, $CellContext`x2]]], {
      "CriticalPairLemma", 37} -> Association["Statement" -> CirclePlus[
          OverBar[$CellContext`x1], 
          OverBar[
           CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]]] == CirclePlus[
          OverBar[$CellContext`x1], 
          CircleTimes[$CellContext`x1, $CellContext`x2]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "Side" -> 1, 
         "Subpattern" -> CircleTimes[
           Pattern[$CellContext`x1, 
            Blank[]], 
           Pattern[$CellContext`x2, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 22}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (CircleTimes[
            Pattern[$CellContext`x1, 
             Blank[]], 
            OverBar[
             CircleTimes[
              OverBar[
               Pattern[$CellContext`x2, 
                Blank[]]], 
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> CircleTimes[$CellContext`x1, $CellContext`x2]), 
         "MatchingSide" -> 1]], {"SubstitutionLemma", 23} -> 
     Association["Statement" -> OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
          OverBar[$CellContext`x2], 
          CircleTimes[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Input" -> {"CriticalPairLemma", 37}, "Position" -> 1, 
         "Construct" -> {"SubstitutionLemma", 16}, "Orientation" -> 1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            OverBar[
             CircleTimes[
              Pattern[$CellContext`x2, 
               Blank[]], 
              Pattern[$CellContext`x1, 
               Blank[]]]]] -> OverBar[
            CircleTimes[$CellContext`x2, $CellContext`x1]]), 
         "OutputExpression" -> OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
            OverBar[$CellContext`x2], 
            CircleTimes[$CellContext`x2, $CellContext`x1]]]], {
      "SubstitutionLemma", 24} -> Association["Statement" -> OverBar[
          CircleTimes[
           OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
          OverBar[$CellContext`x2], $CellContext`x1], "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 23}, "Position" -> 2, 
         "Construct" -> {"CriticalPairLemma", 12}, "Orientation" -> -1, 
         "Rule" -> (CirclePlus[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            CircleTimes[
             Pattern[$CellContext`x1, 
              Blank[]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x1], $CellContext`x2]), "OutputExpression" -> 
         OverBar[
            CircleTimes[
             OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
            OverBar[$CellContext`x2], $CellContext`x1]]], {
      "CriticalPairLemma", 38} -> Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2] == OverBar[
          CirclePlus[
           OverBar[$CellContext`x2], $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"SubstitutionLemma", 3}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "Side" -> 1, "Subpattern" -> 
         OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 24}, 
         "MatchingOrientation" -> 1, "MatchingRule" -> (OverBar[
            CircleTimes[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CirclePlus[
            OverBar[$CellContext`x2], $CellContext`x1]), "MatchingSide" -> 
         1]], {"CriticalPairLemma", 39} -> 
     Association["Statement" -> CircleTimes[
          OverBar[$CellContext`x1], 
          OverBar[$CellContext`x2]] == OverBar[
          CirclePlus[$CellContext`x2, $CellContext`x1]], "Proof" -> 
       Association[
        "Construct" -> {"CriticalPairLemma", 38}, "Orientation" -> -1, 
         "Rule" -> (OverBar[
            CirclePlus[
             OverBar[
              Pattern[$CellContext`x1, 
               Blank[]]], 
             Pattern[$CellContext`x2, 
              Blank[]]]] -> CircleTimes[
            OverBar[$CellContext`x2], $CellContext`x1]), "Side" -> 1, 
         "Subpattern" -> OverBar[
           Pattern[$CellContext`x1, 
            Blank[]]], "MatchingConstruct" -> {"SubstitutionLemma", 3}, 
         "MatchingOrientation" -> -1, "MatchingRule" -> (OverBar[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]]] -> $CellContext`x1), "MatchingSide" -> 1]], {
      "SubstitutionLemma", 25} -> Association["Statement" -> CircleTimes[
          OverBar[\[FormalB]], 
          OverBar[\[FormalA]]] == OverBar[
          CirclePlus[\[FormalA], \[FormalB]]], "Proof" -> 
       Association[
        "Input" -> {"Hypothesis", 1}, "Position" -> {2, 1}, 
         "Construct" -> {"Axiom", 6}, "Orientation" -> {-1, 1}, 
         "Rule" -> (CirclePlus[
            Pattern[$CellContext`x1, 
             Blank[]], 
            Pattern[$CellContext`x2, 
             Blank[]]] -> CirclePlus[$CellContext`x2, $CellContext`x1]), 
         "OutputExpression" -> CircleTimes[
            OverBar[\[FormalB]], 
            OverBar[\[FormalA]]] == OverBar[
            CirclePlus[\[FormalA], \[FormalB]]]]], {"Conclusion", 1} -> 
     Association[
      "Statement" -> True, "Proof" -> 
       Association[
        "Input" -> {"SubstitutionLemma", 25}, "Position" -> 1, 
         "Construct" -> {"CriticalPairLemma", 39}, "Orientation" -> 1, 
         "Rule" -> (CircleTimes[
            OverBar[
             Pattern[$CellContext`x1, 
              Blank[]]], 
            OverBar[
             Pattern[$CellContext`x2, 
              Blank[]]]] -> OverBar[
            CirclePlus[$CellContext`x2, $CellContext`x1]]), 
         "OutputExpression" -> True]]}],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "[", "\"\<ProofNotebook\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.800933992945277*^9, 3.8009339958621473`*^9}},
 CellLabel->"In[16]:=",ExpressionUUID->"b4920238-fca6-4985-84dc-f8988789a922"],

Cell[BoxData[
 InterpretationBox[
  PanelBox[GridBox[{
     {
      TooltipBox[
       ButtonBox[
        StyleBox[
         DynamicBox[FEPrivate`FrontEndResource[
          "FEBitmaps", "ManipulatePasteIcon"],
          ImageSizeCache->{20., {7., 13.}}],
         DynamicUpdating->True],
        Appearance->{Automatic, None, "Normal", Automatic},
        ButtonFunction:>FrontEndExecute[{
           FrontEnd`NotebookPut[
            Notebook[{
              Cell["Axiom 1", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    OverscriptBox["x2", "_"]}], ")"}]}]}]], "Code"], 
              Cell["Axiom 2", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]}]], "Code"], 
              Cell["Axiom 3", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                  RowBox[{"x2", "\[CircleTimes]", "x1"}]}]], "Code"], 
              Cell["Axiom 4", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
              Cell["Axiom 5", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
              Cell["Axiom 6", "Subsection"], 
              Cell["We are given that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", "x2"}], "\[Equal]", 
                  RowBox[{"x2", "\[CirclePlus]", "x1"}]}]], "Code"], 
              Cell["Hypothesis 1", "Subsection"], 
              Cell["We would like to show that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}], "\[Equal]", 
                  OverscriptBox[
                   RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], 
                   "_"]}]], "Code"], 
              Cell["Critical Pair Lemma 1", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    OverscriptBox["x1", "_"]}], ")"}], "\[CircleTimes]", 
                    "x2"}], "\[Equal]", "x2"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], DisplayForm]],
                   "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CirclePlus]", 
                    OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Axiom 3 and Axiom 1 \
respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 2", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    OverscriptBox["x1", "_"]}], ")"}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Axiom 4 and Axiom 2 \
respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 3", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], DisplayForm]],
                   "Code"], 
                 Cell[
                 "where these rules follow from Axiom 4 and Axiom 3 \
respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 4", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}], DisplayForm]],
                   "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CirclePlus]", 
                    OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Axiom 5 and Axiom 1 \
respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 5", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}], "\[CirclePlus]", "x2"}], 
                  "\[Equal]", "x2"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
                    
                    RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Axiom 6 and Axiom 2 \
respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 6", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", "x2"}], "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", 
                    OverscriptBox["x1_", "_"]}], ")"}], "\[CircleTimes]", 
                    "x2_"}], "\[Rule]", "x2"}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", 
                    OverscriptBox["x1_", "_"]}], ")"}], "\[CircleTimes]", 
                    "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}], DisplayForm]],
                   "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 1 and \
Axiom 5 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 7", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                    ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}], 
                    "\[Rule]", "x2"}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 5 and \
Axiom 4 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 8", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"]}], "\[Equal]", "x1"}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 6 and \
Axiom 2 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 9", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox[
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "_"]}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], 
                    ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 7 and \
Critical Pair Lemma 8 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 10", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", "x1"}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x1_", "_"]}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x1_", "_"]}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    OverscriptBox[
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "_"]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 4 and \
Critical Pair Lemma 9 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 1", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", "x1"}], 
                  "\[Equal]", 
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 10, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 2", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"]}], "\[Equal]", 
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 1, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
                    RowBox[{"x2", "\[CirclePlus]", "x1"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 6.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 3", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  OverscriptBox[
                   OverscriptBox["x1", "_"], "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 2, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 8.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 11", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], 
                    ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   OverscriptBox["x1_", "_"]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 7 and \
Substitution Lemma 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 12", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   OverscriptBox["x1_", "_"]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 6 and \
Substitution Lemma 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 13", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x1_", "_"]}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   OverscriptBox["x1_", "_"]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 4 and \
Substitution Lemma 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 14", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 6 and \
Critical Pair Lemma 11 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 4", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 14, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 6.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 15", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                  "\[Equal]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}], DisplayForm]],
                   "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", "x3_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Axiom 5 and Substitution \
Lemma 4 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 5", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 15, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}], DisplayForm]],
                   "Code"], 
                 Cell["which follows from Axiom 5.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 16", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                    ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 11 and \
Critical Pair Lemma 12 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 6", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], 
                    ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 16, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 3.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 7", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
                    "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 6, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 11.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 8", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 7, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 3.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 17", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    "x3"}], ")"}]}], "\[Equal]", 
                  RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Axiom 4 and Substitution \
Lemma 8 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 9", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    "x3"}], ")"}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 17, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 4.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 18", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CircleTimes]", "x3_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Axiom 4 and Substitution \
Lemma 8 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 10", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 18, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 4.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 19", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}], DisplayForm]],
                   "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CirclePlus]", 
                    OverscriptBox["x1_", "_"]}], ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 5 and \
Critical Pair Lemma 2 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 11", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 19, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 20", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}], "\[Equal]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}], ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}], 
                    "\[Rule]", "x2"}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 11 and \
Critical Pair Lemma 5 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 21", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{"x1", "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], DisplayForm]],
                   "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 11 and \
Axiom 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 22", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x1"}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 11 and \
Substitution Lemma 11 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 23", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    ")"}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], 
                    ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 7 and \
Critical Pair Lemma 21 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 12", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 22, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[Rule]", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 3.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 24", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}], ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 12 and \
Substitution Lemma 12 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 13", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], 
                  "\[Equal]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 24, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 20.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 25", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                    "\[CirclePlus]", 
                    OverscriptBox["x2", "_"]}], "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                    "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 13 and \
Substitution Lemma 12 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 14", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], 
                    "\[CirclePlus]", 
                    OverscriptBox["x2", "_"]}], "\[Equal]", 
                  OverscriptBox[
                   RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 25, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 26", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                    "\[CirclePlus]", "x1"}], "\[Equal]", 
                  RowBox[{
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                    "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], 
                    ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox["x1", "_"]}]}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 13 and \
Critical Pair Lemma 23 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 15", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                    "\[CirclePlus]", "x1"}], "\[Equal]", 
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                   "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 26, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 16", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}], 
                  "\[Equal]", 
                  OverscriptBox[
                   RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 14, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
                    RowBox[{"x2", "\[CirclePlus]", "x1"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 6.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 27", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}]}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], 
                    ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]",
                     "x3_"}], ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]",
                     "x3_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 9 and \
Critical Pair Lemma 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 17", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], 
                    ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 27, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 21.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 28", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}], 
                    "\[CircleTimes]", "x2"}], ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], ")"}]}],
                     "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], DisplayForm]],
                   "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 17 and \
Axiom 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 29", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CirclePlus]", "x1"}], ")"}]}], 
                    ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], ")"}]}],
                     "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", "x3_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
                    
                    RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 17 and \
Axiom 6 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 30", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CirclePlus]", "x1"}], ")"}], 
                    "\[CircleTimes]", "x2"}], ")"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                    "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
                    
                    RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 28 and \
Axiom 6 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 31", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}], "\[Equal]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x3_", "\[CirclePlus]", "x1_"}], ")"}]}], ")"}]}],
                     "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x3_", "\[CirclePlus]", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 29 and \
Critical Pair Lemma 21 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 32", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}], "\[Equal]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CirclePlus]", "x1_"}], ")"}], 
                    "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x3"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CirclePlus]", "x1_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
                    "x1"}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 30 and \
Substitution Lemma 11 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 18", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    "_"]}], "\[Equal]", 
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                   "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 15, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
                    RowBox[{"x2", "\[CirclePlus]", "x1"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 6.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 33", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}], "\[Equal]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}]}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}]}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], DisplayForm]],
                   "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 31 and \
Axiom 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 19", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}], "\[Equal]", 
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}], 
                    "\[CircleTimes]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 33, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
                    "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", "x3_"}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}]}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 32.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 34", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
                    "\[CircleTimes]", "x3"}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
                    "\[CircleTimes]", "x3_"}], "\[TwoWayRule]", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}], 
                    "\[CircleTimes]", "x2_"}]}], DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
                    "\[CircleTimes]", "x3_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], DisplayForm]],
                   "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 19 and \
Axiom 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 20", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], ")"}]}], 
                  "\[Equal]", 
                  RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 13, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
                    "\[CircleTimes]", "x3_"}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 34.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 35", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    "_"]}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CirclePlus]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]], 
                  "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "_"]}], ")"}]}],
                     "\[Rule]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}]}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 6 and \
Substitution Lemma 20 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 21", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    "_"]}]}], "\[Equal]", "x1"}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 35, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["which follows from Axiom 2.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 36", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], 
                    "_"]}], ")"}]}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2_", "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], ")"}]}], 
                    "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", 
                    RowBox[{"(", 
                    RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x2_", "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    RowBox[{"x2_", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], 
                    "_"]}]}], "\[Rule]", "x1"}], DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 10 and \
Substitution Lemma 21 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 22", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{"x1", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], 
                    "_"]}], "\[Equal]", 
                  RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 36, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], 
                    "_"]}], "\[Rule]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                    "_"]}], DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 18.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 37", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], 
                    "_"]}], "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CircleTimes]", 
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x2_", "_"], "\[CircleTimes]", "x1_"}], 
                    "_"]}], "\[Rule]", 
                    RowBox[{"x1", "\[CircleTimes]", "x2"}]}], DisplayForm]], 
                  "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 12 and \
Substitution Lemma 22 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 23", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x2", "_"], "\[CirclePlus]", 
                    RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Critical Pair Lemma 37, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", 
                    OverscriptBox[
                    RowBox[{"x2_", "\[CircleTimes]", "x1_"}], "_"]}], 
                    "\[Rule]", 
                    OverscriptBox[
                    RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Substitution Lemma 16.", "CodeText"]}, {
                1}]], 
              Cell["Substitution Lemma 24", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
                  "\[Equal]", 
                  RowBox[{
                    OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}]}]], 
               "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Substitution Lemma 23, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", 
                    RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 12.", "CodeText"]}, {
                1}]], 
              Cell["Critical Pair Lemma 38", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], 
                  "\[Equal]", 
                  OverscriptBox[
                   RowBox[{
                    OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}], 
                   "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   OverscriptBox["x1_", "_"]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], 
                    "_"], "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Substitution Lemma 3 and \
Substitution Lemma 24 respectively.", "CodeText"]}, {1}]], 
              Cell["Critical Pair Lemma 39", "Subsection"], 
              Cell["The following expressions are equivalent:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["x1", "_"], "\[CircleTimes]", 
                    OverscriptBox["x2", "_"]}], "\[Equal]", 
                  OverscriptBox[
                   RowBox[{"x2", "\[CirclePlus]", "x1"}], "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell["Note that the input for the rule:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], "_"],
                     "\[Rule]", 
                    RowBox[{
                    OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}]}], 
                    DisplayForm]], "Code"], 
                 Cell["contains a subpattern of the form:", "CodeText"], 
                 Cell[
                  BoxData[
                   OverscriptBox["x1_", "_"]], "Code"], 
                 Cell[
                 "which can be unified with the input for the rule:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    OverscriptBox[
                    OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "where these rules follow from Critical Pair Lemma 38 and \
Substitution Lemma 3 respectively.", "CodeText"]}, {1}]], 
              Cell["Substitution Lemma 25", "Subsection"], 
              Cell["It can be shown that:", "CodeText"], 
              Cell[
               BoxData[
                RowBox[{
                  RowBox[{
                    OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
                    OverscriptBox["\[FormalA]", "_"]}], "\[Equal]", 
                  OverscriptBox[
                   RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], 
                   "_"]}]], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "We start by taking Hypothesis 1, and apply the \
substitution:", "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
                    RowBox[{"x2", "\[CirclePlus]", "x1"}]}], DisplayForm]], 
                  "Code"], 
                 Cell["which follows from Axiom 6.", "CodeText"]}, {1}]], 
              Cell["Conclusion 1", "Subsection"], 
              Cell["We obtain the conclusion:", "CodeText"], 
              Cell[
               BoxData["True"], "Code"], 
              Cell[
               CellGroupData[{
                 Cell[
                 "Proof", "Subsubsection", 
                  FontVariations -> {"CapsType" -> "SmallCaps"}], 
                 Cell[
                 "Take Substitution Lemma 25, and apply the substitution:", 
                  "CodeText"], 
                 Cell[
                  BoxData[
                   TagBox[
                    RowBox[{
                    RowBox[{
                    OverscriptBox["x1_", "_"], "\[CircleTimes]", 
                    OverscriptBox["x2_", "_"]}], "\[Rule]", 
                    OverscriptBox[
                    RowBox[{"x2", "\[CirclePlus]", "x1"}], "_"]}], 
                    DisplayForm]], "Code"], 
                 Cell[
                 "which follows from Critical Pair Lemma 39.", "CodeText"]}, {
                1}]]}]]}],
        DefaultBaseStyle->{},
        Evaluator->None,
        Method->"Queued"],
       DynamicBox[
        ToBoxes[
         FEPrivate`FrontEndResource["FEStrings", "NotebookInNewWindow"]]]]},
     {
      ItemBox[GridBox[{
         {Cell[
          "Axiom 1", "Subsection",ExpressionUUID->
           "7bbebcf7-15a9-4881-8c13-81ebeb507516"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "834033ca-da2d-40a6-9f30-d6368052c60a"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", 
               OverscriptBox["x2", "_"]}], ")"}]}]}]], "Code",ExpressionUUID->
           "7834460b-e8b6-47e7-bcab-0bef67a81cb6"]},
         {Cell[
          "Axiom 2", "Subsection",ExpressionUUID->
           "2f5ed7c9-92cb-41fc-ab7e-1d4042feeb3b"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "7301a95c-0ffb-4d75-b705-08449001d6d6"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x2", "_"]}]}]}]], "Code",ExpressionUUID->
           "50016348-7593-413a-a7d6-f40f906918fc"]},
         {Cell[
          "Axiom 3", "Subsection",ExpressionUUID->
           "a9dcfe5d-3b68-4fb8-8e84-c915d62a41c0"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "fe2fa246-63ca-400f-90f6-6b91c0244ac7"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{"x2", "\[CircleTimes]", "x1"}]}]], "Code",ExpressionUUID->
           "e6fb49cb-829c-4be5-8500-ffc2ddaf729d"]},
         {Cell[
          "Axiom 4", "Subsection",ExpressionUUID->
           "3f47cf6b-e1c9-492a-83e2-74384c264181"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "adf7eeba-725b-456c-8d47-0d4557bda6d8"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}], "\[Equal]", 
            RowBox[{
             RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code",
           ExpressionUUID->"733bc481-523a-4193-88d8-71d3b60dc283"]},
         {Cell[
          "Axiom 5", "Subsection",ExpressionUUID->
           "32eb79b5-d76a-4aba-9162-262e37d74bb7"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "e7631dd5-c0f5-4ec1-826e-de0e16050122"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}], "\[CircleTimes]", 
             
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code",
           ExpressionUUID->"33328f93-5546-4c97-adea-2dc5cd8bd5d8"]},
         {Cell[
          "Axiom 6", "Subsection",ExpressionUUID->
           "8fb10117-6c62-47df-bfd6-045fee82f4c2"]},
         {Cell[
          "We are given that:", "CodeText",ExpressionUUID->
           "88aed2ce-0f55-434c-9233-ccdc03ce7112"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", "x2"}], "\[Equal]", 
            RowBox[{"x2", "\[CirclePlus]", "x1"}]}]], "Code",ExpressionUUID->
           "54ba5b6b-9378-42a1-938d-1ae4fdb73ac1"]},
         {Cell[
          "Hypothesis 1", "Subsection",ExpressionUUID->
           "857f245c-41a1-470e-836d-046f73e44bac"]},
         {Cell[
          "We would like to show that:", "CodeText",ExpressionUUID->
           "e86e6e71-ff7b-4ac0-8a98-6e4148bd5164"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
             OverscriptBox["\[FormalA]", "_"]}], "\[Equal]", 
            OverscriptBox[
             RowBox[{"\[FormalB]", "\[CirclePlus]", "\[FormalA]"}], "_"]}]], 
           "Code",ExpressionUUID->"6cd72175-315a-438d-9579-601618120bc2"]},
         {Cell[
          "Critical Pair Lemma 1", "Subsection",ExpressionUUID->
           "afe387d0-ef1f-49f3-9738-1087d46d4fdc"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"43ef8e5a-ddf3-4a45-a6d1-3ac4432516dd"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", 
               OverscriptBox["x1", "_"]}], ")"}], "\[CircleTimes]", "x2"}], 
            "\[Equal]", "x2"}]], "Code",ExpressionUUID->
           "fcbb9623-bb68-42dd-a5d2-a9b8ce910d42"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "5f78b821-412b-4fce-989f-5230125e71ac"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "26a44bbd-d806-4354-9aa0-9309e4f802fa"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "ee85d5fb-d270-4d78-a259-e5669a927557"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "6d6a2556-5668-41c0-b774-da7a4ca30396"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code",ExpressionUUID->
           "0462fef0-582e-4c57-82c0-d6c13f3996a8"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"42ecdf37-ea87-4bc4-b658-f79b6dd19fe0"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CirclePlus]", 
                OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "4fdfc0c3-f33f-4d8e-9b7e-40f4354ece5b"]},
         {Cell["\<\
where these rules follow from Axiom 3 and Axiom 1 respectively.\
\>", "CodeText",ExpressionUUID->"30ef1ab8-fa2c-4ef2-b2da-3988f2da42eb"]},
         {Cell[
          "Critical Pair Lemma 2", "Subsection",ExpressionUUID->
           "18afba86-0eef-4f41-855e-bacac60aaef2"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"38b19174-5c36-4a85-8a9f-96fe64f2fc35"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", 
               OverscriptBox["x1", "_"]}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code",ExpressionUUID->
           "a3e13c7f-9768-4651-a942-e6f9c234d39d"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "53604704-c9e7-49d4-b5c8-c6ff7b86a106"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "930b62fe-5773-4958-aab5-bb5746ef6cf9"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "7fd061bc-dbc9-4b8f-b22d-66693c30a57e"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "3d9a388e-0e81-43be-bb6b-adae09db6b94"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}]], "Code",
           ExpressionUUID->"c3bcc6d9-ed64-4d24-95f8-c332a54044ff"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"15393e6c-0c31-425c-aba2-6026a8be6b6e"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "7d3c3b57-d495-4b25-b41d-3e77fa2aeb5a"]},
         {Cell["\<\
where these rules follow from Axiom 4 and Axiom 2 respectively.\
\>", "CodeText",ExpressionUUID->"4a9f4b6b-f741-470b-ad2d-f953dd1b5d09"]},
         {Cell[
          "Critical Pair Lemma 3", "Subsection",ExpressionUUID->
           "b9df0534-e741-4cbe-a08f-5ebb9d7c65ec"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"3387928c-2f48-44dc-8f1a-a955bf73e655"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}], "\[Equal]", 
            RowBox[{
             RowBox[{"x2", "\[CircleTimes]", "x1"}], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code",
           ExpressionUUID->"79f81f19-8d38-4585-a881-06f7b9dac7a3"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "61c19e54-fd3b-43e4-a496-df122d2681bd"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "85a89c68-f0d8-484b-9b53-e2566ff92c54"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "abd47b1a-b3ee-418f-9264-51668e977c60"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "baeb8b18-259c-4348-8881-60cd5ada2153"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code",ExpressionUUID->
           "adee9c94-d982-4d0a-adce-03c36560be74"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"a3360dc3-c549-4f4b-bc9b-75d852942039"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "0f5728a1-da8b-4435-af73-046040d8147e"]},
         {Cell["\<\
where these rules follow from Axiom 4 and Axiom 3 respectively.\
\>", "CodeText",ExpressionUUID->"0d1d46db-971c-4967-96f9-28fae9ad2a0c"]},
         {Cell[
          "Critical Pair Lemma 4", "Subsection",ExpressionUUID->
           "054f4a82-639e-49eb-85dc-63d0d1b76a51"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"edac614f-1779-45f2-aadc-456c50e42a18"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code",ExpressionUUID->
           "b75d35c0-6c38-4ba9-af8c-8ff4b4c0ad76"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "f1f5893c-6b5d-41e0-90e3-46131ab65011"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "8b8807ab-8ff8-4dcb-8e7c-4e4c8976c24f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
              "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "78667f99-f549-4658-ba95-b743019a40a5"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "eae0c996-2817-41a2-8257-eb4a3b779267"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], "\[CircleTimes]", 
            RowBox[{"(", 
             RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]], "Code",
           ExpressionUUID->"373061a9-ff94-4cde-828a-88dbe8b22712"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ca5088e4-ae95-4455-b7a5-9215755544d2"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CirclePlus]", 
                OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "b1c9bfb7-12fe-48e3-8a17-7868b0140ae9"]},
         {Cell["\<\
where these rules follow from Axiom 5 and Axiom 1 respectively.\
\>", "CodeText",ExpressionUUID->"a98ff990-8d95-4939-9445-9b6a1bd1fd45"]},
         {Cell[
          "Critical Pair Lemma 5", "Subsection",ExpressionUUID->
           "69976952-867f-4c7b-99d5-89e6fda49157"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"790fbf59-e155-40f2-9b42-8ddcd1e0b2a0"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}], "\[CirclePlus]", "x2"}], "\[Equal]",
             "x2"}]], "Code",ExpressionUUID->
           "db529793-6f4e-4d5d-8601-48a70086885f"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "630854ef-9455-44eb-95d6-ec78032ab924"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "59e1f995-0be9-496e-acb9-d6f298bfc383"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "f62fb637-fd0f-4e7c-a346-c09adc44f7d1"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "0182bb3a-e235-4f3d-b07b-6a799d74ca26"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code",ExpressionUUID->
           "f9f64148-a2f2-445d-bace-62c277c18bfb"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"e11ad61d-b696-4745-adf2-35a83a83e9e0"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "f6f1fb50-1d82-4332-be64-595468968fa3"]},
         {Cell["\<\
where these rules follow from Axiom 6 and Axiom 2 respectively.\
\>", "CodeText",ExpressionUUID->"4d33d651-a6c2-47da-8a75-e14e076eb909"]},
         {Cell[
          "Critical Pair Lemma 6", "Subsection",ExpressionUUID->
           "3f7c08f4-4c37-4043-8d6c-616b4ca9b76a"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"bb955a86-cf9c-4b30-8318-0bae8456dfe6"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", "x2"}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]}]], "Code",
           ExpressionUUID->"b1f697ef-6ec0-4410-92ed-c03db775c63c"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "bbb97459-3a2e-4813-901e-81ad235acda8"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "294298b1-79b0-443e-ac36-94149b35ba95"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", 
                OverscriptBox["x1_", "_"]}], ")"}], "\[CircleTimes]", "x2_"}],
              "\[Rule]", "x2"}],
            DisplayForm]], "Code",ExpressionUUID->
           "1b7c1f51-c830-412f-b972-b7a1de151b40"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "8fd0d1df-f572-4836-92f5-7848676371f5"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x1_", "\[CirclePlus]", 
              OverscriptBox["x1_", "_"]}], ")"}], "\[CircleTimes]", "x2_"}]], 
           "Code",ExpressionUUID->"837487df-9736-49ad-8b8e-7588a35e8342"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"e8bffbfb-565b-446b-b579-addb8a904634"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
              "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "0dee5b09-0972-4d14-85cd-b1e907548ece"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 1 and Axiom 5 respectively.\
\
\>", "CodeText",ExpressionUUID->"d57be5ff-64e7-4914-8c80-1471aa57e72f"]},
         {Cell[
          "Critical Pair Lemma 7", "Subsection",ExpressionUUID->
           "32445480-d0cb-4792-8491-2d24a73476b3"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"83304eff-91fc-4b2c-a641-87401e948a85"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], ")"}]}]}]], 
           "Code",ExpressionUUID->"66813feb-dce3-42ea-b1de-02c568628b9d"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d31e66ec-c765-4c34-939a-e17fc8c00546"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "76bac994-ed79-4a6e-8ae9-22d5f5a576ca"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", 
               OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}], 
             "\[Rule]", "x2"}],
            DisplayForm]], "Code",ExpressionUUID->
           "e7178821-1d3a-4831-b009-bb36b75f1b0c"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "e54ecd98-4553-4cdc-913b-29eea2c74c83"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", 
             OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}]], "Code",
           ExpressionUUID->"07b151bc-7361-4aea-988d-c0a91eced565"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"2370bcf3-1631-44b7-bc5c-fde302e1d069"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "9bee73a7-de00-43a7-a35b-9e35b8275df9"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 5 and Axiom 4 respectively.\
\
\>", "CodeText",ExpressionUUID->"d80ba1ca-23d7-4044-91ac-2b92ff646209"]},
         {Cell[
          "Critical Pair Lemma 8", "Subsection",ExpressionUUID->
           "507a7786-a179-4fc5-ac9e-8439a30e0a0c"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"d3e3a09a-990e-44ba-9155-737786d16983"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"]}], "\[Equal]", "x1"}]], "Code",
           ExpressionUUID->"6f533f5f-bc56-4c4f-81ef-d99a793765fc"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "4fc6f575-4960-4cf5-a5d9-f91fffcbdb3d"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "c67e45ae-a2cb-4d2a-bd40-61939ecea8e6"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "442528d5-b210-4539-bca0-691d14f153dc"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "6689cbfa-ff46-40f6-8231-4127ffce1797"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{
             OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}]], "Code",
           ExpressionUUID->"c6866a36-5344-4e2b-be5d-fba8cf826ade"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"f5682c01-2621-429a-9316-bcc7900abb31"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "38b72cd0-e0ce-48a5-a212-36d5506511fa"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 6 and Axiom 2 respectively.\
\
\>", "CodeText",ExpressionUUID->"0cb17c4e-ff93-4c69-8596-1500a9c6458e"]},
         {Cell[
          "Critical Pair Lemma 9", "Subsection",ExpressionUUID->
           "59060a98-f179-4962-b499-8a9b5ae50bdf"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"afe879e6-732b-4804-9227-2d8ac66b73ed"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             OverscriptBox[
              OverscriptBox[
               OverscriptBox["x1", "_"], "_"], "_"]}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             OverscriptBox["x1", "_"]}]}]], "Code",ExpressionUUID->
           "d7166349-53e6-497d-838b-0fcea2e07c26"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "03fbd836-2354-48a5-aa1c-3667592897a6"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "78c161a3-6b91-4dc6-becd-92df55b5d5b3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "1c59108f-084b-411a-82ad-a6cc86b7d96a"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "46b16ce2-d3ce-480b-832e-ac1cd5c1cc0d"]},
         {Cell[BoxData[
           RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}]], "Code",
           ExpressionUUID->"e0620ae7-18f5-4489-8a8a-9c557e0ee108"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ebf94c32-3a3f-4117-a2f2-37980703f40d"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              OverscriptBox[
               OverscriptBox["x1_", "_"], "_"]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "5e5dd0f2-4bea-4e42-bb1d-dc52365c298f"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 7 and Critical Pair Lemma 8 \
respectively.\
\>", "CodeText",ExpressionUUID->"4f104fe2-8224-40ea-88b6-7697d3803718"]},
         {Cell[
          "Critical Pair Lemma 10", "Subsection",ExpressionUUID->
           "22b52357-5f09-474b-9fc4-f36560ea2517"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"ac0cf671-16fd-44c7-9f27-4c599e859722"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", "x1"}], 
            "\[Equal]", 
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}]}]], "Code",ExpressionUUID->
           "53ad6549-70d9-42dd-ad56-ef77810551d8"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "65fc11c5-9a39-4054-b61c-b0de3428cde7"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "8c45d018-4d4c-4da0-9c45-a8acc37fdb3b"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x1_", "_"]}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "06df9395-8731-4703-9d93-b870b5571b44"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "b68a88d0-b120-40e4-b6c1-adcd3db1700e"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", 
            OverscriptBox["x1_", "_"]}]], "Code",ExpressionUUID->
           "44e1a5c0-ec2e-48e8-ace6-fb9374e9db8c"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"2724295a-beb4-400a-a9c9-42e848e30ff9"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              OverscriptBox[
               OverscriptBox[
                OverscriptBox["x1_", "_"], "_"], "_"]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "affc1b7a-6862-4653-8768-9329e5cb2963"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 4 and Critical Pair Lemma 9 \
respectively.\
\>", "CodeText",ExpressionUUID->"ff50a0d2-5248-400e-8f28-079e13904c5d"]},
         {Cell[
          "Substitution Lemma 1", "Subsection",ExpressionUUID->
           "6e86b47d-a544-41f1-a2c9-7211467d6edc"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "21f18376-6f19-4e36-ada9-f40e953e6e5b"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CirclePlus]", "x1"}], 
            "\[Equal]", 
            OverscriptBox[
             OverscriptBox["x1", "_"], "_"]}]], "Code",ExpressionUUID->
           "7feba09f-36db-4ac6-889e-a51a6654667c"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "a2a7bd06-53f4-4b8b-8f2a-b4aab846fef2"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 10, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"b29c373c-0c4d-4355-98b0-3b7e9b7b709b"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "d99c1653-8741-4f34-917c-fd98ce62e9b2"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "c0d065e3-73a0-45c7-9aaf-ca3d38281ed5"]},
         {Cell[
          "Substitution Lemma 2", "Subsection",ExpressionUUID->
           "00384346-a734-4bce-bc08-dd881a625b91"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "4621a1cf-6481-477e-8f0d-efafa2ad5e9f"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"]}], "\[Equal]", 
            OverscriptBox[
             OverscriptBox["x1", "_"], "_"]}]], "Code",ExpressionUUID->
           "eb507a38-9e6f-4a78-aac2-423670931698"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "b1b92168-27ac-4761-9793-9c6c5ea8ca19"]},
         {Cell["\<\
We start by taking Substitution Lemma 1, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"f97e53e2-2695-4e29-99f1-3806541deadc"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
             RowBox[{"x2", "\[CirclePlus]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "0694e2f9-7b2a-4fbc-a699-3d3d3854cfc0"]},
         {Cell[
          "which follows from Axiom 6.", "CodeText",ExpressionUUID->
           "5ffb13a6-ec55-4b78-9f31-f602379f411f"]},
         {Cell[
          "Substitution Lemma 3", "Subsection",ExpressionUUID->
           "e62522ea-a6da-42fb-aa47-26e9020d8a48"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "cc6926ce-d3b4-4943-82d4-193c4ac3fce9"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            OverscriptBox[
             OverscriptBox["x1", "_"], "_"]}]], "Code",ExpressionUUID->
           "5354a3d4-93b0-4644-96ec-9883f7d26b16"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "c0e31a16-480c-44af-9ab0-7c7ce3daf574"]},
         {Cell["\<\
We start by taking Substitution Lemma 2, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"385616ed-07fe-4986-a7fb-31fbdfbc2b59"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              OverscriptBox[
               OverscriptBox["x1_", "_"], "_"]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "98cb80dc-224a-4deb-ab05-bd892cf12af5"]},
         {Cell[
          "which follows from Critical Pair Lemma 8.", "CodeText",
           ExpressionUUID->"1641cbcf-c019-4b75-997d-7e5159b253af"]},
         {Cell[
          "Critical Pair Lemma 11", "Subsection",ExpressionUUID->
           "50259d00-02aa-443c-97c0-78a17ed166c7"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"7a62b845-0789-40e9-9a8b-1fe6143fe7dc"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}]}]], "Code",
           ExpressionUUID->"2fa19051-ed8b-49ab-b5f3-8e43e45cfe3a"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "aa23a954-5929-4d00-ac14-db4b4741c5c4"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "0207463d-9f20-4456-8f05-7d4164188209"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "1a6f2313-da39-47b6-8178-454c0ac3eae0"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "6273c3cc-9680-4592-8ee6-6518942020a9"]},
         {Cell[BoxData[
           OverscriptBox["x1_", "_"]], "Code",ExpressionUUID->
           "7bb06c1f-95f0-4312-bcd6-42a445915398"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"93bb8d27-2624-4976-9e18-5272f8958003"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "e0c7a7cb-209a-4a8d-892c-fe36e207e085"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 7 and Substitution Lemma 3 \
respectively.\
\>", "CodeText",ExpressionUUID->"98c83af9-3885-4801-b5ab-45c565d854c6"]},
         {Cell[
          "Critical Pair Lemma 12", "Subsection",ExpressionUUID->
           "a136389d-e85a-4bac-8920-927c692de2e5"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"5d9f170d-216e-4b68-8a69-efb21b7ab166"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], "\[Equal]", 
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]], "Code",
           ExpressionUUID->"1c89a901-2f97-4de1-a8d4-f0567d10e196"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "3dba8483-9109-43ff-b97a-9bb1ab71bdc7"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "e20e35b9-9cf8-436f-909e-52690a24aca8"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "5c551333-cbfd-4987-a597-1d36c3e2571c"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "b4efb962-be44-4838-ad03-be64d63e9d99"]},
         {Cell[BoxData[
           OverscriptBox["x1_", "_"]], "Code",ExpressionUUID->
           "54fed03a-606c-4baa-8f48-7ff24a8f4253"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"6b45bcbe-b993-47d7-a19e-313a68a4660f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "c83bc6dd-8cd5-4766-b1b8-173a94d6fff1"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 6 and Substitution Lemma 3 \
respectively.\
\>", "CodeText",ExpressionUUID->"57811a08-6c60-447a-9bcc-3e70fe2e0acf"]},
         {Cell[
          "Critical Pair Lemma 13", "Subsection",ExpressionUUID->
           "48f83769-f9d8-4b1b-96c9-0c4523da663d"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"29b65b0a-68f9-4ac3-9156-15986ac5b406"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], "\[Equal]", 
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code",
           ExpressionUUID->"22963377-c9a1-40a7-9ad5-a1d796e8d4a4"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "8f62fa0c-5d3d-4fa0-b79d-3fca32f67aa1"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "ae13972e-0ee8-4459-bd97-25d49b418abd"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x1_", "_"]}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "a61ac2ba-a1c0-4ffa-8d86-4a8dd1a95541"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "08f0f712-3254-4f92-9100-6369b190c61a"]},
         {Cell[BoxData[
           OverscriptBox["x1_", "_"]], "Code",ExpressionUUID->
           "1d828c0b-2530-4257-bbaa-052a070f0186"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"e545f679-4021-47f5-b470-213c53ea61c5"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "a320bc72-5604-4af0-b793-5f0de8160e98"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 4 and Substitution Lemma 3 \
respectively.\
\>", "CodeText",ExpressionUUID->"c1c16e35-c8eb-40c6-8d02-88826b5d25bf"]},
         {Cell[
          "Critical Pair Lemma 14", "Subsection",ExpressionUUID->
           "d3361ef3-161e-41f7-88ab-27ee27b4b4f5"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"9d2180a9-00ad-440c-9ba9-c3d0135eb3c9"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]}]], "Code",
           ExpressionUUID->"697902aa-ca64-41fa-8a8d-2b0fe1b93657"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "bf8b68cc-877a-492e-b344-0a65ba2d1599"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "085fbf8f-653f-4502-826d-1d671a4b44de"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "cae45db6-e770-4939-9151-69ee6bfe213e"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "d88a4408-092f-4512-a75e-9a55845cac6c"]},
         {Cell[BoxData[
           RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]], "Code",
           ExpressionUUID->"0ed10835-33cf-4a9c-8588-f8724a17f2ec"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"6c77b4e0-2b5b-48bb-8366-75d716b7a882"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "a6d4adf3-3030-472e-a85a-e8d019844e36"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 6 and Critical Pair Lemma \
11 respectively.\
\>", "CodeText",ExpressionUUID->"180bb15d-58bf-40e4-9f2e-382b73e957a1"]},
         {Cell[
          "Substitution Lemma 4", "Subsection",ExpressionUUID->
           "6712efa7-c51e-4cb9-af58-85101c698dfa"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "a1b133b8-6736-4952-9bea-a1cc509a6027"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code",ExpressionUUID->
           "4e40b7bc-d280-474f-a789-5bd4274dc312"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "1abf9e49-f6b8-4b0c-87f6-0696e7fe2fc5"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 14, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"b6e87e2b-fefd-4a85-9c15-209553357672"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "53f47a40-12a7-4e56-bfde-5c19e8d80688"]},
         {Cell[
          "which follows from Critical Pair Lemma 6.", "CodeText",
           ExpressionUUID->"af8e57df-0909-4ab4-81fc-26daa41d897c"]},
         {Cell[
          "Critical Pair Lemma 15", "Subsection",ExpressionUUID->
           "24dec44c-da28-498e-b6e4-02b7b726d9de"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"440bc0cb-3245-4f39-b3fe-8900266481ca"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], "\[Equal]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x2"}], ")"}], "\[CircleTimes]", 
             
             RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code",
           ExpressionUUID->"8c253eab-4663-484c-8537-d4bb908a9f70"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "249eb700-343c-442b-b23a-0b8faf5bb166"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "b64624bc-6693-4fc1-80a0-a32f7957f4be"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
              "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "62242d02-52b8-4704-a224-bfe6043f5b0c"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "b8fcbc44-5d90-4a00-8833-657f9fcb13b5"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", "x3_"}]], "Code",ExpressionUUID->
           "9e822444-24b1-45f0-be3d-64df81ef5cb7"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"a44999e2-cdd8-4ec5-b37f-759e1f98ad7e"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "487c6ea4-a21d-48ef-8019-25408517083d"]},
         {Cell["\<\
where these rules follow from Axiom 5 and Substitution Lemma 4 respectively.\
\>", "CodeText",ExpressionUUID->"8dd50ffc-c6b0-4d66-b0a3-ee59d173b7cb"]},
         {Cell[
          "Substitution Lemma 5", "Subsection",ExpressionUUID->
           "34ffb093-691e-4045-95f3-a23d79263e1b"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "dc494495-b619-4e59-adbd-c7645ddbb609"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code",
           ExpressionUUID->"663cf61d-fdfa-4499-a6de-9d97029dd359"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "248d066e-a169-4a51-a705-80c188fa89da"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 15, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"51030f97-acc4-417a-825c-4caedd45b07c"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
              "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "d870c917-f1ae-4d4a-94bb-d2e187bef081"]},
         {Cell[
          "which follows from Axiom 5.", "CodeText",ExpressionUUID->
           "6526fca9-6321-4826-94fe-a8bda4a35372"]},
         {Cell[
          "Critical Pair Lemma 16", "Subsection",ExpressionUUID->
           "a99a6108-3c5f-4c91-b5ec-2dfe10be3d53"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"d7217c40-02c1-4974-8741-bd8ef57d5f9d"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], "\[Equal]", 
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], ")"}]}]}]], 
           "Code",ExpressionUUID->"934de405-b32f-4c32-b7be-b52450d80877"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "48eefab0-bbe9-4cf2-9f1c-c88491d0b360"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "8eff1661-41cd-4765-a8aa-2a92922f5948"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "29727c1d-d1cd-43f8-ae5f-606b9fcf74b7"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "1c2f8789-f05d-4020-846b-82742021cf91"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code",ExpressionUUID->
           "d99ace59-e212-4f9d-8651-cdbef7f41a2f"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"d61dabae-f84c-428b-b1a0-885b83b67c5b"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "72e4912e-3336-4f14-b65e-162937fe795b"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 11 and Critical Pair Lemma \
12 respectively.\
\>", "CodeText",ExpressionUUID->"168a041e-5ad5-42e3-8813-0bf821e03234"]},
         {Cell[
          "Substitution Lemma 6", "Subsection",ExpressionUUID->
           "e369f439-f893-45d3-81af-841c12bc38f4"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "c1819bd3-55d6-4aa6-b40c-0d2eaf9c87c3"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], "\[Equal]", 
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}], ")"}]}]}]], 
           "Code",ExpressionUUID->"ff801226-7717-46ed-8842-3269ae81849f"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "c1192a26-91a6-4834-ae68-c317ad1f6da6"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 16, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"68e355df-63df-4dc1-9311-923ef84f8582"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "dbce0171-efba-40d8-b2e2-1c616021e14b"]},
         {Cell[
          "which follows from Substitution Lemma 3.", "CodeText",
           ExpressionUUID->"d6829121-183a-4802-9e06-7b110217b4a5"]},
         {Cell[
          "Substitution Lemma 7", "Subsection",ExpressionUUID->
           "257e8f26-5573-4881-9953-c93c5bfb76d0"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "0b7003ca-a67b-4e38-9521-d7aeeff92ed6"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], "\[Equal]", 
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1", "_"], "_"], "\[CircleTimes]", "x2"}]}]], 
           "Code",ExpressionUUID->"97dd3f19-807f-4e32-8d09-c5ec0706d8be"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "0e8838cc-e9e4-44b4-9cda-6251512e6ee4"]},
         {Cell["\<\
We start by taking Substitution Lemma 6, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"f5777d83-fe46-4fe9-aa7d-2d1c5ad07277"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "d3ea407a-b0d7-492a-9096-06483fc1fa71"]},
         {Cell[
          "which follows from Critical Pair Lemma 11.", "CodeText",
           ExpressionUUID->"29b903ac-30ca-4254-a041-47dc83d06459"]},
         {Cell[
          "Substitution Lemma 8", "Subsection",ExpressionUUID->
           "e4b7396e-8077-461b-932f-4f18fd111d21"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "35dd703f-d72d-4dc6-86de-20f800d83070"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code",ExpressionUUID->
           "d2d1ea6f-0db5-4fb7-98a2-616bd48f5ffd"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d78eaa49-116c-41f8-ad31-4a21287c1b6d"]},
         {Cell["\<\
We start by taking Substitution Lemma 7, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"d25ca954-ba17-45be-a1ec-74dc5a8aebe1"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "731b9715-c0d2-43d5-b6da-a0100d69d546"]},
         {Cell[
          "which follows from Substitution Lemma 3.", "CodeText",
           ExpressionUUID->"2e2e1a86-bd34-4de3-855a-eb56ea4d584a"]},
         {Cell[
          "Critical Pair Lemma 17", "Subsection",ExpressionUUID->
           "88c6615b-c8fe-4f93-ade9-d21b3387a2d9"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"5ba79f8a-d636-4ee7-afb2-9bd9d6bbb073"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
               "x3"}], ")"}]}], "\[Equal]", 
            RowBox[{
             RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code",
           ExpressionUUID->"0c7d2053-443e-4fa1-8d88-f9f171a920f0"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "29962708-9f6b-49dd-86a4-733a1b157686"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "6adc28d8-759b-4c74-b281-b96f7ce5a064"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "e3b6e656-6505-41a6-aa10-f232d3220faf"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "68fda97d-5ea7-484a-899a-78cfc8365d12"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code",ExpressionUUID->
           "e8e85380-ebb1-4459-a801-adf42dd86294"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"14f4d629-c2ed-4945-b912-5b0f111cd720"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "e28d1fcc-3345-47b1-a64b-6aa6b7950d21"]},
         {Cell["\<\
where these rules follow from Axiom 4 and Substitution Lemma 8 respectively.\
\>", "CodeText",ExpressionUUID->"e174413b-049e-408c-b4a0-7e322f9d136d"]},
         {Cell[
          "Substitution Lemma 9", "Subsection",ExpressionUUID->
           "91644100-8cc6-4524-b455-d192285663a4"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "987d4ee2-97ec-4c48-92c4-5a85a7dca4a5"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
               "x3"}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code",
           ExpressionUUID->"1ca00ae5-6a22-40d9-b4ba-45db7882df9a"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "262dbab0-0c41-4697-ade1-b2bcc1297030"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 17, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"59b52775-a2f3-4ec9-9579-5bf4c3dea385"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "4448f235-10b2-4dab-ad6e-b48819b3daac"]},
         {Cell[
          "which follows from Axiom 4.", "CodeText",ExpressionUUID->
           "e1dded79-f4a9-4721-b489-20262b534dcf"]},
         {Cell[
          "Critical Pair Lemma 18", "Subsection",ExpressionUUID->
           "8739bbb2-6598-4a79-9a4c-c2909a01f16c"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"0318f09b-aeda-4a30-b83d-fe193aa299fc"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", 
               RowBox[{"x1", "\[CircleTimes]", "x3"}]}], ")"}]}], "\[Equal]", 
            
            RowBox[{
             RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x3"}]}]}]], "Code",
           ExpressionUUID->"0d941843-2b1c-4c76-a820-a7dfd6338fc8"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d957e63a-3445-4208-aa3f-06a24e02f668"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "0c968c43-eeb7-4f85-8aa2-9eb2132805a2"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "8e07c33f-4ba2-4c4b-9d71-530d7b6a3b8a"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "1765a4fe-4b3e-46e9-b599-291290c28c51"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CircleTimes]", "x3_"}]], "Code",ExpressionUUID->
           "18d33ab4-dc58-482d-a094-6129c78ab007"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"04e1b4c2-1069-417b-9a04-1fcd01c60083"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "688314e9-5d37-4090-bb27-cc641abfa6d9"]},
         {Cell["\<\
where these rules follow from Axiom 4 and Substitution Lemma 8 respectively.\
\>", "CodeText",ExpressionUUID->"a429053d-1b90-4ec6-8877-21f52bdad214"]},
         {Cell[
          "Substitution Lemma 10", "Subsection",ExpressionUUID->
           "211af1c2-e6b5-4a13-a59c-d61202872835"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "4516a1f8-4f69-49a9-94b4-5f95a7871d35"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", 
               RowBox[{"x1", "\[CircleTimes]", "x3"}]}], ")"}]}], "\[Equal]", 
            
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code",
           ExpressionUUID->"88eea190-47cf-41e0-9fd5-4544ba284d74"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "434367b8-7abc-4520-b93e-d1f2c3786f49"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 18, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"344db3aa-a3fa-4993-a95a-31d87a5df6d2"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "c95d3dc9-2a8e-494a-ae26-bac9f7c4b2c1"]},
         {Cell[
          "which follows from Axiom 4.", "CodeText",ExpressionUUID->
           "56a8890a-4fcf-47ef-8530-c55b8848dfac"]},
         {Cell[
          "Critical Pair Lemma 19", "Subsection",ExpressionUUID->
           "d7611eef-48b0-4841-aa9e-7215d21c3abb"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"65034f4d-5056-4a20-aaf7-aa103f301fe2"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x2", "_"]}]}], "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code",
           ExpressionUUID->"fa0af1f5-e079-44d1-8153-1e985513cc70"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "7d1c57ab-971f-4a32-8bc0-e6df50aec563"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "31d786bc-f39b-4a0c-9410-af3b7dcf7d3f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               RowBox[{"(", 
                RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]}], "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "89a7cfc7-37a6-4997-9290-ec268802c4d3"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "3a482b62-6c31-4331-b255-6e086ba298d4"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", 
            RowBox[{"(", 
             RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]], "Code",
           ExpressionUUID->"d5991578-6d63-4d9e-a0ce-fd0630c3db3d"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ff8fdbb3-a0e0-46af-9781-6cc481770e57"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CirclePlus]", 
                OverscriptBox["x1_", "_"]}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "316e9bf1-fce4-4c8a-8aa2-2f501e36d1f6"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 5 and Critical Pair Lemma 2 \
respectively.\
\>", "CodeText",ExpressionUUID->"1f93d35c-d34a-4860-896a-6309e1a9c119"]},
         {Cell[
          "Substitution Lemma 11", "Subsection",ExpressionUUID->
           "645b19e4-d817-4a3b-b55f-733034786ace"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "f4785eda-1c1f-4893-8bc5-0be90b37ecfd"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code",
           ExpressionUUID->"ebd04240-d0f2-4d66-9c7d-4fdbb16a6b43"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "6cac17de-183b-4f45-852b-3f9283733e76"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 19, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"137ceb24-262f-4a0f-be7e-8777e58a87fa"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "f57e183a-4f43-4594-960d-2639f6eaa9ed"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "9d733d11-0f1f-4bb3-b9c5-a4c4d1e0a1fc"]},
         {Cell[
          "Critical Pair Lemma 20", "Subsection",ExpressionUUID->
           "5afe7a10-516e-4389-ab14-7c7bf3aebaae"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"ce987876-c904-48f0-b1cb-dacff56af503"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             OverscriptBox["x1", "_"]}], "\[Equal]", 
            RowBox[{"x2", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", 
               OverscriptBox["x1", "_"]}], ")"}]}]}]], "Code",ExpressionUUID->
           "fbb200e7-701b-4825-b126-bd719b2fad5c"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "c118a811-bbdd-4147-9b24-d632acccf006"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "5aa570a1-6ada-40ca-9d1b-141adde3a6f4"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "591802e3-adc6-4093-b23a-6127b7a5da1e"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "f041309e-a92c-45b0-ba87-9a5e859e701f"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code",
           ExpressionUUID->"c3e980b0-30ad-42eb-bfee-5464b349088c"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"d8b8b08b-b478-4639-ab08-f4f79ef29d52"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", 
               OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}], 
             "\[Rule]", "x2"}],
            DisplayForm]], "Code",ExpressionUUID->
           "627b35b9-4d24-41b0-a0cf-2c199ec7a60a"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 11 and Critical Pair Lemma 5 \
respectively.\
\>", "CodeText",ExpressionUUID->"eb563889-7bfb-447b-8807-9279538efe73"]},
         {Cell[
          "Critical Pair Lemma 21", "Subsection",ExpressionUUID->
           "de7c36c0-2f73-422e-b44f-50d8a77dbde2"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"3acf98c3-4f22-488f-b089-260174f4d2af"]},
         {Cell[BoxData[
           RowBox[{"x1", "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]], "Code",
           ExpressionUUID->"04cd692f-01b8-4084-9cda-011f721e946a"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "cbcce078-5af3-4fa1-b065-787b1330bdb8"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "1f6be10a-a21d-4f2c-a645-1b93839ec95f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "7b28df13-76a6-4ddc-aeaa-b1233928d332"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "cedeb6b7-7151-4fd2-9e9a-3272e1fcda9b"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code",ExpressionUUID->
           "7b92ca4c-18b9-4cce-8f7d-33837767b11d"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"322c6617-484d-416c-817e-eb8591cbbe50"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "0b08f6bb-fa1f-46bc-a275-a59ea9732ade"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 11 and Axiom 3 respectively.\
\
\>", "CodeText",ExpressionUUID->"00242e82-02d3-4453-8e14-8d50aae33643"]},
         {Cell[
          "Critical Pair Lemma 22", "Subsection",ExpressionUUID->
           "1f0d5a1a-8a7e-49c8-beb6-711847492636"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"8903c54c-4f13-48cb-8bf1-76ef95ad50b0"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", "x1"}], ")"}]}], "\[Equal]", 
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", "x1"}]}]], "Code",
           ExpressionUUID->"36fe281b-e1f7-4767-b560-dc803cb1e2a8"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "a1adb074-24cf-4856-8e5d-0e838676270c"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "0fb4cee0-5a67-4bd7-8ddd-d56f08f522a2"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "13942253-39f8-44f4-9779-ad8ec3f5166d"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "272d225a-32c7-4871-9ae0-66b8eab74dff"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code",ExpressionUUID->
           "be33854f-4dc9-40b7-a252-4a59a0a339b6"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"5a8073d5-5681-492e-9168-cf35bec90b6e"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "2c61c68c-60cc-4b95-b7ef-0ff10ce98c3c"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 11 and Substitution Lemma \
11 respectively.\
\>", "CodeText",ExpressionUUID->"5b5cf3b5-15b1-4718-be9b-7785d3bb627c"]},
         {Cell[
          "Critical Pair Lemma 23", "Subsection",ExpressionUUID->
           "d2a31693-2f23-4c44-85bf-7d45272876da"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"1c57723f-cc2b-4911-987c-724d44df5e60"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], ")"}]}], 
            "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             OverscriptBox["x1", "_"]}]}]], "Code",ExpressionUUID->
           "1e061110-8a98-4e6e-a3e4-d7a99401b2c0"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "e6ef57fb-bfd0-4a44-aa52-a953394131fe"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "e7f1e516-09d1-494e-ad56-ac1064a354d6"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "39b2c199-1ce5-4b84-aefa-d5a42bba8269"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "11f46a11-20be-4d97-8873-6dfb266b7a04"]},
         {Cell[BoxData[
           RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}]], "Code",
           ExpressionUUID->"7db3b8a4-be1c-44df-9674-b392c3a86573"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"d54865c2-1174-4754-98f5-d297aebdc048"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "ae8996cc-d4c1-4c4e-be5e-5487e8fdc2f1"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 7 and Critical Pair Lemma \
21 respectively.\
\>", "CodeText",ExpressionUUID->"cd7e2d21-522c-42e5-b5f7-b18ed220c98a"]},
         {Cell[
          "Substitution Lemma 12", "Subsection",ExpressionUUID->
           "b5718bf8-7594-43c3-8960-8024362b5b00"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "a7f986e6-38eb-4355-a4a3-d4a73235f8da"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", "x1"}], ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             OverscriptBox["x1", "_"]}]}]], "Code",ExpressionUUID->
           "be149f2b-c481-4700-9300-155607a002c9"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "30bf0e3a-d4f2-4e7b-9cc5-a00897ceba46"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 22, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"3cf1908e-be8c-49ab-8374-49d2f6679a76"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[Rule]", 
             RowBox[{"x2", "\[CircleTimes]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "fce09b70-dde2-4a89-940c-d8966bb8d1c2"]},
         {Cell[
          "which follows from Axiom 3.", "CodeText",ExpressionUUID->
           "c84a3ea0-e2ba-4afd-9de7-549c770147c8"]},
         {Cell[
          "Critical Pair Lemma 24", "Subsection",ExpressionUUID->
           "6512fb40-73fb-4aa9-90e1-e779a7f18b7d"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"689237b6-aae2-4924-ae58-588f03abd523"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]", 
             OverscriptBox[
              RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], "\[Equal]", 
            RowBox[{
             OverscriptBox[
              RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], "\[CircleTimes]", 
             
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", 
               OverscriptBox["x2", "_"]}], ")"}]}]}]], "Code",ExpressionUUID->
           "7c51f788-6054-4def-bd83-a312b4d48ec5"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d1bfa5bc-8fe8-474c-be3c-b8af4c0eb88d"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "270e866e-0ec9-43da-8067-ae33d021eec3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "41a79168-8757-41ba-bfd5-31f051e36831"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "df1b7d27-cf55-4ea8-9a6a-ae60e6a67758"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code",ExpressionUUID->
           "7f43dbeb-26c8-4450-9d77-474ecd74d311"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ea40bb69-c44c-4b8f-8c2f-510a719dcf57"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "cad1c438-3a32-405b-8009-bfc6995ee7ba"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 12 and Substitution Lemma 12 \
respectively.\
\>", "CodeText",ExpressionUUID->"150e4b24-a105-4180-bf33-0d6aec5f977e"]},
         {Cell[
          "Substitution Lemma 13", "Subsection",ExpressionUUID->
           "501be86b-314b-4408-bcf3-13b1566adf58"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "46385e68-ba10-4819-b52d-88b1ba27c03d"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]", 
             OverscriptBox[
              RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], "\[Equal]", 
            RowBox[{"x2", "\[CircleTimes]", 
             OverscriptBox["x2", "_"]}]}]], "Code",ExpressionUUID->
           "78be37d4-aff8-45f1-85c6-e937e855a0aa"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "2d4b8cf4-8fb3-46d4-8bbf-6849ca5dacab"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 24, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"2d4e7f4f-8dc0-4dbb-9365-543d96181a76"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", 
                OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x2", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "cb9aeca4-20f1-49c9-9a59-e742271ff39a"]},
         {Cell[
          "which follows from Critical Pair Lemma 20.", "CodeText",
           ExpressionUUID->"2a4f4333-21b2-4c44-a42c-073b5d6f5cef"]},
         {Cell[
          "Critical Pair Lemma 25", "Subsection",ExpressionUUID->
           "33f9eb8a-8744-4517-8c03-e28da64e78b8"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"40936a68-b98f-43b6-87b1-257e3f8216c2"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], "\[CirclePlus]", 
             OverscriptBox["x2", "_"]}], "\[Equal]", 
            RowBox[{
             OverscriptBox[
              RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x2", "_"]}]}]}]], "Code",ExpressionUUID->
           "e53da985-6335-4c2b-9e2b-3ddf8d5c949b"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "f0b1dcfa-ca87-4739-9e97-0e1a932f5589"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "dd406e21-6550-4623-8490-533dfac76641"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "5eae04e1-f6fd-4d6b-ab37-e169f67f9995"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "5bbf278b-cea6-4c2d-b736-a0e047f1dd0e"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code",ExpressionUUID->
           "a6908ccf-5a8a-4ba9-9e0e-048d0e4b8593"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"d7d7ee2b-7ec1-4e4e-9169-587263339032"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "4a6841a1-4bf0-44d1-b703-5d93d3263df1"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 13 and Substitution Lemma \
12 respectively.\
\>", "CodeText",ExpressionUUID->"19d4038a-946d-4856-9e95-6a98f75b2890"]},
         {Cell[
          "Substitution Lemma 14", "Subsection",ExpressionUUID->
           "99f949f7-600d-4785-b101-6db84950e38d"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "206ccebd-1a64-49b8-a243-17577d7488ba"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"], "\[CirclePlus]", 
             OverscriptBox["x2", "_"]}], "\[Equal]", 
            OverscriptBox[
             RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}]], "Code",
           ExpressionUUID->"dbd55876-3d89-4f61-b6c7-3ad02b98c50d"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "1dafd0f3-8605-49f3-88dc-3335630b5d3b"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 25, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"1578c6c2-a702-4630-a7e1-99b2953d7895"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "66b4f9e5-074b-495b-b826-0ca92011421c"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "02b07080-745a-4920-a6e4-2280a4115c89"]},
         {Cell[
          "Critical Pair Lemma 26", "Subsection",ExpressionUUID->
           "d509e55c-25a5-481d-be14-f7d4606d464b"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"20a920c2-6dcf-4221-903e-2fc5d0059d0c"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
             "\[CirclePlus]", "x1"}], "\[Equal]", 
            RowBox[{
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
             "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}]}]], "Code",ExpressionUUID->
           "43c23343-7ee9-4434-b48f-4db5b204771c"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d79f9c69-c902-49b7-8ec6-59b4efdcfce9"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "eb1a6c8a-23b9-41c3-9e23-0d0b31f66744"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "f1ffcc1e-90db-4956-8235-d2e6aaeee973"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "13bfad3f-761d-4266-bfc3-8f1c297b6b3f"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", "x1_"}]], "Code",ExpressionUUID->
           "29a003b1-aa3c-49d3-9e5a-541d4417bf65"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"50789665-5e8b-4e6f-a598-0fdcb64989d8"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], ")"}]}],
              "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              OverscriptBox["x1", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "e655164d-5f04-4fed-ada2-29fade62f341"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 13 and Critical Pair Lemma \
23 respectively.\
\>", "CodeText",ExpressionUUID->"5fdc2e9b-23ad-4bc3-8a4f-01923e5b45e5"]},
         {Cell[
          "Substitution Lemma 15", "Subsection",ExpressionUUID->
           "340a5801-fac8-4440-b8e2-bfa5174a246e"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "87f631e6-0340-49ca-b6de-421fa67cdc25"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
             "\[CirclePlus]", "x1"}], "\[Equal]", 
            OverscriptBox[
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}]], 
           "Code",ExpressionUUID->"3f393a88-5a39-4f4f-92a6-993f92fb2ee7"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "44804de1-33ee-4805-8277-5bf981ca8cba"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 26, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"fc46d605-301b-4515-8d12-5ded4a4fa54a"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "57e07fc4-1ad8-465e-8c04-bf7661e9e21f"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "1fec9c6d-ed89-43e4-94ca-f75d07f0e79d"]},
         {Cell[
          "Substitution Lemma 16", "Subsection",ExpressionUUID->
           "b93aa859-447c-49bf-9856-887922b43881"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "607860c7-dd8f-400a-aeb9-8e4ab63a6a01"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", 
             OverscriptBox[
              RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}], "\[Equal]", 
            OverscriptBox[
             RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}]], "Code",
           ExpressionUUID->"5b02827a-e013-4be4-823e-da85dee72217"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "04e621de-9946-4062-9328-23db205c621a"]},
         {Cell["\<\
We start by taking Substitution Lemma 14, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"1f5ab11c-d415-42e3-ab59-6651f6289a12"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
             RowBox[{"x2", "\[CirclePlus]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "2fb61c64-01bc-46c0-a61f-74c7fb760674"]},
         {Cell[
          "which follows from Axiom 6.", "CodeText",ExpressionUUID->
           "4ad58a8a-5692-432c-9b95-93c687f116cb"]},
         {Cell[
          "Critical Pair Lemma 27", "Subsection",ExpressionUUID->
           "988fdb25-c498-4986-a991-37f7fa4c9b1e"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"af0fcd96-a96e-4d16-8b52-b3a37b2419c5"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", 
               RowBox[{"x2", "\[CircleTimes]", "x3"}]}], ")"}]}], "\[Equal]", 
            
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", 
               RowBox[{"(", 
                RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], ")"}]}]}]], 
           "Code",ExpressionUUID->"7b388aa5-e3c0-4fa4-be8e-567285e48f0b"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "da764694-75af-498e-bfdc-a525945e8766"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "e088e1cd-57c7-40f3-8d72-bbf07e767732"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "6e6b7775-6329-4267-bd46-8d0494f4c548"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "8e2786e2-aea4-45fe-9fbf-440b1277dfea"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            "x3_"}]], "Code",ExpressionUUID->
           "acb1ba0d-49d9-429d-ab00-2cf66cdbb2fc"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"353393d8-1610-46dd-8b86-3d28a74e797a"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
             RowBox[{"x2", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "ddcb6db2-d235-4b24-9b71-513754c6703a"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 9 and Critical Pair Lemma 3 \
respectively.\
\>", "CodeText",ExpressionUUID->"eafd797d-53d5-4f87-b9c7-2c38832438f3"]},
         {Cell[
          "Substitution Lemma 17", "Subsection",ExpressionUUID->
           "6f1b3541-c0c6-4e94-8a11-4b1f27a01823"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "1d68d216-a1e9-486b-8418-94c49a0924f1"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", 
               RowBox[{"(", 
                RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}], ")"}]}]}]], 
           "Code",ExpressionUUID->"59284da4-9e2c-4abd-a884-016f3b9cc357"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "e35316ff-de1d-45e7-ab3e-abce5e780ee9"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 27, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"6a07015c-e5b0-4528-85a0-7502b30881d6"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "96f061ed-f70d-40cc-a3a8-c0a55ad237ab"]},
         {Cell[
          "which follows from Critical Pair Lemma 21.", "CodeText",
           ExpressionUUID->"54168897-ee87-4cfc-846c-ee5689cb6535"]},
         {Cell[
          "Critical Pair Lemma 28", "Subsection",ExpressionUUID->
           "166249b4-8ff5-4572-9047-859667582401"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"7c968436-76c9-4ef3-8a76-ed979bafae3a"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}], 
               "\[CircleTimes]", "x2"}], ")"}]}]}]], "Code",ExpressionUUID->
           "2691e267-506c-4756-9187-ad3bbb00bc1e"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "968d5b00-3ac6-4560-9224-caa0e08df214"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "13718be9-ec46-46b0-9fbc-3a15de353d0f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", 
                RowBox[{"(", 
                 RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "5d51b130-d1b2-41c6-a512-4ab1a7ef49cd"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "418436a1-8b41-43c0-b1aa-43218b8c1987"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CircleTimes]", 
            RowBox[{"(", 
             RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]], "Code",
           ExpressionUUID->"15d4a438-ce35-42eb-9adb-fda49d8c8b82"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ed26b048-320c-4ec4-84ec-7dd53cd72397"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "15fe984b-ccc3-4100-b8ff-674e8c087d72"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 17 and Axiom 3 respectively.\
\
\>", "CodeText",ExpressionUUID->"bedb0e1c-981c-49fa-b7f6-84cadd1a0a2c"]},
         {Cell[
          "Critical Pair Lemma 29", "Subsection",ExpressionUUID->
           "0265478d-817d-4779-9c9f-ac8677d0a9ae"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"323f1d35-594b-4aad-911c-97b6ca3f6ee8"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", 
               RowBox[{"(", 
                RowBox[{"x3", "\[CirclePlus]", "x1"}], ")"}]}], ")"}]}]}]], 
           "Code",ExpressionUUID->"afab04ff-7bb7-4173-a5d7-95143a5d8f89"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "483fb4d1-9bb1-4cdd-b74f-fd0942ba5518"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "2d7240f2-8e52-4876-90c9-5cb29cd0fac3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", 
                RowBox[{"(", 
                 RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "b57c897f-cbd8-4228-8da3-7e7476f99fc6"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "11417657-27b6-4aa9-b276-30031f4f5cee"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", "x3_"}]], "Code",ExpressionUUID->
           "61bc7f66-bc4d-432d-be64-093558f0e004"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"3722b5c0-ec03-483a-a40d-3d563ad49a1f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "00f8fc30-8460-4953-aa09-f1e7c1888990"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 17 and Axiom 6 respectively.\
\
\>", "CodeText",ExpressionUUID->"977b4ac9-1b3c-4406-9f9d-aff484b7b93f"]},
         {Cell[
          "Critical Pair Lemma 30", "Subsection",ExpressionUUID->
           "24c0e7e4-a0c4-45ca-923c-94e0cc2dacf8"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"1651d9b3-58c9-4cc9-80ed-dba0acb1ea97"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", "x2"}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{
               RowBox[{"(", 
                RowBox[{"x3", "\[CirclePlus]", "x1"}], ")"}], 
               "\[CircleTimes]", "x2"}], ")"}]}]}]], "Code",ExpressionUUID->
           "a6bf617a-2b11-4156-aeaf-fc698ee79c9f"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "2108cdc2-67f6-410d-8135-78ad9f30e677"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "95b59b9a-937a-4761-a0c4-eb3a4b0150fa"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x3"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "75f91f10-e22e-4a28-a4df-b1c087ee5466"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "5a515270-6b93-4ca3-a838-2715ca80cb6f"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CirclePlus]", "x2_"}]], "Code",ExpressionUUID->
           "b52723d8-7d88-4489-9f48-3f504a535b38"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"7d89701d-a227-46aa-9d14-7a91500f1432"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "e5a3de1e-d25c-4da6-8ee2-2902797b8887"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 28 and Axiom 6 respectively.\
\>", "CodeText",ExpressionUUID->"27766a74-179c-4f59-ae22-f29f3586f206"]},
         {Cell[
          "Critical Pair Lemma 31", "Subsection",ExpressionUUID->
           "288e19f1-2bb2-4c80-82e5-ea6d50d83638"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"8053a34b-10fd-4448-b345-7f48b4a5b5bd"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
              "x3"}], "\[Equal]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}]}]}]], "Code",
           ExpressionUUID->"df8c0ca5-08bb-40aa-a8ac-7b3b9aa44e10"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "2f50ad51-7d4a-4136-9ef1-cc19c83f264a"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "fbf1c440-714d-49ef-8385-0517dcfe18fe"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", 
                RowBox[{"(", 
                 RowBox[{"x3_", "\[CirclePlus]", "x1_"}], ")"}]}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "cf47b65f-9a10-4290-b474-a1e5c7d541a1"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "dbf5682f-e229-4e74-aefe-f61601ca93db"]},
         {Cell[BoxData[
           RowBox[{"x3_", "\[CirclePlus]", "x1_"}]], "Code",ExpressionUUID->
           "98bceac7-f240-440c-a295-84800b0da372"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"c46b9f27-f853-44ff-9ec1-31aa8be1749e"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "9fe9d5d4-3c33-4198-9ef0-e39f583d3946"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 29 and Critical Pair Lemma \
21 respectively.\
\>", "CodeText",ExpressionUUID->"a77633bf-1348-46fb-9a24-89c9a8e0ccc8"]},
         {Cell[
          "Critical Pair Lemma 32", "Subsection",ExpressionUUID->
           "fd440074-3d0a-4a9f-96ab-f27467bf3698"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"75303774-c67b-4d79-893d-0f19ad4dfb70"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
              "x3"}], "\[Equal]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]], "Code",
           ExpressionUUID->"2214c1ed-10b2-46e8-816b-9d5c84f50842"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "2435dc59-2d4c-43fb-9947-b072d863103f"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "acccb30a-69ad-4a13-a776-cfa295acf4ee"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{
                RowBox[{"(", 
                 RowBox[{"x2_", "\[CirclePlus]", "x1_"}], ")"}], 
                "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x3"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "46398d6f-1bc7-445e-9f33-9601206c50df"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "c706aacb-c1cc-4fca-b505-96fbb7a55193"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CirclePlus]", "x1_"}]], "Code",ExpressionUUID->
           "5b28f07c-053c-44be-90c2-e1b0b9deada8"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"a9f6d8ec-0c98-435b-8b3c-0ab78bd0a756"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "564c485b-3783-4fa4-8b4a-9c435068dec1"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 30 and Substitution Lemma \
11 respectively.\
\>", "CodeText",ExpressionUUID->"1d0aa9dd-3784-4108-a923-5d9929041b92"]},
         {Cell[
          "Substitution Lemma 18", "Subsection",ExpressionUUID->
           "5278c2f6-d7e9-4ba1-a19a-f6630ffe4be7"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "d62c701f-0af3-407f-b4be-16c52dd67478"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}], 
            "\[Equal]", 
            OverscriptBox[
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}]], 
           "Code",ExpressionUUID->"cad32eca-10e4-4384-bf33-4b8e071495a2"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "57378458-101b-4223-be12-c04390648c4a"]},
         {Cell["\<\
We start by taking Substitution Lemma 15, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"c9eb411e-2808-4a1d-9d56-f2ce5cd71499"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
             RowBox[{"x2", "\[CirclePlus]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "822101a5-d043-4ee1-83b4-6ae2e7e44eb9"]},
         {Cell[
          "which follows from Axiom 6.", "CodeText",ExpressionUUID->
           "87e337df-7b88-4b89-8b20-bc7781d0b29f"]},
         {Cell[
          "Critical Pair Lemma 33", "Subsection",ExpressionUUID->
           "8d53ceea-3534-434c-9c89-d0ef872d554f"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"e07a61be-208d-4257-99a4-2aa45514c9e4"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
              "x3"}], "\[Equal]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}], "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}]}]}]], "Code",
           ExpressionUUID->"15bf9316-46ca-420b-a1ed-e177123c828b"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "dcdaf2c3-eda8-4abd-84fa-67185c0ce6f7"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "3099d711-f066-4e0a-99e6-18ceb64f4741"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
              "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
              "\[CircleTimes]", "x3"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "a29a78a0-b866-44d6-a08e-78e609bc132d"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "9040548e-5222-4588-8fb4-f90abc62fef8"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
             RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}]}]], "Code",
           ExpressionUUID->"d90942eb-411b-450a-8273-df8a70f91219"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"4505f570-eccb-4139-b2f8-c32278795ed4"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "30de5bcf-85f4-431c-a69a-14621da5c48f"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 31 and Axiom 3 respectively.\
\>", "CodeText",ExpressionUUID->"c0635bdc-2274-4ca4-b28d-24d2bd0b21ab"]},
         {Cell[
          "Substitution Lemma 19", "Subsection",ExpressionUUID->
           "18834a23-63de-4e28-8407-aab6f01bb006"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "baa1d864-e97c-41f4-8fa1-bbb5d597dab0"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
              "x3"}], "\[Equal]", 
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x3", "\[CircleTimes]", "x1"}], ")"}], "\[CircleTimes]",
              "x2"}]}]], "Code",ExpressionUUID->
           "d65da29e-17e1-44cc-87ad-9a83777cc8e6"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "b90e6da9-c1f0-4152-b84e-d00d53bf75c5"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 33, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"445e2ba0-6b4e-40a4-ab59-0785cf2aa999"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
              "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], 
              "\[CircleTimes]", "x3"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "9715703e-741d-4581-887c-a815a079ba86"]},
         {Cell[
          "which follows from Critical Pair Lemma 32.", "CodeText",
           ExpressionUUID->"b466f4c8-54e2-45b9-9aa6-0c824556218f"]},
         {Cell[
          "Critical Pair Lemma 34", "Subsection",ExpressionUUID->
           "9a61286d-136e-48a4-b72e-9ede7b60ff58"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"54954a37-5d5e-4a4a-b2ac-283fa2a6f690"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
              "x3"}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]], "Code",
           ExpressionUUID->"2300e822-533e-4905-b5b3-ae6a89849ff3"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d8ccf70c-443a-4720-bef1-5025915febad"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "16835f3c-e429-42f0-b6a2-e47dade658e3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
              "\[CircleTimes]", "x3_"}], "\[TwoWayRule]", 
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}], 
              "\[CircleTimes]", "x2_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "99f8407b-6727-4632-98ea-3afd265f1fc4"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "f75604f5-021b-4e6c-bb00-5bc12bf8a6e2"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"(", 
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
            "\[CircleTimes]", "x3_"}]], "Code",ExpressionUUID->
           "4107f849-60b0-4e83-b124-3006a245d4b0"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"2e23b6e0-a8c3-466e-b559-0f39cb4394e0"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "1368b655-4088-4415-91f6-6af01d083d5c"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 19 and Axiom 3 respectively.\
\
\>", "CodeText",ExpressionUUID->"470cce4a-1c6d-4b54-a240-c88e96e7d993"]},
         {Cell[
          "Substitution Lemma 20", "Subsection",ExpressionUUID->
           "e8aa2986-cb14-4469-8911-552ddb7fda18"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "0ddde243-4c25-4c9e-906c-7d3d5b029e35"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", 
               OverscriptBox[
                RowBox[{"x1", "\[CircleTimes]", "x2"}], "_"]}], ")"}]}], 
            "\[Equal]", 
            RowBox[{"x2", "\[CircleTimes]", 
             OverscriptBox["x2", "_"]}]}]], "Code",ExpressionUUID->
           "57d72f6f-8e7a-44c8-a81d-21d1d9abb883"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "1467d2bb-f86b-4b0b-a706-848c5cea2af8"]},
         {Cell["\<\
We start by taking Substitution Lemma 13, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"e8e7608e-6758-4448-9f02-2dbb68022603"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
              "\[CircleTimes]", "x3_"}], "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "0c1d65bc-fb8e-4251-811c-48587e4cf8ba"]},
         {Cell[
          "which follows from Critical Pair Lemma 34.", "CodeText",
           ExpressionUUID->"970af4d7-0b78-48f5-a69f-693137db2e7a"]},
         {Cell[
          "Critical Pair Lemma 35", "Subsection",ExpressionUUID->
           "9931b5eb-0f25-4d95-ac59-2add69da5892"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"90911578-1092-4193-8bf1-b213b3f44040"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox[
               RowBox[{
                OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}]}], 
            "\[Equal]", 
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x2", "_"]}]}]}]], "Code",ExpressionUUID->
           "142937e6-dbb4-4085-9d15-ab1383d53731"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "bf0e40c7-2791-43d1-b5cc-87653f9bed5f"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "0aa882a9-a2e4-4aeb-8291-c7676ce6997f"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "afbbe49e-9992-41e8-8aa6-ae4eebfae74a"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "4452f5f4-b5a3-4de5-b4c6-db26e8f7bf5c"]},
         {Cell[BoxData[
           RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]], "Code",
           ExpressionUUID->"712d76f3-6e25-4ab3-97f4-4986bfd95c41"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"3f05244a-590f-4fd2-8674-9aab04fdc3b7"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CircleTimes]", 
                OverscriptBox[
                 RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "_"]}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox["x2", "_"]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "cc0f2af1-c245-4027-a15b-751b4f90846b"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 6 and Substitution Lemma 20 \
respectively.\
\>", "CodeText",ExpressionUUID->"f966cf5b-c235-462f-8a0a-67c44be85999"]},
         {Cell[
          "Substitution Lemma 21", "Subsection",ExpressionUUID->
           "6fe732a5-e0cf-430c-b404-d1793b931a1b"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "780b003e-50c5-4d08-8909-a4add01eb9dc"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", 
              OverscriptBox[
               RowBox[{
                OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}]}], 
            "\[Equal]", "x1"}]], "Code",ExpressionUUID->
           "654dd789-1542-4809-9a8e-7ce7c0f61ebe"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d2dbb384-8ad5-492e-b979-c90578c257bf"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 35, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"4873a8dd-671c-4221-aef3-bbb52ea095d2"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "b86e4a30-3fbe-4f5e-a7a3-5790cacb4321"]},
         {Cell[
          "which follows from Axiom 2.", "CodeText",ExpressionUUID->
           "8779d8a0-739f-4105-ab2c-f692e83f74e3"]},
         {Cell[
          "Critical Pair Lemma 36", "Subsection",ExpressionUUID->
           "91ada428-bc17-430f-aae1-6e2f3b4cae06"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"feb95129-e94a-4a2a-bb5c-52c2f844ade3"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", 
               OverscriptBox[
                RowBox[{
                 OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], "_"]}], 
              ")"}]}], "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code",ExpressionUUID->
           "1bf43cc4-ebae-4ede-bd3c-277408ed653e"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "bc20e1ff-8b50-4bf0-844d-8b2f0c543e25"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "872436e6-df6b-43f7-b9e9-1b83b685e843"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2_", "\[CirclePlus]", 
                RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], ")"}]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", 
              RowBox[{"(", 
               RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "46fa794a-61df-4147-958e-fb7d1e431273"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "e9e18185-98fa-4275-a4d7-55bbf4e749e5"]},
         {Cell[BoxData[
           RowBox[{"x2_", "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}]], "Code",
           ExpressionUUID->"0aab8b1f-5ee0-4aef-ad8d-4078a22fa9e6"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"ed560be3-169e-429a-be95-42637834eab7"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              RowBox[{"x2_", "\[CircleTimes]", 
               OverscriptBox[
                RowBox[{
                 OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], 
                "_"]}]}], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "b435eaa0-3a03-4f29-b4a7-56ea1c4849ae"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 10 and Substitution Lemma 21 \
respectively.\
\>", "CodeText",ExpressionUUID->"f2f9bf03-fac2-4103-8cbd-c450af4746f1"]},
         {Cell[
          "Substitution Lemma 22", "Subsection",ExpressionUUID->
           "2964f670-a47d-416a-94f1-099365364bcf"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "bae566f4-a691-4ee1-9c9b-33857a932a5b"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{"x1", "\[CircleTimes]", 
             OverscriptBox[
              RowBox[{
               OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], "_"]}], 
            "\[Equal]", 
            RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code",ExpressionUUID->
           "6f15e3a0-3986-442e-a3ea-cc9431efc94b"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "bd3d49ce-baf6-48d8-a434-993e4892c386"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 36, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"89a71f34-01c2-4ecd-a3d4-03051d8ce0d5"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", 
              OverscriptBox[
               RowBox[{
                OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], "_"]}], 
             "\[Rule]", 
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}],
            DisplayForm]], "Code",ExpressionUUID->
           "c08cb1f0-34c2-43c0-9203-207cf8b89d94"]},
         {Cell[
          "which follows from Substitution Lemma 18.", "CodeText",
           ExpressionUUID->"e49d0fac-e5ca-43ba-9e10-6b17aae2a2ad"]},
         {Cell[
          "Critical Pair Lemma 37", "Subsection",ExpressionUUID->
           "51360b8c-8579-4e6b-9caa-3e3942375224"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"bb0dcb20-342c-4403-a5d5-31f10a072e13"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", 
             OverscriptBox[
              RowBox[{
               OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}], "_"]}], 
            "\[Equal]", 
            RowBox[{
             OverscriptBox["x1", "_"], "\[CirclePlus]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}]}]], "Code",
           ExpressionUUID->"86f1dd9f-1a0f-4f55-93a2-385e60301fa4"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "dddc3897-582f-40d6-818d-8852702e5c7b"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "feac0cb0-3730-4af5-bb8b-1fd5c8437cc7"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "dd2c1d79-7560-46eb-b70b-294a3fcdf31c"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "a7709ebc-7de1-497f-abff-99925ee663eb"]},
         {Cell[BoxData[
           RowBox[{"x1_", "\[CircleTimes]", "x2_"}]], "Code",ExpressionUUID->
           "d3b9d2ad-303b-4cb0-862d-a23eb32c1871"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"3b139b83-cf59-4e0f-b473-3d1db094126a"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CircleTimes]", 
              OverscriptBox[
               RowBox[{
                OverscriptBox["x2_", "_"], "\[CircleTimes]", "x1_"}], "_"]}], 
             "\[Rule]", 
             RowBox[{"x1", "\[CircleTimes]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "e6dd664d-b87e-492c-96c7-b8279f4cb4ad"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 12 and Substitution Lemma \
22 respectively.\
\>", "CodeText",ExpressionUUID->"fc86a478-4bd3-458e-bf5b-b3a742a51ee1"]},
         {Cell[
          "Substitution Lemma 23", "Subsection",ExpressionUUID->
           "7fb658e1-0c9a-4000-b819-0200426fdc66"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "073a988d-67e7-4f0e-880b-1c8b791c8854"]},
         {Cell[BoxData[
           RowBox[{
            OverscriptBox[
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
            "\[Equal]", 
            RowBox[{
             OverscriptBox["x2", "_"], "\[CirclePlus]", 
             RowBox[{"x2", "\[CircleTimes]", "x1"}]}]}]], "Code",
           ExpressionUUID->"8d5ca4b1-e8f6-4811-adcc-a3af556159ec"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "3ddf57e1-55cc-4c9b-9627-3789ab3d16f1"]},
         {Cell["\<\
We start by taking Critical Pair Lemma 37, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"c758838c-1a92-4ea3-8b42-ec9f48c41cc3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CirclePlus]", 
              OverscriptBox[
               RowBox[{"x2_", "\[CircleTimes]", "x1_"}], "_"]}], "\[Rule]", 
             OverscriptBox[
              RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}],
            DisplayForm]], "Code",ExpressionUUID->
           "4fdb0929-99a6-4f02-8072-91e682403f35"]},
         {Cell[
          "which follows from Substitution Lemma 16.", "CodeText",
           ExpressionUUID->"07ff8729-46e1-4f94-8f4e-dfc8d38de2c3"]},
         {Cell[
          "Substitution Lemma 24", "Subsection",ExpressionUUID->
           "3ef02ac9-8f44-42ff-a45d-77260cd56221"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "f8676c61-e070-45da-96ac-b0c8bbacd664"]},
         {Cell[BoxData[
           RowBox[{
            OverscriptBox[
             RowBox[{
              OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"], 
            "\[Equal]", 
            RowBox[{
             OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}]}]], "Code",
           ExpressionUUID->"7a023488-a9da-4327-aef9-b80070d36d34"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "00e1e38f-eaee-4abf-9efa-b893b8c965c4"]},
         {Cell["\<\
We start by taking Substitution Lemma 23, and apply the substitution:\
\>", "CodeText",ExpressionUUID->"86ed70c9-09b3-4e30-989b-5c25a532d800"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CirclePlus]", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
             RowBox[{
              OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "df477a32-ae70-4189-8afb-e6c1d51f78f8"]},
         {Cell[
          "which follows from Critical Pair Lemma 12.", "CodeText",
           ExpressionUUID->"1b47157a-f969-47ea-9fe7-578408114323"]},
         {Cell[
          "Critical Pair Lemma 38", "Subsection",ExpressionUUID->
           "279a57cf-b50f-437c-a262-2e59d370c2eb"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"21a0aebf-acc5-4bd5-9c65-53ae5dfbacfe"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "\[Equal]", 
            OverscriptBox[
             RowBox[{
              OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}], "_"]}]], 
           "Code",ExpressionUUID->"98fc7ea1-05f9-42fd-b93e-5e251e3c9568"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "ccb1e806-d44c-4244-9f09-75052c3d9c67"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "0025ec26-6db2-441a-9a3e-8d16fc0f68b7"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "e3c70649-8abe-46a4-b30c-6a59ed048fb3"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "81455efb-c016-41f8-a780-7dc26bacebae"]},
         {Cell[BoxData[
           OverscriptBox["x1_", "_"]], "Code",ExpressionUUID->
           "d190e5ff-6770-4ecf-a96c-05bf1692d22b"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"60054c76-dc47-4801-8d75-c4b25b267f7a"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], "_"], 
             "\[Rule]", 
             RowBox[{
              OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "7fea9f2a-ff6e-4dd4-80bf-f123611fd414"]},
         {Cell["\<\
where these rules follow from Substitution Lemma 3 and Substitution Lemma 24 \
respectively.\
\>", "CodeText",ExpressionUUID->"e83145c9-a9a1-4bef-911d-9f83b1beca5b"]},
         {Cell[
          "Critical Pair Lemma 39", "Subsection",ExpressionUUID->
           "652a0db0-95a2-438f-b876-ba153266ba62"]},
         {Cell[
          "The following expressions are equivalent:", "CodeText",
           ExpressionUUID->"36072200-79da-4ecb-bfb5-2643f286c590"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", 
             OverscriptBox["x2", "_"]}], "\[Equal]", 
            OverscriptBox[
             RowBox[{"x2", "\[CirclePlus]", "x1"}], "_"]}]], "Code",
           ExpressionUUID->"6f63ac4e-0b7c-45c5-bb3d-07713405e605"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "35590f71-8e06-47f3-b640-b82bd660763f"]},
         {Cell[
          "Note that the input for the rule:", "CodeText",ExpressionUUID->
           "e99e49e0-4a6d-4d80-bafc-267a6fdf49cc"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              RowBox[{
               OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], "_"], 
             "\[Rule]", 
             RowBox[{
              OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "4d7963ae-928e-412b-85e8-31853a1a8bad"]},
         {Cell[
          "contains a subpattern of the form:", "CodeText",ExpressionUUID->
           "b5a90ea4-447e-4514-95d7-53d8ca996056"]},
         {Cell[BoxData[
           OverscriptBox["x1_", "_"]], "Code",ExpressionUUID->
           "c257efd3-1170-49b7-b244-779664eacd64"]},
         {Cell[
          "which can be unified with the input for the rule:", "CodeText",
           ExpressionUUID->"a8a8af0d-72cb-4ad8-a362-3e182c93a1bc"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}],
            DisplayForm]], "Code",ExpressionUUID->
           "7c451c4a-6300-4489-9028-b7d28310b1fa"]},
         {Cell["\<\
where these rules follow from Critical Pair Lemma 38 and Substitution Lemma 3 \
respectively.\
\>", "CodeText",ExpressionUUID->"403bebc1-2c46-46a3-9f0e-bbece5a4cf79"]},
         {Cell[
          "Substitution Lemma 25", "Subsection",ExpressionUUID->
           "c5469619-e235-4d4d-ab38-f1e66fb05603"]},
         {Cell[
          "It can be shown that:", "CodeText",ExpressionUUID->
           "529142b5-0897-411a-8fc6-075421583fc0"]},
         {Cell[BoxData[
           RowBox[{
            RowBox[{
             OverscriptBox["\[FormalB]", "_"], "\[CircleTimes]", 
             OverscriptBox["\[FormalA]", "_"]}], "\[Equal]", 
            OverscriptBox[
             RowBox[{"\[FormalA]", "\[CirclePlus]", "\[FormalB]"}], "_"]}]], 
           "Code",ExpressionUUID->"4bf91640-4ae5-4286-8b05-79cd23d14a1f"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "bca625d7-f25b-4a9e-84d0-4deb2fd7ed3f"]},
         {Cell[
          "We start by taking Hypothesis 1, and apply the substitution:", 
           "CodeText",ExpressionUUID->"7e9602d9-d54e-4416-af4b-d11967b507e3"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
             RowBox[{"x2", "\[CirclePlus]", "x1"}]}],
            DisplayForm]], "Code",ExpressionUUID->
           "37f58f61-0c86-469a-a775-7190801fe0a7"]},
         {Cell[
          "which follows from Axiom 6.", "CodeText",ExpressionUUID->
           "bb6e31af-312c-4f9c-b779-579768a5bcdc"]},
         {Cell[
          "Conclusion 1", "Subsection",ExpressionUUID->
           "ad4c6a68-20dc-45ee-939a-13a0420988ad"]},
         {Cell[
          "We obtain the conclusion:", "CodeText",ExpressionUUID->
           "dc85b080-5984-42e2-a4d6-75e1552ffc49"]},
         {Cell[BoxData[
          "True"], "Code",ExpressionUUID->
           "79c83505-aeb0-42b1-8c83-5d6ea3b5c28e"]},
         {Cell["Proof", "Subsubsection",
           FontVariations->{"CapsType"->"SmallCaps"},ExpressionUUID->
           "d8d1b814-071e-4b58-bbe4-5778de3be988"]},
         {Cell[
          "Take Substitution Lemma 25, and apply the substitution:", 
           "CodeText",ExpressionUUID->"92cca7b9-3610-4d6a-9557-151fd9d74e41"]},
         {Cell[BoxData[
           TagBox[
            RowBox[{
             RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}], "\[Rule]", 
             OverscriptBox[
              RowBox[{"x2", "\[CirclePlus]", "x1"}], "_"]}],
            DisplayForm]], "Code",ExpressionUUID->
           "11872e33-afa2-49af-a00a-899fd6219297"]},
         {Cell[
          "which follows from Critical Pair Lemma 39.", "CodeText",
           ExpressionUUID->"43cf8ac1-f28e-485a-be67-e06faca650e0"]}
        },
        GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
       Background->GrayLevel[1],
       Frame->True,
       FrameStyle->GrayLevel[0, 0.2]]}
    },
    GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}],
   BaseStyle->{FontFamily -> "Times"},
   DefaultBaseStyle->{},
   FrameMargins->5],
  DocumentNotebook[{
    TextCell["Axiom 1", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, 
        OverBar[$CellContext`x2]]], "Code"], 
    TextCell["Axiom 2", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[$CellContext`x2]]], "Code"], 
    TextCell["Axiom 3", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
    CircleTimes[$CellContext`x1, $CellContext`x2] == 
     CircleTimes[$CellContext`x2, $CellContext`x1], "Code"], 
    TextCell["Axiom 4", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       CircleTimes[$CellContext`x1, $CellContext`x3]], "Code"], 
    TextCell["Axiom 5", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CirclePlus[$CellContext`x1, $CellContext`x2], 
       CirclePlus[$CellContext`x1, $CellContext`x3]] == 
     CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, $CellContext`x3]], "Code"], 
    TextCell["Axiom 6", "Subsection"], 
    TextCell["We are given that:", "CodeText"], 
    ExpressionCell[
    CirclePlus[$CellContext`x1, $CellContext`x2] == 
     CirclePlus[$CellContext`x2, $CellContext`x1], "Code"], 
    TextCell["Hypothesis 1", "Subsection"], 
    TextCell["We would like to show that:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[\[FormalB]], 
       OverBar[\[FormalA]]] == OverBar[
       CirclePlus[\[FormalB], \[FormalA]]], "Code"], 
    TextCell["Critical Pair Lemma 1", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CirclePlus[$CellContext`x1, 
        OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CirclePlus]", 
                OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell[
      "where these rules follow from Axiom 3 and Axiom 1 respectively.", 
       "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 2", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, 
        OverBar[$CellContext`x1]]] == 
     CircleTimes[$CellContext`x1, $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]]], 
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x3, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Axiom 4 and Axiom 2 respectively.", 
       "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 3", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, $CellContext`x3]] == CirclePlus[
       CircleTimes[$CellContext`x2, $CellContext`x1], 
       CircleTimes[$CellContext`x1, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Axiom 4 and Axiom 3 respectively.", 
       "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 4", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[$CellContext`x1]]] == 
     CirclePlus[$CellContext`x1, $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", 
            RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        CirclePlus[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]]], 
        CirclePlus[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x3, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CirclePlus]", 
                OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell[
      "where these rules follow from Axiom 5 and Axiom 1 respectively.", 
       "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 5", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       CircleTimes[$CellContext`x1, 
        OverBar[$CellContext`x1]], $CellContext`x2] == $CellContext`x2, 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Axiom 6 and Axiom 2 respectively.", 
       "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 6", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[
    CirclePlus[$CellContext`x1, $CellContext`x2] == 
     CirclePlus[$CellContext`x1, 
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", 
                OverscriptBox["x1_", "_"]}], ")"}], "\[CircleTimes]", "x2_"}],
           "\[Rule]", "x2"}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        CirclePlus[
         Pattern[$CellContext`x1, 
          Blank[]], 
         OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", 
            RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 1 and Axiom 5 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 7", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[
    CircleTimes[$CellContext`x1, $CellContext`x2] == 
     CircleTimes[$CellContext`x1, 
       CirclePlus[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", 
              OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}], 
          "\[Rule]", "x2"}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 5 and Axiom 4 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 8", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       OverBar[
        OverBar[$CellContext`x1]]] == $CellContext`x1, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        CircleTimes[
         OverBar[
          Pattern[$CellContext`x1, 
           Blank[]]], 
         Pattern[$CellContext`x2, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 6 and Axiom 2 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 9", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       OverBar[
        OverBar[
         OverBar[$CellContext`x1]]]] == CircleTimes[$CellContext`x1, 
       OverBar[$CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        OverBar[
         Pattern[$CellContext`x1, 
          Blank[]]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            OverscriptBox[
             OverscriptBox["x1_", "_"], "_"]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 7 and Critical Pair \
Lemma 8 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 10", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[
        OverBar[$CellContext`x1]], $CellContext`x1] == CirclePlus[
       OverBar[
        OverBar[$CellContext`x1]], 
       CircleTimes[$CellContext`x1, 
        OverBar[$CellContext`x1]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x1_", "_"]}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        OverBar[
         Pattern[$CellContext`x1, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            OverscriptBox[
             OverscriptBox[
              OverscriptBox["x1_", "_"], "_"], "_"]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            OverscriptBox["x1", "_"]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 4 and Critical Pair \
Lemma 9 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 1", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[
        OverBar[$CellContext`x1]], $CellContext`x1] == OverBar[
       OverBar[$CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 10, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 2", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       OverBar[
        OverBar[$CellContext`x1]]] == OverBar[
       OverBar[$CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 1, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
          RowBox[{"x2", "\[CirclePlus]", "x1"}]}]], "Code"], 
      TextCell["which follows from Axiom 6.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 3", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == OverBar[
       OverBar[$CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 2, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            OverscriptBox[
             OverscriptBox["x1_", "_"], "_"]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 8.", "CodeText"]}, 1], 
    
    TextCell["Critical Pair Lemma 11", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[$CellContext`x1], $CellContext`x2] == CircleTimes[
       OverBar[$CellContext`x1], 
       CirclePlus[$CellContext`x1, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       OverBar[
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 7 and Substitution \
Lemma 3 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 12", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
       OverBar[$CellContext`x1], 
       CircleTimes[$CellContext`x1, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       OverBar[
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 6 and Substitution \
Lemma 3 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 13", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[$CellContext`x1], $CellContext`x2] == CirclePlus[
       OverBar[$CellContext`x1], 
       CircleTimes[$CellContext`x2, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x1_", "_"]}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       OverBar[
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 4 and Substitution \
Lemma 3 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 14", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CirclePlus[$CellContext`x1, $CellContext`x2]] == 
     CirclePlus[$CellContext`x1, 
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        OverBar[
         Pattern[$CellContext`x1, 
          Blank[]]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 6 and Critical Pair \
Lemma 11 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 4", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CirclePlus[$CellContext`x1, $CellContext`x2]] == 
     CirclePlus[$CellContext`x1, $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 14, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 6.", "CodeText"]}, 1], 
    
    TextCell["Critical Pair Lemma 15", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        CirclePlus[$CellContext`x1, $CellContext`x3]]] == CircleTimes[
       CirclePlus[$CellContext`x1, $CellContext`x2], 
       CirclePlus[$CellContext`x1, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", 
            RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x3, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Axiom 5 and Substitution Lemma 4 \
respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 5", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        CirclePlus[$CellContext`x1, $CellContext`x3]]] == 
     CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 15, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", 
            RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
      TextCell["which follows from Axiom 5.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 16", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[
        OverBar[$CellContext`x1]], 
       CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
       OverBar[
        OverBar[$CellContext`x1]], 
       CirclePlus[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 11 and Critical Pair \
Lemma 12 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 6", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
       OverBar[
        OverBar[$CellContext`x1]], 
       CirclePlus[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 16, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 3.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 7", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x1, $CellContext`x2]] == CircleTimes[
       OverBar[
        OverBar[$CellContext`x1]], $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 6, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 11.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 8", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x1, $CellContext`x2]] == 
     CircleTimes[$CellContext`x1, $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 7, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Substitution Lemma 3.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 17", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[
        CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
     CirclePlus[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       CircleTimes[$CellContext`x1, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Axiom 4 and Substitution Lemma 8 \
respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 9", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[
        CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3]] == 
     CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 17, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["which follows from Axiom 4.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 18", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, 
        CircleTimes[$CellContext`x1, $CellContext`x3]]] == CirclePlus[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       CircleTimes[$CellContext`x1, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x3, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Axiom 4 and Substitution Lemma 8 \
respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 10", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, 
        CircleTimes[$CellContext`x1, $CellContext`x3]]] == 
     CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 18, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["which follows from Axiom 4.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 19", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[$CellContext`x2]]] == CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              RowBox[{"(", 
                RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}]}], "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", 
            RowBox[{"x2", "\[CircleTimes]", "x3"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        CirclePlus[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x3, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CirclePlus]", 
                OverscriptBox["x1_", "_"]}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 5 and Critical Pair \
Lemma 2 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 11", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 19, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 20", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       OverBar[$CellContext`x1]] == CircleTimes[$CellContext`x2, 
       CircleTimes[$CellContext`x1, 
        OverBar[$CellContext`x1]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        CircleTimes[
         Pattern[$CellContext`x2, 
          Blank[]], 
         Pattern[$CellContext`x1, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", 
              OverscriptBox["x1_", "_"]}], "\[CirclePlus]", "x2_"}], 
          "\[Rule]", "x2"}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 11 and Critical Pair \
Lemma 5 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 21", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[$CellContext`x1 == CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x1, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 11 and Axiom 3 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 22", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[$CellContext`x1], 
       CircleTimes[$CellContext`x2, $CellContext`x1]] == CircleTimes[
       OverBar[$CellContext`x1], $CellContext`x1], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 11 and Substitution \
Lemma 11 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 23", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]] == 
     CircleTimes[$CellContext`x1, 
       OverBar[$CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        OverBar[
         Pattern[$CellContext`x1, 
          Blank[]]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 7 and Critical Pair \
Lemma 21 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 12", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[$CellContext`x1], 
       CircleTimes[$CellContext`x2, $CellContext`x1]] == 
     CircleTimes[$CellContext`x1, 
       OverBar[$CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 22, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[Rule]", 
          RowBox[{"x2", "\[CircleTimes]", "x1"}]}]], "Code"], 
      TextCell["which follows from Axiom 3.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 24", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       OverBar[
        CircleTimes[$CellContext`x1, $CellContext`x2]]] == CircleTimes[
       OverBar[
        CircleTimes[$CellContext`x1, $CellContext`x2]], 
       CircleTimes[$CellContext`x2, 
        OverBar[$CellContext`x2]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            OverscriptBox["x1", "_"]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            OverscriptBox["x1", "_"]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 12 and Substitution \
Lemma 12 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 13", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       OverBar[
        CircleTimes[$CellContext`x1, $CellContext`x2]]] == 
     CircleTimes[$CellContext`x2, 
       OverBar[$CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 24, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", 
                OverscriptBox["x2_", "_"]}], ")"}]}], "\[Rule]", 
          RowBox[{"x2", "\[CircleTimes]", 
            OverscriptBox["x2", "_"]}]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 20.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 25", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[
        CircleTimes[$CellContext`x1, $CellContext`x2]], 
       OverBar[$CellContext`x2]] == CirclePlus[
       OverBar[
        CircleTimes[$CellContext`x1, $CellContext`x2]], 
       CircleTimes[$CellContext`x2, 
        OverBar[$CellContext`x2]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            OverscriptBox["x1", "_"]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 13 and Substitution \
Lemma 12 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 14", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[
        CircleTimes[$CellContext`x1, $CellContext`x2]], 
       OverBar[$CellContext`x2]] == OverBar[
       CircleTimes[$CellContext`x1, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 25, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 26", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[
        CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
     CirclePlus[
       OverBar[
        CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x2]], 
       CircleTimes[$CellContext`x1, 
        OverBar[$CellContext`x1]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], ")"}]}],
           "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            OverscriptBox["x1", "_"]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 13 and Critical Pair \
Lemma 23 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 15", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[
        CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x2]], $CellContext`x1] == 
     OverBar[
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 26, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 16", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[$CellContext`x1], 
       OverBar[
        CircleTimes[$CellContext`x2, $CellContext`x1]]] == OverBar[
       CircleTimes[$CellContext`x2, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 14, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
          RowBox[{"x2", "\[CirclePlus]", "x1"}]}]], "Code"], 
      TextCell["which follows from Axiom 6.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 27", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, 
        CircleTimes[$CellContext`x2, $CellContext`x3]]] == 
     CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        CirclePlus[$CellContext`x1, $CellContext`x3]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
                "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]]], 
        Pattern[$CellContext`x3, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x3_"}]}], "\[Rule]", 
          RowBox[{"x2", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x1", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 9 and Critical Pair \
Lemma 3 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 17", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[
    CircleTimes[$CellContext`x1, $CellContext`x2] == 
     CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        CirclePlus[$CellContext`x1, $CellContext`x3]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 27, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell["which follows from Critical Pair Lemma 21.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 28", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[
    CircleTimes[$CellContext`x1, $CellContext`x2] == 
     CircleTimes[$CellContext`x1, 
       CircleTimes[
        CirclePlus[$CellContext`x1, $CellContext`x3], $CellContext`x2]], 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", 
                RowBox[{"(", 
                  RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x2, 
         Blank[]], 
        CirclePlus[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x3, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 17 and Axiom 3 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 29", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[
    CircleTimes[$CellContext`x1, $CellContext`x2] == 
     CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        CirclePlus[$CellContext`x3, $CellContext`x1]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", 
                RowBox[{"(", 
                  RowBox[{"x1_", "\[CirclePlus]", "x3_"}], ")"}]}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x3, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 17 and Axiom 6 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 30", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[
    CircleTimes[$CellContext`x1, $CellContext`x2] == 
     CircleTimes[$CellContext`x1, 
       CircleTimes[
        CirclePlus[$CellContext`x3, $CellContext`x1], $CellContext`x2]], 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                RowBox[{"(", 
                  RowBox[{"x1_", "\[CirclePlus]", "x2_"}], ")"}], 
                "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x3"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CirclePlus]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 28 and Axiom 6 \
respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 31", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
     CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       CircleTimes[$CellContext`x3, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", 
                RowBox[{"(", 
                  RowBox[{"x3_", "\[CirclePlus]", "x1_"}], ")"}]}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x3, 
         Blank[]], 
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 29 and Critical Pair \
Lemma 21 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 32", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
     CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], 
       CircleTimes[$CellContext`x2, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{
                RowBox[{"(", 
                  RowBox[{"x2_", "\[CirclePlus]", "x1_"}], ")"}], 
                "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x3"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x2, 
         Blank[]], 
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}], "\[Rule]", "x1"}]], 
       "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 30 and Substitution \
Lemma 11 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 18", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       OverBar[
        CircleTimes[
         OverBar[$CellContext`x1], $CellContext`x2]]] == OverBar[
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 15, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
          RowBox[{"x2", "\[CirclePlus]", "x1"}]}]], "Code"], 
      TextCell["which follows from Axiom 6.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 33", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
     CircleTimes[
       CircleTimes[$CellContext`x3, $CellContext`x1], 
       CircleTimes[$CellContext`x1, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}]}], "\[Rule]", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
             "x3"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]]], 
        CircleTimes[
         Pattern[$CellContext`x3, 
          Blank[]], 
         Pattern[$CellContext`x1, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 31 and Axiom 3 \
respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 19", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
     CircleTimes[
       CircleTimes[$CellContext`x3, $CellContext`x1], $CellContext`x2], 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 33, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
            "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", "x3_"}], ")"}]}], "\[Rule]", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1", "\[CircleTimes]", "x2"}], ")"}], "\[CircleTimes]",
             "x3"}]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 32.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 34", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       CircleTimes[$CellContext`x1, $CellContext`x2], $CellContext`x3] == 
     CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x2, $CellContext`x3]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
            "\[CircleTimes]", "x3_"}], "\[TwoWayRule]", 
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x3_", "\[CircleTimes]", "x1_"}], ")"}], 
            "\[CircleTimes]", "x2_"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x2, 
          Blank[]]], 
        Pattern[$CellContext`x3, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "\[TwoWayRule]", 
          RowBox[{"x2_", "\[CircleTimes]", "x1_"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 19 and Axiom 3 \
respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 20", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[
         CircleTimes[$CellContext`x1, $CellContext`x2]]]] == 
     CircleTimes[$CellContext`x2, 
       OverBar[$CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 13, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            RowBox[{"(", 
              RowBox[{"x1_", "\[CircleTimes]", "x2_"}], ")"}], 
            "\[CircleTimes]", "x3_"}], "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CircleTimes]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 34.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 35", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]]]] == 
     CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[$CellContext`x2]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{
              OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        OverBar[
         Pattern[$CellContext`x1, 
          Blank[]]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CircleTimes]", 
                OverscriptBox[
                 RowBox[{"x1_", "\[CircleTimes]", "x2_"}], "_"]}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x2", "\[CircleTimes]", 
            OverscriptBox["x2", "_"]}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 6 and Substitution \
Lemma 20 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 21", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CirclePlus[$CellContext`x1, 
       CircleTimes[$CellContext`x2, 
        OverBar[
         CircleTimes[
          OverBar[$CellContext`x1], $CellContext`x2]]]] == $CellContext`x1, 
     "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 35, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox["x2_", "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell["which follows from Axiom 2.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 36", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       CirclePlus[$CellContext`x2, 
        OverBar[
         CircleTimes[
          OverBar[$CellContext`x2], $CellContext`x1]]]] == 
     CircleTimes[$CellContext`x1, $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2_", "\[CirclePlus]", 
                RowBox[{"x1_", "\[CircleTimes]", "x3_"}]}], ")"}]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", 
            RowBox[{"(", 
              RowBox[{"x2", "\[CirclePlus]", "x3"}], ")"}]}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CirclePlus[
        Pattern[$CellContext`x2, 
         Blank[]], 
        CircleTimes[
         Pattern[$CellContext`x1, 
          Blank[]], 
         Pattern[$CellContext`x3, 
          Blank[]]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            RowBox[{"x2_", "\[CircleTimes]", 
              OverscriptBox[
               RowBox[{
                 OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], 
               "_"]}]}], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 10 and Substitution \
Lemma 21 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 22", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[$CellContext`x1, 
       OverBar[
        CircleTimes[
         OverBar[$CellContext`x2], $CellContext`x1]]] == 
     CircleTimes[$CellContext`x1, $CellContext`x2], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 36, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", 
            OverscriptBox[
             RowBox[{
               OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], "_"]}], 
          "\[Rule]", 
          OverscriptBox[
           RowBox[{
             OverscriptBox["x1", "_"], "\[CircleTimes]", "x2"}], "_"]}]], 
       "Code"], 
      TextCell["which follows from Substitution Lemma 18.", "CodeText"]}, 1], 
    
    TextCell["Critical Pair Lemma 37", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CirclePlus[
       OverBar[$CellContext`x1], 
       OverBar[
        CircleTimes[
         OverBar[$CellContext`x2], $CellContext`x1]]] == CirclePlus[
       OverBar[$CellContext`x1], 
       CircleTimes[$CellContext`x1, $CellContext`x2]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       CircleTimes[
        Pattern[$CellContext`x1, 
         Blank[]], 
        Pattern[$CellContext`x2, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CircleTimes]", 
            OverscriptBox[
             RowBox[{
               OverscriptBox["x2_", "_"], "\[CircleTimes]", "x1_"}], "_"]}], 
          "\[Rule]", 
          RowBox[{"x1", "\[CircleTimes]", "x2"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 12 and Substitution \
Lemma 22 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 23", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[OverBar[
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
       OverBar[$CellContext`x2], 
       CircleTimes[$CellContext`x2, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Critical Pair Lemma 37, and apply the \
substitution:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", 
            OverscriptBox[
             RowBox[{"x2_", "\[CircleTimes]", "x1_"}], "_"]}], "\[Rule]", 
          OverscriptBox[
           RowBox[{"x2", "\[CircleTimes]", "x1"}], "_"]}]], "Code"], 
      TextCell["which follows from Substitution Lemma 16.", "CodeText"]}, 1], 
    
    TextCell["Substitution Lemma 24", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[OverBar[
       CircleTimes[
        OverBar[$CellContext`x1], $CellContext`x2]] == CirclePlus[
       OverBar[$CellContext`x2], $CellContext`x1], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Substitution Lemma 23, and apply the substitution:",
        "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CirclePlus]", 
            RowBox[{"x1_", "\[CircleTimes]", "x2_"}]}], "\[Rule]", 
          RowBox[{
            OverscriptBox["x1", "_"], "\[CirclePlus]", "x2"}]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 12.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 38", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[$CellContext`x1], $CellContext`x2] == OverBar[
       CirclePlus[
        OverBar[$CellContext`x2], $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       OverBar[
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           RowBox[{
             OverscriptBox["x1_", "_"], "\[CircleTimes]", "x2_"}], "_"], 
          "\[Rule]", 
          RowBox[{
            OverscriptBox["x2", "_"], "\[CirclePlus]", "x1"}]}]], "Code"], 
      TextCell[
      "where these rules follow from Substitution Lemma 3 and Substitution \
Lemma 24 respectively.", "CodeText"]}, 1], 
    TextCell["Critical Pair Lemma 39", "Subsection"], 
    TextCell["The following expressions are equivalent:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[$CellContext`x1], 
       OverBar[$CellContext`x2]] == OverBar[
       CirclePlus[$CellContext`x2, $CellContext`x1]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell["Note that the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           RowBox[{
             OverscriptBox["x1_", "_"], "\[CirclePlus]", "x2_"}], "_"], 
          "\[Rule]", 
          RowBox[{
            OverscriptBox["x2", "_"], "\[CircleTimes]", "x1"}]}]], "Code"], 
      TextCell["contains a subpattern of the form:", "CodeText"], 
      ExpressionCell[
       OverBar[
        Pattern[$CellContext`x1, 
         Blank[]]], "Code"], 
      TextCell[
      "which can be unified with the input for the rule:", "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          OverscriptBox[
           OverscriptBox["x1_", "_"], "_"], "\[Rule]", "x1"}]], "Code"], 
      TextCell[
      "where these rules follow from Critical Pair Lemma 38 and Substitution \
Lemma 3 respectively.", "CodeText"]}, 1], 
    TextCell["Substitution Lemma 25", "Subsection"], 
    TextCell["It can be shown that:", "CodeText"], 
    ExpressionCell[CircleTimes[
       OverBar[\[FormalB]], 
       OverBar[\[FormalA]]] == OverBar[
       CirclePlus[\[FormalA], \[FormalB]]], "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "We start by taking Hypothesis 1, and apply the substitution:", 
       "CodeText"], 
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{"x1_", "\[CirclePlus]", "x2_"}], "\[Rule]", 
          RowBox[{"x2", "\[CirclePlus]", "x1"}]}]], "Code"], 
      TextCell["which follows from Axiom 6.", "CodeText"]}, 1], 
    TextCell["Conclusion 1", "Subsection"], 
    TextCell["We obtain the conclusion:", "CodeText"], 
    ExpressionCell[True, "Code"], 
    CellGroup[{
      TextCell[
      "Proof", "Subsubsection", 
       FontVariations -> {"CapsType" -> "SmallCaps"}], 
      TextCell[
      "Take Substitution Lemma 25, and apply the substitution:", "CodeText"], 
      
      ExpressionCell[
       DisplayForm[
        RowBox[{
          RowBox[{
            OverscriptBox["x1_", "_"], "\[CircleTimes]", 
            OverscriptBox["x2_", "_"]}], "\[Rule]", 
          OverscriptBox[
           RowBox[{"x2", "\[CirclePlus]", "x1"}], "_"]}]], "Code"], 
      TextCell["which follows from Critical Pair Lemma 39.", "CodeText"]}, 
     1]}]]], "Output",
 CellChangeTimes->{3.8009339963722057`*^9},
 CellLabel->"Out[16]=",ExpressionUUID->"ba75712d-7bb8-45fb-88ff-ec8d8f8ccfdb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"n", "\[Rule]", "e"}], ",", "\[IndentingNewLine]", 
    RowBox[{"n", "\[Rule]", "o"}], ",", "\[IndentingNewLine]", 
    RowBox[{"e", "\[Rule]", "n"}], ",", "\[IndentingNewLine]", 
    RowBox[{"o", "\[Rule]", "e"}]}], "\[IndentingNewLine]", "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.8009340122366*^9, 3.800934067198359*^9}},
 CellLabel->"In[17]:=",ExpressionUUID->"71ecf318-4eaa-4390-ad2e-65b26cf331a9"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`n, $CellContext`e, $CellContext`o}, {{{1, 2}, {1, 
       3}, {2, 1}, {3, 2}}, Null}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJwBQQK+/SFib1JlAgAAACMAAAACAAAAtUEeyZLN3z8AAAAAAAAAAD2QoaXy
/+8/wpQs9uSn6z8AAAAAAAAAAGQllAb6xOs/WKBo6VSU4D/aUN37miC8Pw4q
noCuxeA/3EKnq1OawT9HofFN3QHhP9C8hAvQGcU/PjZOr71I4T/aKzFqsIzI
P/iSwK0lmuE/f36UC+rwyz/Bjk8W5fXhP4ngVOB6RM8/iNuFlsVb4j9wIRpb
tULRPzrHm9yKy+I/4GhLMebY0j/G82/DATzpP7y86kdofOQ/4DIComm16T9o
buXo5EHlP8OOQDcsOOo/dyQe0lAB5j/sRH0X/MPqP/qvRq06uuY/AOQDe4ZY
6z99kYH+NGznP8yCHG9z9es/RMA0ZdYW6D8yTB4KZprsP4wCbtq5ueg/Noty
ovxG7T/a5bPsflTpP8IQyCBnUu8/qOqwltEj6D8Lh5KJDSHvPwvEQgtQQec/
1A8/vN7k7j+OZUvzcGHmP9x64lr+ne4/zEmg27iE5T8iHnBclkzuPyN1R3Oq
q+Q/WCLh89bw7T+gXBc+xtbjP5LVqnP2iu0/CoSfSIoG4z/g6ZQtMRvtP1Pg
ht1xO+I/VL3ARrqq5j8cYAe58q3MPzp+LmhSMeY/aJkcNQCYyT9WIvDSj67l
PyzBOZBQmsY/Lmyz8r8i5T8ik5cjqbbDPxrNLI81juQ/FA2s3r/uwD9OLhSb
SPHjP+yjvod0iLw/6GQSAFZM4z+0kfTdWHG3P+Qlvme/n+I/RHfFSzCbsj8U
0h1c
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[BezierCurveBox[{
          1, {0.6063408377933762, 0.514847901524803}, 2}], 
          0.012729918945439149`], ArrowBox[{1, 3}, 0.012729918945439149`], 
         ArrowBox[BezierCurveBox[{
          2, {0.8905749984480927, 0.3493970180698374}, 1}], 
          0.012729918945439149`], ArrowBox[{3, 2}, 0.012729918945439149`]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.012729918945439149], DiskBox[2, 0.012729918945439149], 
         DiskBox[3, 0.012729918945439149]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.800934067809166*^9},
 CellLabel->"Out[17]=",ExpressionUUID->"443eba6d-7c3d-4043-a78d-7f5e57907939"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"n", "\[Rule]", "e"}], ",", "\[IndentingNewLine]", 
     RowBox[{"n", "\[Rule]", "o"}], ",", "\[IndentingNewLine]", 
     RowBox[{"e", "\[Rule]", "n"}], ",", "\[IndentingNewLine]", 
     RowBox[{"o", "\[Rule]", "e"}]}], "\[IndentingNewLine]", "}"}], ",", 
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
    "down", ",", "\[IndentingNewLine]", "up", ",", "\[IndentingNewLine]", 
     "down", ",", "\[IndentingNewLine]", "up"}], "\[IndentingNewLine]", 
    "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8009341447691107`*^9, 3.800934183190053*^9}},
 CellLabel->"In[18]:=",ExpressionUUID->"58cb6aeb-dbe9-46f6-805d-c6b22b8352ac"],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"n", "\[Rule]", "e"}], ",", 
     RowBox[{"n", "\[Rule]", "o"}], ",", 
     RowBox[{"e", "\[Rule]", "n"}], ",", 
     RowBox[{"o", "\[Rule]", "e"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"down", ",", "up", ",", "down", ",", "up"}], "}"}]}], 
  "]"}]], "Output",
 CellChangeTimes->{3.80093418363164*^9},
 CellLabel->"Out[18]=",ExpressionUUID->"e715d7b7-0a69-4599-a4b0-2a8ef98df6fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"n", "\[Rule]", "e"}], ",", "\[IndentingNewLine]", 
     RowBox[{"n", "\[Rule]", "o"}], ",", "\[IndentingNewLine]", 
     RowBox[{"e", "\[Rule]", "n"}], ",", "\[IndentingNewLine]", 
     RowBox[{"o", "\[Rule]", "e"}]}], "\[IndentingNewLine]", "}"}], ",", 
   RowBox[{"EdgeLabels", "\[Rule]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
     "down", ",", "\[IndentingNewLine]", "up", ",", "\[IndentingNewLine]", 
      "down", ",", "\[IndentingNewLine]", "up"}], "\[IndentingNewLine]", 
     "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.800934195002192*^9, 3.8009341975658216`*^9}},
 CellLabel->"In[19]:=",ExpressionUUID->"d2367168-19db-42c8-a383-2e417ea0c6e2"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`n, $CellContext`e, $CellContext`o}, {{{1, 2}, {1, 
       3}, {2, 1}, {3, 2}}, Null}, {EdgeLabels -> {$CellContext`up}}]]}, 
    TagBox[GraphicsGroupBox[{
       {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[
        Medium], {
         ArrowBox[BezierCurveBox[{{0.49692220344970944`, 0.}, {
          0.6063408377933762, 0.514847901524803}, {0.9999936327917635, 
          0.8642449195946471}}], 0.012729918945439149`], 
         InsetBox["up", {0.6879607737491111, 0.46733745985126735}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0.49692220344970944`, 0.}, {0., 0.8677950027933261}}, 
          0.012729918945439149`], 
         InsetBox["up", {0.24846110172485472, 0.43389750139666305}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[BezierCurveBox[{{0.9999936327917635, 0.8642449195946471}, {
          0.8905749984480927, 0.3493970180698374}, {0.49692220344970944`, 
          0.}}], 0.012729918945439149`], 
         InsetBox["up", {0.8089550624923618, 0.39690745974337976}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}, {
         ArrowBox[{{0., 0.8677950027933261}, {0.9999936327917635, 
          0.8642449195946471}}, 0.012729918945439149`], 
         InsetBox["up", {0.4999968163958817, 0.8660199611939866}, 
          ImageScaled[{0.5, 0.5}],
          BaseStyle->"Graphics"]}}, 
       {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
        DiskBox[{0.49692220344970944, 0.}, 0.012729918945439149], 
        DiskBox[{0.9999936327917635, 0.8642449195946471}, 
         0.012729918945439149], 
        DiskBox[{0., 0.8677950027933261}, 0.012729918945439149]}}],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.80093419942527*^9},
 CellLabel->"Out[19]=",ExpressionUUID->"ddb99f65-7fa0-41be-b8d9-60e69cc11a04"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"e", "\[Rule]", "o"}], ",", "\[IndentingNewLine]", 
    RowBox[{"e", "\[Rule]", "e"}], ",", "\[IndentingNewLine]", 
    RowBox[{"o", "\[Rule]", "e"}]}], "\[IndentingNewLine]", "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.800934221347962*^9, 3.800934239742587*^9}, {
  3.800934484517062*^9, 3.800934496042967*^9}},
 CellLabel->"In[20]:=",ExpressionUUID->"7a53402a-0e29-4b73-b3b8-fc01dcf17283"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{$CellContext`e, $CellContext`o}, {{{1, 2}, {1, 1}, {2, 1}}, 
       Null}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJxV0FFIU1EcBvCLBfNFHYsUzIpYqDCItSJdrX2zIiOirEm1laRS0coI6kHB
wpwrKsQFQSRaL+WjJUVMCvffJNlGUVnS1mCpZVmacp1lSLhSz/8+3AOXew/n
nnO+37em+tyBE2mSJJnnn4W3GDIk1ZBJ+frgLDraOL8+HSk12ZdfxsmOpdkd
R2RseG9vuDvai0JrssZnn4L5z5Pd8Qf9aKy7df7dQBLR77k77pyJ4UYmOXSB
X4hPeEq/WBJYUl/SmzU5g/DZlsDrp4NoOmSMpZtmMZfZarl9fxBry7dV1lX8
Rc36g8OPNAkkL5XPvt0+h9XdKdfDnBiGTaHpLH8KtpLaZb+L+xHbZ6341PkP
K7akThmmgorDlpbT13zdNWCJ8/qrzYvrNML7c8V+muHzU77F86mQ7y8T99M1
zvdN5KN0zu8T+amFfW+Ej5rY/1L4ycD9bBL9kNKfXvRHSr9J0S/tzPdk39v6
A9qws0A38ZgurnPXX/CMwlb7LBSt8pHT1+CSX3yFrVM/3m54TnZTQXSlNIJK
d6hav8tPmmbdkKboM8Ibr0YizgCN7c3I7zk9hMM3j/dZzUHSOrqq2osT6HJ6
J3/6g+RtXRgfIe/vXnVlPEhtYk7KPE/8T8r/sjiPlPMyxH2k3OcQeaiM8xwT
ecnIed3CQ0b27BFektjLfmI/2E/sB/uJ/WA/sR8adR6MqfNCq/bAq/aiTd0H
8tR9QVb3iQx132A/2A/2g/1gP9gP9oP9+A+WgMiJ
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[Medium], 
         ArrowBox[BezierCurveBox[{1, 6, 9, 11, 17, 19, 22, 1},
          SplineDegree->7], 0.02261146496815286], 
         ArrowBox[BezierCurveBox[{1, {0., -0.32888149436623243`}, 2}], 
          0.02261146496815286], 
         ArrowBox[BezierCurveBox[{2, {0., 0.32888149436623243`}, 1}], 
          0.02261146496815286]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.02261146496815286], DiskBox[2, 0.02261146496815286]}}]],
     
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->{
   "NetworkGraphics", FrontEnd`GraphicsHighlightColor -> Hue[0.8, 1., 0.6]},
  FormatType->TraditionalForm,
  FrameTicks->None]], "Output",
 CellChangeTimes->{3.800934497147735*^9},
 CellLabel->"Out[20]=",ExpressionUUID->"4d215912-c12b-4d0d-b866-4c0b279445ef"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Graph", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"e", "\[Rule]", "o"}], ",", "\[IndentingNewLine]", 
    RowBox[{"e", "\[Rule]", "e"}], ",", "\[IndentingNewLine]", 
    RowBox[{"o", "\[Rule]", "e"}]}], "\[IndentingNewLine]", "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.800934792065839*^9, 
  3.800934820208777*^9}},ExpressionUUID->"e25928c7-0fd2-457f-a068-\
78078a2fb0f6"]
},
WindowSize->{1057, 1138},
WindowMargins->{{Automatic, 1}, {1, Automatic}},
Magnification:>1.5 Inherited,
FrontEndVersion->"12.1 for Linux x86 (64-bit) (March 18, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"ecf877cc-7093-4e51-aadc-b3593d5c4c59"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 437, 10, 66, "Input",ExpressionUUID->"89049281-e7b7-4958-bb4a-3c88567d2358"],
Cell[998, 32, 280, 6, 43, "Input",ExpressionUUID->"c3245b5c-7c29-4a8d-bf85-6b14f500b48e"],
Cell[1281, 40, 247, 5, 63, "Input",ExpressionUUID->"6b9c6dfc-c2e7-4318-8311-81b0f3f5f743"],
Cell[1531, 47, 267, 6, 43, "Input",ExpressionUUID->"04dc78bb-13ca-479c-a28c-f56c6c6c05c9"],
Cell[1801, 55, 421, 11, 43, "Input",ExpressionUUID->"920cca6a-c7da-4a06-bd6f-89025ec9dc04"],
Cell[CellGroupData[{
Cell[2247, 70, 204, 3, 43, "Input",ExpressionUUID->"ee215fc1-7626-44a8-bb98-85cb65c19119"],
Cell[2454, 75, 685, 22, 71, "Output",ExpressionUUID->"cbc0982f-41cf-4b41-b0f2-52c45e54f084"]
}, Open  ]],
Cell[CellGroupData[{
Cell[3176, 102, 824, 26, 66, "Input",ExpressionUUID->"109e2007-611b-4e81-8c37-ade390dd26e8"],
Cell[4003, 130, 4252, 104, 363, "Output",ExpressionUUID->"82710f4b-cd15-4fdd-b85c-65cc866765c1"]
}, Open  ]],
Cell[8270, 237, 1813, 50, 77, "Input",ExpressionUUID->"ea4b8358-5690-47c6-b5ac-a01f91dfe3be"],
Cell[CellGroupData[{
Cell[10108, 291, 366, 9, 43, "Input",ExpressionUUID->"e9ea4976-d081-4e13-a1c4-5e42e6e4875f"],
Cell[10477, 302, 876, 28, 71, "Output",ExpressionUUID->"71df16b3-a580-4efd-b66e-928d83e5b48a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11390, 335, 913, 29, 66, "Input",ExpressionUUID->"08f83902-094a-4498-968f-8c1b69ece72a"],
Cell[12306, 366, 363, 9, 31, "Message",ExpressionUUID->"ce9ba668-0b0e-482d-b79d-d0fc01a21bff"],
Cell[12672, 377, 935, 29, 71, "Output",ExpressionUUID->"e5cc9772-216c-4c75-a194-329b4b927415"]
}, Open  ]],
Cell[13622, 409, 154, 3, 43, "Input",ExpressionUUID->"d1cbc053-1a42-4612-a850-1a0d1792f346"],
Cell[CellGroupData[{
Cell[13801, 416, 227, 3, 43, "Input",ExpressionUUID->"3b316afe-2fea-40f3-9ffe-58e8dc8ac3ca"],
Cell[14031, 421, 342, 7, 64, "Output",ExpressionUUID->"806e3c88-5618-459a-909a-33687b6b37f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[14410, 433, 1062, 30, 178, "Input",ExpressionUUID->"87137817-41b9-4e77-ad2a-fc20d174d666"],
Cell[15475, 465, 68903, 1154, 880, "Output",ExpressionUUID->"854e4a0a-30d4-4c17-9309-05f6ea1c1045"]
}, Open  ]],
Cell[CellGroupData[{
Cell[84415, 1624, 234, 3, 43, "Input",ExpressionUUID->"397644ee-d170-44a9-aac6-1c251fdd1ad7"],
Cell[84652, 1629, 2361, 63, 55, "Output",ExpressionUUID->"d37c4958-da7e-469d-8041-81c7f7f88802"]
}, Open  ]],
Cell[CellGroupData[{
Cell[87050, 1697, 3299, 81, 153, "Input",ExpressionUUID->"569be1f0-69ad-4ad7-b265-be5982283438"],
Cell[90352, 1780, 89426, 2160, 99, "Output",ExpressionUUID->"a56f1f45-65d1-4d50-85ad-1f2ce9f4c2e1"]
}, Open  ]],
Cell[179793, 3943, 154, 3, 43, "Input",ExpressionUUID->"beef4ea5-02ac-48c0-8d70-6b8cc5b39b5f"],
Cell[CellGroupData[{
Cell[179972, 3950, 91683, 2173, 92, "Input",ExpressionUUID->"59fe1872-6eff-4d82-83f7-eba4600895c0"],
Cell[271658, 6125, 316683, 6862, 518, "Output",ExpressionUUID->"2a50d148-9188-40ea-bd85-8c91461ddc26"]
}, Open  ]],
Cell[CellGroupData[{
Cell[588378, 12992, 91688, 2173, 92, "Input",ExpressionUUID->"b4920238-fca6-4985-84dc-f8988789a922"],
Cell[680069, 15167, 348686, 8157, 23731, "Output",ExpressionUUID->"ba75712d-7bb8-45fb-88ff-ec8d8f8ccfdb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1028792, 23329, 510, 10, 206, "Input",ExpressionUUID->"71ecf318-4eaa-4390-ad2e-65b26cf331a9"],
Cell[1029305, 23341, 2075, 39, 498, "Output",ExpressionUUID->"443eba6d-7c3d-4043-a78d-7f5e57907939"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1031417, 23385, 748, 15, 366, "Input",ExpressionUUID->"58cb6aeb-dbe9-46f6-805d-c6b22b8352ac"],
Cell[1032168, 23402, 479, 13, 51, "Output",ExpressionUUID->"e715d7b7-0a69-4599-a4b0-2a8ef98df6fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1032684, 23420, 792, 16, 366, "Input",ExpressionUUID->"d2367168-19db-42c8-a383-2e417ea0c6e2"],
Cell[1033479, 23438, 2211, 43, 498, "Output",ExpressionUUID->"ddb99f65-7fa0-41be-b8d9-60e69cc11a04"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1035727, 23486, 497, 10, 174, "Input",ExpressionUUID->"7a53402a-0e29-4b73-b3b8-fc01dcf17283"],
Cell[1036227, 23498, 1966, 38, 227, "Output",ExpressionUUID->"4d215912-c12b-4d0d-b866-4c0b279445ef"]
}, Open  ]],
Cell[1038208, 23539, 429, 10, 174, "Input",ExpressionUUID->"e25928c7-0fd2-457f-a068-78078a2fb0f6"]
}
]
*)

(* End of internal cache information *)

