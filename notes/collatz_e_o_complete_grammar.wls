#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Input:: *)
(*$RecursionLimit=Infinity*)
(**)
(*collatz[1]=1*)
(**)
(*collatz[n_Integer/;And[n>1,OddQ[n]]]:=collatz[n]=3 n+1*)
(*collatz[n_Integer/;And[n>1,EvenQ[n]]]:=collatz[n]=n/2*)
(**)
(*collatzseq[1]={1}*)
(*collatzseq[n_Integer/;n>1]:=collatzseq[n]={n,Splice@collatzseq@collatz@n}*)
(**)
(*collatzseq[93571393692802302];*)
(**)
(*map[n_Integer/;OddQ[n]]=o*)
(*map[n_Integer/;EvenQ[n]]=e*)
(**)
(*c=Map[map,collatzseq[93571393692802302]]; *)
(**)
(*seqrules={{e,o,e,o,e}:>\[Alpha],{e,o,e}:>\[Beta],{\[Alpha],o}:>\[Gamma],{e,e}:>\[Delta],{\[Beta],\[Beta]}:>\[Zeta],{e,\[Gamma]}:>A,{e,\[Alpha]}:>B,{e,\[Beta]}:>F,{e,\[Zeta]}:>G,{\[Delta],e,o}:>T}*)
(*oseqrules={{e,o,e,o,e}:>\[Alpha],{e,o,e}:>\[Beta],{\[Alpha],o}:>\[Gamma]}*)
(**)
(*seqfuncs=Apply[RightComposition,Map[SequenceReplace,seqrules]]*)
(*oseqfuncs=Apply[RightComposition,Map[SequenceReplace,oseqrules]]*)


(* ::Input:: *)
(*Tally@c*)


(* ::Input:: *)
(*c*)


(* ::Input:: *)
(*Length[%16]*)


(* ::Input:: *)
(*Grid@*)
(*TakeLargestBy[*)
(*Table[*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}],*)
(*Last,10]*)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Table[*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Table[*)
(*Tally@Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Table[*)
(*Splice@*)
(*Tally@*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Table[*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Tally@*)
(*Table[*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(**)


(* ::Input:: *)
(*With[{c=c[[;;10]]},*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;100]]},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,1,Length@c/2,1}]*)
(*,Last,15]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;100]]},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*,Last,15]*)
(*]*)


(* ::Input:: *)
(*With[{c=c[[;;100]]},*)
(*Grid@*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#*)
(*}&,*)
(*TakeLargestBy[*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*,Last,15]*)
(*]*)
(*]*)


(* ::Input:: *)
(*With[{c=c},*)
(*Grid@*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#*)
(*}&,*)
(*TakeLargestBy[*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*,Last,15]*)
(*]*)
(*]*)


(* ::Input:: *)
(*SequenceReplace[c,{e,o,e}:>a]*)


(* ::Input:: *)
(*Tally[%31]*)


(* ::Input:: *)
(*With[{c=Out[31]},*)
(*Grid@*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#*)
(*}&,*)
(*TakeLargestBy[*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*,Last,5]*)
(*]*)
(*]*)


(* ::Input:: *)
(*With[{c=c},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,Last,15]*)
(*]*)


(* ::Input:: *)
(*With[{c=Out[31]},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,Last,15]*)
(*]*)


(* ::Input:: *)
(*With[{c=Out[31]},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,And[*)
(*Length@First@# !=1,*)
(*Extract[#,2]!=1*)
(*]&]*)
(*,Last,15]*)
(*]*)


(* ::Input:: *)
(*With[{c=c},*)
(*Grid@*)
(*TakeLargestBy[*)
(*Select[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#,*)
(*(Length@First@#-1)Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,And[*)
(*Length@First@# !=1,*)
(*Extract[#,2]!=1*)
(*]&]*)
(*,Last,15]*)
(*]*)


(* ::Input:: *)
(*With[{c=c},*)
(*Grid@*)
(*Prepend[*)
(*TakeLargestBy[*)
(*Select[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#,*)
(*(Length@First@#-1)Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,And[*)
(*Length@First@# !=1,*)
(*Extract[#,2]!=1*)
(*]&]*)
(*,Last,15]*)
(*,{"Lexeme","Freq","Freq * Len[Lexeme]","(Len[Lexeme]-1)* Freq"}]*)
(*]*)


(* ::Input:: *)
(*SequenceReplace[c,{e,o,e,o,e}:>z]*)


(* ::Input:: *)
(*Tally[%42]*)


(* ::Input:: *)
(*With[{c=Out[42]},*)
(*Grid@*)
(*Prepend[*)
(*TakeLargestBy[*)
(*Select[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#,*)
(*(Length@First@#-1)Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,And[*)
(*Length@First@# !=1,*)
(*Extract[#,2]!=1*)
(*]&]*)
(*,Last,15]*)
(*,{"Lexeme","Freq","Freq * Len[Lexeme]","(Len[Lexeme]-1)* Freq"}]*)
(*]*)


(* ::Input:: *)
(*SequenceReplace[Out[42],{e,o,e}:>y]*)


(* ::Input:: *)
(*Tally[%45]*)


(* ::Input:: *)
(*Tally@c*)


(* ::Input:: *)
(*With[{c=Out[45]},*)
(*Grid@*)
(*Prepend[*)
(*TakeLargestBy[*)
(*Select[*)
(*Map[{*)
(*First@#,*)
(*Last@#,*)
(*Length@First@# Last@#,*)
(*(Length@First@#-1)Last@#*)
(*}&,*)
(*Tally@*)
(*Table[*)
(*Splice@*)
(*Partition[c,i,1],*)
(*{i,2,Length@c/2,1}]*)
(*]*)
(*,And[*)
(*Length@First@# !=1,*)
(*Extract[#,2]!=1*)
(*]&]*)
(*,Last,15]*)
(*,{"Lexeme","Freq","Freq * Len[Lexeme]","(Len[Lexeme]-1)* Freq"}]*)
(*]*)


(* ::Input:: *)
(*2*)


(* ::Input:: *)
(*SequenceReplace[Out[45],{z,o}:>x]*)


(* ::Input:: *)
(*Length[%50]*)


(* ::Input:: *)
(*Tally[%50]*)


(* ::Input:: *)
(*oseqrules*)


(* ::Input:: *)
(*TableForm[Apply[List,{{e,o,e,o,e}:>\[Alpha],{e,o,e}:>\[Beta],{\[Alpha],o}:>\[Gamma]},{1}]]*)


(* ::Input:: *)
(*{{e,o,e,o,e}:>\[Alpha],{e,o,e}:>\[Beta],{Splice@{e,o,e,o,e},o}:>\[Gamma]}*)


(* ::Input:: *)
(*{{e,o,e,o,e}:>\[Alpha],{e,o,e}:>\[Beta],{e,o,e,o,e,o}:>\[Gamma]}*)


(* ::Input:: *)
(*SequenceReplace[c,{e,o}:>A]*)


(* ::Input:: *)
(*Tally[%56]*)
